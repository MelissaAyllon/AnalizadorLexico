Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    BOOL
    CUSTOM_TYPE
    MOD
    NULL
    NULLABLE
    RETURN
    STATIC
    THIS

Grammar

Rule 0     S' -> program
Rule 1     statement -> CLASS ID LBRACE class_body RBRACE
Rule 2     type -> INT_TYPE
Rule 3     type -> STRING_TYPE
Rule 4     type -> BOOL_TYPE
Rule 5     type -> DOUBLE_TYPE
Rule 6     type -> ID
Rule 7     statement -> type ID ASSIGN expression SEMI
Rule 8     statement -> VAR ID ASSIGN expression SEMI
Rule 9     statement -> FINAL ID ASSIGN expression SEMI
Rule 10    statement -> NEWLINE
Rule 11    statement -> ID ID ASSIGN NEW ID LPAREN RPAREN SEMI
Rule 12    statement -> IF LPAREN expression RPAREN LBRACE statement RBRACE
Rule 13    statement -> IF LPAREN expression RPAREN LBRACE statement RBRACE ELSE LBRACE statement RBRACE
Rule 14    expression -> INT
Rule 15    expression -> expression PLUS expression
Rule 16    expression -> expression MINUS expression
Rule 17    expression -> expression TIMES expression
Rule 18    expression -> expression DIVIDE expression
Rule 19    expression -> STRING
Rule 20    expression -> TRUE
Rule 21    expression -> FALSE
Rule 22    expression -> expression AND expression
Rule 23    expression -> expression OR expression
Rule 24    expression -> NOT expression
Rule 25    expression -> expression EQ expression
Rule 26    expression -> expression NEQ expression
Rule 27    expression -> LPAREN expression RPAREN
Rule 28    expression -> ID
Rule 29    expression -> expression DOT ID
Rule 30    statement -> PRINT LPAREN expression RPAREN SEMI
Rule 31    expression -> STDIN DOT READLINESYNC LPAREN RPAREN
Rule 32    statement -> LIST LT type GT ID ASSIGN LBRACKET RBRACKET SEMI
Rule 33    statement -> LIST LT type GT ID ASSIGN LBRACKET group RBRACKET SEMI
Rule 34    statement -> LIST ID ASSIGN LBRACKET group RBRACKET SEMI
Rule 35    group -> expression COMA group
Rule 36    group -> expression
Rule 37    statement -> WHILE LPAREN expression RPAREN LBRACE statement RBRACE
Rule 38    statement -> FOR LPAREN for_init SEMI expression SEMI for_update RPAREN LBRACE statement RBRACE
Rule 39    statement -> FOR LPAREN VAR ID IN expression RPAREN LBRACE statement RBRACE
Rule 40    for_init -> VAR ID ASSIGN expression
Rule 41    for_init -> type ID ASSIGN expression
Rule 42    for_init -> expression
Rule 43    for_update -> ID PLUS PLUS
Rule 44    for_update -> ID MINUS MINUS
Rule 45    for_update -> ID ASSIGN expression
Rule 46    statement -> MAP LT type COMA type GT ID ASSIGN LBRACE map_entries RBRACE SEMI
Rule 47    statement -> MAP LT type COMA type GT ID ASSIGN LBRACE RBRACE SEMI
Rule 48    map_entries -> map_entry COMA map_entries
Rule 49    map_entries -> map_entry
Rule 50    map_entry -> expression COLON expression
Rule 51    statement -> SET LT type GT ID ASSIGN LBRACE set_elements RBRACE SEMI
Rule 52    statement -> SET LT type GT ID ASSIGN LBRACE RBRACE SEMI
Rule 53    set_elements -> expression COMA set_elements
Rule 54    set_elements -> expression
Rule 55    expression -> DOUBLE
Rule 56    expression -> expression PLUS DOUBLE
Rule 57    expression -> expression MINUS DOUBLE
Rule 58    expression -> expression TIMES DOUBLE
Rule 59    expression -> expression DIVIDE DOUBLE
Rule 60    expression -> DOUBLE PLUS expression
Rule 61    expression -> DOUBLE MINUS expression
Rule 62    expression -> DOUBLE TIMES expression
Rule 63    expression -> DOUBLE DIVIDE expression
Rule 64    class_body -> <empty>
Rule 65    class_body -> statement
Rule 66    class_body -> statement class_body
Rule 67    statement -> VOID ID LPAREN param_list RPAREN LBRACE statement RBRACE
Rule 68    statement -> VOID ID LPAREN RPAREN LBRACE statement RBRACE
Rule 69    param_list -> param COMA param_list
Rule 70    param_list -> param
Rule 71    param -> type ID
Rule 72    program -> statements
Rule 73    statements -> statements statement
Rule 74    statements -> statement

Terminals, with rules where they appear

AND                  : 22
ASSIGN               : 7 8 9 11 32 33 34 40 41 45 46 47 51 52
BOOL                 : 
BOOL_TYPE            : 4
CLASS                : 1
COLON                : 50
COMA                 : 35 46 47 48 53 69
CUSTOM_TYPE          : 
DIVIDE               : 18 59 63
DOT                  : 29 31
DOUBLE               : 55 56 57 58 59 60 61 62 63
DOUBLE_TYPE          : 5
ELSE                 : 13
EQ                   : 25
FALSE                : 21
FINAL                : 9
FOR                  : 38 39
GT                   : 32 33 46 47 51 52
ID                   : 1 6 7 8 9 11 11 11 28 29 32 33 34 39 40 41 43 44 45 46 47 51 52 67 68 71
IF                   : 12 13
IN                   : 39
INT                  : 14
INT_TYPE             : 2
LBRACE               : 1 12 13 13 37 38 39 46 47 51 52 67 68
LBRACKET             : 32 33 34
LIST                 : 32 33 34
LPAREN               : 11 12 13 27 30 31 37 38 39 67 68
LT                   : 32 33 46 47 51 52
MAP                  : 46 47
MINUS                : 16 44 44 57 61
MOD                  : 
NEQ                  : 26
NEW                  : 11
NEWLINE              : 10
NOT                  : 24
NULL                 : 
NULLABLE             : 
OR                   : 23
PLUS                 : 15 43 43 56 60
PRINT                : 30
RBRACE               : 1 12 13 13 37 38 39 46 47 51 52 67 68
RBRACKET             : 32 33 34
READLINESYNC         : 31
RETURN               : 
RPAREN               : 11 12 13 27 30 31 37 38 39 67 68
SEMI                 : 7 8 9 11 30 32 33 34 38 38 46 47 51 52
SET                  : 51 52
STATIC               : 
STDIN                : 31
STRING               : 19
STRING_TYPE          : 3
THIS                 : 
TIMES                : 17 58 62
TRUE                 : 20
VAR                  : 8 39 40
VOID                 : 67 68
WHILE                : 37
error                : 

Nonterminals, with rules where they appear

class_body           : 1 66
expression           : 7 8 9 12 13 15 15 16 16 17 17 18 18 22 22 23 23 24 25 25 26 26 27 29 30 35 36 37 38 39 40 41 42 45 50 50 53 54 56 57 58 59 60 61 62 63
for_init             : 38
for_update           : 38
group                : 33 34 35
map_entries          : 46 48
map_entry            : 48 49
param                : 69 70
param_list           : 67 69
program              : 0
set_elements         : 51 53
statement            : 12 13 13 37 38 39 65 66 67 68 73 74
statements           : 72 73
type                 : 7 32 33 41 46 46 47 47 51 52 71

Parsing method: LALR

state 0

    (0) S' -> . program
    (72) program -> . statements
    (73) statements -> . statements statement
    (74) statements -> . statement
    (1) statement -> . CLASS ID LBRACE class_body RBRACE
    (7) statement -> . type ID ASSIGN expression SEMI
    (8) statement -> . VAR ID ASSIGN expression SEMI
    (9) statement -> . FINAL ID ASSIGN expression SEMI
    (10) statement -> . NEWLINE
    (11) statement -> . ID ID ASSIGN NEW ID LPAREN RPAREN SEMI
    (12) statement -> . IF LPAREN expression RPAREN LBRACE statement RBRACE
    (13) statement -> . IF LPAREN expression RPAREN LBRACE statement RBRACE ELSE LBRACE statement RBRACE
    (30) statement -> . PRINT LPAREN expression RPAREN SEMI
    (32) statement -> . LIST LT type GT ID ASSIGN LBRACKET RBRACKET SEMI
    (33) statement -> . LIST LT type GT ID ASSIGN LBRACKET group RBRACKET SEMI
    (34) statement -> . LIST ID ASSIGN LBRACKET group RBRACKET SEMI
    (37) statement -> . WHILE LPAREN expression RPAREN LBRACE statement RBRACE
    (38) statement -> . FOR LPAREN for_init SEMI expression SEMI for_update RPAREN LBRACE statement RBRACE
    (39) statement -> . FOR LPAREN VAR ID IN expression RPAREN LBRACE statement RBRACE
    (46) statement -> . MAP LT type COMA type GT ID ASSIGN LBRACE map_entries RBRACE SEMI
    (47) statement -> . MAP LT type COMA type GT ID ASSIGN LBRACE RBRACE SEMI
    (51) statement -> . SET LT type GT ID ASSIGN LBRACE set_elements RBRACE SEMI
    (52) statement -> . SET LT type GT ID ASSIGN LBRACE RBRACE SEMI
    (67) statement -> . VOID ID LPAREN param_list RPAREN LBRACE statement RBRACE
    (68) statement -> . VOID ID LPAREN RPAREN LBRACE statement RBRACE
    (2) type -> . INT_TYPE
    (3) type -> . STRING_TYPE
    (4) type -> . BOOL_TYPE
    (5) type -> . DOUBLE_TYPE
    (6) type -> . ID

    CLASS           shift and go to state 4
    VAR             shift and go to state 7
    FINAL           shift and go to state 8
    NEWLINE         shift and go to state 9
    ID              shift and go to state 5
    IF              shift and go to state 10
    PRINT           shift and go to state 11
    LIST            shift and go to state 12
    WHILE           shift and go to state 13
    FOR             shift and go to state 14
    MAP             shift and go to state 15
    SET             shift and go to state 16
    VOID            shift and go to state 17
    INT_TYPE        shift and go to state 18
    STRING_TYPE     shift and go to state 19
    BOOL_TYPE       shift and go to state 20
    DOUBLE_TYPE     shift and go to state 21

    program                        shift and go to state 1
    statements                     shift and go to state 2
    statement                      shift and go to state 3
    type                           shift and go to state 6

state 1

    (0) S' -> program .



state 2

    (72) program -> statements .
    (73) statements -> statements . statement
    (1) statement -> . CLASS ID LBRACE class_body RBRACE
    (7) statement -> . type ID ASSIGN expression SEMI
    (8) statement -> . VAR ID ASSIGN expression SEMI
    (9) statement -> . FINAL ID ASSIGN expression SEMI
    (10) statement -> . NEWLINE
    (11) statement -> . ID ID ASSIGN NEW ID LPAREN RPAREN SEMI
    (12) statement -> . IF LPAREN expression RPAREN LBRACE statement RBRACE
    (13) statement -> . IF LPAREN expression RPAREN LBRACE statement RBRACE ELSE LBRACE statement RBRACE
    (30) statement -> . PRINT LPAREN expression RPAREN SEMI
    (32) statement -> . LIST LT type GT ID ASSIGN LBRACKET RBRACKET SEMI
    (33) statement -> . LIST LT type GT ID ASSIGN LBRACKET group RBRACKET SEMI
    (34) statement -> . LIST ID ASSIGN LBRACKET group RBRACKET SEMI
    (37) statement -> . WHILE LPAREN expression RPAREN LBRACE statement RBRACE
    (38) statement -> . FOR LPAREN for_init SEMI expression SEMI for_update RPAREN LBRACE statement RBRACE
    (39) statement -> . FOR LPAREN VAR ID IN expression RPAREN LBRACE statement RBRACE
    (46) statement -> . MAP LT type COMA type GT ID ASSIGN LBRACE map_entries RBRACE SEMI
    (47) statement -> . MAP LT type COMA type GT ID ASSIGN LBRACE RBRACE SEMI
    (51) statement -> . SET LT type GT ID ASSIGN LBRACE set_elements RBRACE SEMI
    (52) statement -> . SET LT type GT ID ASSIGN LBRACE RBRACE SEMI
    (67) statement -> . VOID ID LPAREN param_list RPAREN LBRACE statement RBRACE
    (68) statement -> . VOID ID LPAREN RPAREN LBRACE statement RBRACE
    (2) type -> . INT_TYPE
    (3) type -> . STRING_TYPE
    (4) type -> . BOOL_TYPE
    (5) type -> . DOUBLE_TYPE
    (6) type -> . ID

    $end            reduce using rule 72 (program -> statements .)
    CLASS           shift and go to state 4
    VAR             shift and go to state 7
    FINAL           shift and go to state 8
    NEWLINE         shift and go to state 9
    ID              shift and go to state 5
    IF              shift and go to state 10
    PRINT           shift and go to state 11
    LIST            shift and go to state 12
    WHILE           shift and go to state 13
    FOR             shift and go to state 14
    MAP             shift and go to state 15
    SET             shift and go to state 16
    VOID            shift and go to state 17
    INT_TYPE        shift and go to state 18
    STRING_TYPE     shift and go to state 19
    BOOL_TYPE       shift and go to state 20
    DOUBLE_TYPE     shift and go to state 21

    statement                      shift and go to state 22
    type                           shift and go to state 6

state 3

    (74) statements -> statement .

    CLASS           reduce using rule 74 (statements -> statement .)
    VAR             reduce using rule 74 (statements -> statement .)
    FINAL           reduce using rule 74 (statements -> statement .)
    NEWLINE         reduce using rule 74 (statements -> statement .)
    ID              reduce using rule 74 (statements -> statement .)
    IF              reduce using rule 74 (statements -> statement .)
    PRINT           reduce using rule 74 (statements -> statement .)
    LIST            reduce using rule 74 (statements -> statement .)
    WHILE           reduce using rule 74 (statements -> statement .)
    FOR             reduce using rule 74 (statements -> statement .)
    MAP             reduce using rule 74 (statements -> statement .)
    SET             reduce using rule 74 (statements -> statement .)
    VOID            reduce using rule 74 (statements -> statement .)
    INT_TYPE        reduce using rule 74 (statements -> statement .)
    STRING_TYPE     reduce using rule 74 (statements -> statement .)
    BOOL_TYPE       reduce using rule 74 (statements -> statement .)
    DOUBLE_TYPE     reduce using rule 74 (statements -> statement .)
    $end            reduce using rule 74 (statements -> statement .)


state 4

    (1) statement -> CLASS . ID LBRACE class_body RBRACE

    ID              shift and go to state 23


state 5

    (11) statement -> ID . ID ASSIGN NEW ID LPAREN RPAREN SEMI
    (6) type -> ID .

  ! shift/reduce conflict for ID resolved as shift
    ID              shift and go to state 24

  ! ID              [ reduce using rule 6 (type -> ID .) ]


state 6

    (7) statement -> type . ID ASSIGN expression SEMI

    ID              shift and go to state 25


state 7

    (8) statement -> VAR . ID ASSIGN expression SEMI

    ID              shift and go to state 26


state 8

    (9) statement -> FINAL . ID ASSIGN expression SEMI

    ID              shift and go to state 27


state 9

    (10) statement -> NEWLINE .

    CLASS           reduce using rule 10 (statement -> NEWLINE .)
    VAR             reduce using rule 10 (statement -> NEWLINE .)
    FINAL           reduce using rule 10 (statement -> NEWLINE .)
    NEWLINE         reduce using rule 10 (statement -> NEWLINE .)
    ID              reduce using rule 10 (statement -> NEWLINE .)
    IF              reduce using rule 10 (statement -> NEWLINE .)
    PRINT           reduce using rule 10 (statement -> NEWLINE .)
    LIST            reduce using rule 10 (statement -> NEWLINE .)
    WHILE           reduce using rule 10 (statement -> NEWLINE .)
    FOR             reduce using rule 10 (statement -> NEWLINE .)
    MAP             reduce using rule 10 (statement -> NEWLINE .)
    SET             reduce using rule 10 (statement -> NEWLINE .)
    VOID            reduce using rule 10 (statement -> NEWLINE .)
    INT_TYPE        reduce using rule 10 (statement -> NEWLINE .)
    STRING_TYPE     reduce using rule 10 (statement -> NEWLINE .)
    BOOL_TYPE       reduce using rule 10 (statement -> NEWLINE .)
    DOUBLE_TYPE     reduce using rule 10 (statement -> NEWLINE .)
    $end            reduce using rule 10 (statement -> NEWLINE .)
    RBRACE          reduce using rule 10 (statement -> NEWLINE .)


state 10

    (12) statement -> IF . LPAREN expression RPAREN LBRACE statement RBRACE
    (13) statement -> IF . LPAREN expression RPAREN LBRACE statement RBRACE ELSE LBRACE statement RBRACE

    LPAREN          shift and go to state 28


state 11

    (30) statement -> PRINT . LPAREN expression RPAREN SEMI

    LPAREN          shift and go to state 29


state 12

    (32) statement -> LIST . LT type GT ID ASSIGN LBRACKET RBRACKET SEMI
    (33) statement -> LIST . LT type GT ID ASSIGN LBRACKET group RBRACKET SEMI
    (34) statement -> LIST . ID ASSIGN LBRACKET group RBRACKET SEMI

    LT              shift and go to state 30
    ID              shift and go to state 31


state 13

    (37) statement -> WHILE . LPAREN expression RPAREN LBRACE statement RBRACE

    LPAREN          shift and go to state 32


state 14

    (38) statement -> FOR . LPAREN for_init SEMI expression SEMI for_update RPAREN LBRACE statement RBRACE
    (39) statement -> FOR . LPAREN VAR ID IN expression RPAREN LBRACE statement RBRACE

    LPAREN          shift and go to state 33


state 15

    (46) statement -> MAP . LT type COMA type GT ID ASSIGN LBRACE map_entries RBRACE SEMI
    (47) statement -> MAP . LT type COMA type GT ID ASSIGN LBRACE RBRACE SEMI

    LT              shift and go to state 34


state 16

    (51) statement -> SET . LT type GT ID ASSIGN LBRACE set_elements RBRACE SEMI
    (52) statement -> SET . LT type GT ID ASSIGN LBRACE RBRACE SEMI

    LT              shift and go to state 35


state 17

    (67) statement -> VOID . ID LPAREN param_list RPAREN LBRACE statement RBRACE
    (68) statement -> VOID . ID LPAREN RPAREN LBRACE statement RBRACE

    ID              shift and go to state 36


state 18

    (2) type -> INT_TYPE .

    ID              reduce using rule 2 (type -> INT_TYPE .)
    GT              reduce using rule 2 (type -> INT_TYPE .)
    COMA            reduce using rule 2 (type -> INT_TYPE .)


state 19

    (3) type -> STRING_TYPE .

    ID              reduce using rule 3 (type -> STRING_TYPE .)
    GT              reduce using rule 3 (type -> STRING_TYPE .)
    COMA            reduce using rule 3 (type -> STRING_TYPE .)


state 20

    (4) type -> BOOL_TYPE .

    ID              reduce using rule 4 (type -> BOOL_TYPE .)
    GT              reduce using rule 4 (type -> BOOL_TYPE .)
    COMA            reduce using rule 4 (type -> BOOL_TYPE .)


state 21

    (5) type -> DOUBLE_TYPE .

    ID              reduce using rule 5 (type -> DOUBLE_TYPE .)
    GT              reduce using rule 5 (type -> DOUBLE_TYPE .)
    COMA            reduce using rule 5 (type -> DOUBLE_TYPE .)


state 22

    (73) statements -> statements statement .

    CLASS           reduce using rule 73 (statements -> statements statement .)
    VAR             reduce using rule 73 (statements -> statements statement .)
    FINAL           reduce using rule 73 (statements -> statements statement .)
    NEWLINE         reduce using rule 73 (statements -> statements statement .)
    ID              reduce using rule 73 (statements -> statements statement .)
    IF              reduce using rule 73 (statements -> statements statement .)
    PRINT           reduce using rule 73 (statements -> statements statement .)
    LIST            reduce using rule 73 (statements -> statements statement .)
    WHILE           reduce using rule 73 (statements -> statements statement .)
    FOR             reduce using rule 73 (statements -> statements statement .)
    MAP             reduce using rule 73 (statements -> statements statement .)
    SET             reduce using rule 73 (statements -> statements statement .)
    VOID            reduce using rule 73 (statements -> statements statement .)
    INT_TYPE        reduce using rule 73 (statements -> statements statement .)
    STRING_TYPE     reduce using rule 73 (statements -> statements statement .)
    BOOL_TYPE       reduce using rule 73 (statements -> statements statement .)
    DOUBLE_TYPE     reduce using rule 73 (statements -> statements statement .)
    $end            reduce using rule 73 (statements -> statements statement .)


state 23

    (1) statement -> CLASS ID . LBRACE class_body RBRACE

    LBRACE          shift and go to state 37


state 24

    (11) statement -> ID ID . ASSIGN NEW ID LPAREN RPAREN SEMI

    ASSIGN          shift and go to state 38


state 25

    (7) statement -> type ID . ASSIGN expression SEMI

    ASSIGN          shift and go to state 39


state 26

    (8) statement -> VAR ID . ASSIGN expression SEMI

    ASSIGN          shift and go to state 40


state 27

    (9) statement -> FINAL ID . ASSIGN expression SEMI

    ASSIGN          shift and go to state 41


state 28

    (12) statement -> IF LPAREN . expression RPAREN LBRACE statement RBRACE
    (13) statement -> IF LPAREN . expression RPAREN LBRACE statement RBRACE ELSE LBRACE statement RBRACE
    (14) expression -> . INT
    (15) expression -> . expression PLUS expression
    (16) expression -> . expression MINUS expression
    (17) expression -> . expression TIMES expression
    (18) expression -> . expression DIVIDE expression
    (19) expression -> . STRING
    (20) expression -> . TRUE
    (21) expression -> . FALSE
    (22) expression -> . expression AND expression
    (23) expression -> . expression OR expression
    (24) expression -> . NOT expression
    (25) expression -> . expression EQ expression
    (26) expression -> . expression NEQ expression
    (27) expression -> . LPAREN expression RPAREN
    (28) expression -> . ID
    (29) expression -> . expression DOT ID
    (31) expression -> . STDIN DOT READLINESYNC LPAREN RPAREN
    (55) expression -> . DOUBLE
    (56) expression -> . expression PLUS DOUBLE
    (57) expression -> . expression MINUS DOUBLE
    (58) expression -> . expression TIMES DOUBLE
    (59) expression -> . expression DIVIDE DOUBLE
    (60) expression -> . DOUBLE PLUS expression
    (61) expression -> . DOUBLE MINUS expression
    (62) expression -> . DOUBLE TIMES expression
    (63) expression -> . DOUBLE DIVIDE expression

    INT             shift and go to state 44
    STRING          shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    NOT             shift and go to state 48
    LPAREN          shift and go to state 42
    ID              shift and go to state 49
    STDIN           shift and go to state 50
    DOUBLE          shift and go to state 51

    expression                     shift and go to state 43

state 29

    (30) statement -> PRINT LPAREN . expression RPAREN SEMI
    (14) expression -> . INT
    (15) expression -> . expression PLUS expression
    (16) expression -> . expression MINUS expression
    (17) expression -> . expression TIMES expression
    (18) expression -> . expression DIVIDE expression
    (19) expression -> . STRING
    (20) expression -> . TRUE
    (21) expression -> . FALSE
    (22) expression -> . expression AND expression
    (23) expression -> . expression OR expression
    (24) expression -> . NOT expression
    (25) expression -> . expression EQ expression
    (26) expression -> . expression NEQ expression
    (27) expression -> . LPAREN expression RPAREN
    (28) expression -> . ID
    (29) expression -> . expression DOT ID
    (31) expression -> . STDIN DOT READLINESYNC LPAREN RPAREN
    (55) expression -> . DOUBLE
    (56) expression -> . expression PLUS DOUBLE
    (57) expression -> . expression MINUS DOUBLE
    (58) expression -> . expression TIMES DOUBLE
    (59) expression -> . expression DIVIDE DOUBLE
    (60) expression -> . DOUBLE PLUS expression
    (61) expression -> . DOUBLE MINUS expression
    (62) expression -> . DOUBLE TIMES expression
    (63) expression -> . DOUBLE DIVIDE expression

    INT             shift and go to state 44
    STRING          shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    NOT             shift and go to state 48
    LPAREN          shift and go to state 42
    ID              shift and go to state 49
    STDIN           shift and go to state 50
    DOUBLE          shift and go to state 51

    expression                     shift and go to state 52

state 30

    (32) statement -> LIST LT . type GT ID ASSIGN LBRACKET RBRACKET SEMI
    (33) statement -> LIST LT . type GT ID ASSIGN LBRACKET group RBRACKET SEMI
    (2) type -> . INT_TYPE
    (3) type -> . STRING_TYPE
    (4) type -> . BOOL_TYPE
    (5) type -> . DOUBLE_TYPE
    (6) type -> . ID

    INT_TYPE        shift and go to state 18
    STRING_TYPE     shift and go to state 19
    BOOL_TYPE       shift and go to state 20
    DOUBLE_TYPE     shift and go to state 21
    ID              shift and go to state 54

    type                           shift and go to state 53

state 31

    (34) statement -> LIST ID . ASSIGN LBRACKET group RBRACKET SEMI

    ASSIGN          shift and go to state 55


state 32

    (37) statement -> WHILE LPAREN . expression RPAREN LBRACE statement RBRACE
    (14) expression -> . INT
    (15) expression -> . expression PLUS expression
    (16) expression -> . expression MINUS expression
    (17) expression -> . expression TIMES expression
    (18) expression -> . expression DIVIDE expression
    (19) expression -> . STRING
    (20) expression -> . TRUE
    (21) expression -> . FALSE
    (22) expression -> . expression AND expression
    (23) expression -> . expression OR expression
    (24) expression -> . NOT expression
    (25) expression -> . expression EQ expression
    (26) expression -> . expression NEQ expression
    (27) expression -> . LPAREN expression RPAREN
    (28) expression -> . ID
    (29) expression -> . expression DOT ID
    (31) expression -> . STDIN DOT READLINESYNC LPAREN RPAREN
    (55) expression -> . DOUBLE
    (56) expression -> . expression PLUS DOUBLE
    (57) expression -> . expression MINUS DOUBLE
    (58) expression -> . expression TIMES DOUBLE
    (59) expression -> . expression DIVIDE DOUBLE
    (60) expression -> . DOUBLE PLUS expression
    (61) expression -> . DOUBLE MINUS expression
    (62) expression -> . DOUBLE TIMES expression
    (63) expression -> . DOUBLE DIVIDE expression

    INT             shift and go to state 44
    STRING          shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    NOT             shift and go to state 48
    LPAREN          shift and go to state 42
    ID              shift and go to state 49
    STDIN           shift and go to state 50
    DOUBLE          shift and go to state 51

    expression                     shift and go to state 56

state 33

    (38) statement -> FOR LPAREN . for_init SEMI expression SEMI for_update RPAREN LBRACE statement RBRACE
    (39) statement -> FOR LPAREN . VAR ID IN expression RPAREN LBRACE statement RBRACE
    (40) for_init -> . VAR ID ASSIGN expression
    (41) for_init -> . type ID ASSIGN expression
    (42) for_init -> . expression
    (2) type -> . INT_TYPE
    (3) type -> . STRING_TYPE
    (4) type -> . BOOL_TYPE
    (5) type -> . DOUBLE_TYPE
    (6) type -> . ID
    (14) expression -> . INT
    (15) expression -> . expression PLUS expression
    (16) expression -> . expression MINUS expression
    (17) expression -> . expression TIMES expression
    (18) expression -> . expression DIVIDE expression
    (19) expression -> . STRING
    (20) expression -> . TRUE
    (21) expression -> . FALSE
    (22) expression -> . expression AND expression
    (23) expression -> . expression OR expression
    (24) expression -> . NOT expression
    (25) expression -> . expression EQ expression
    (26) expression -> . expression NEQ expression
    (27) expression -> . LPAREN expression RPAREN
    (28) expression -> . ID
    (29) expression -> . expression DOT ID
    (31) expression -> . STDIN DOT READLINESYNC LPAREN RPAREN
    (55) expression -> . DOUBLE
    (56) expression -> . expression PLUS DOUBLE
    (57) expression -> . expression MINUS DOUBLE
    (58) expression -> . expression TIMES DOUBLE
    (59) expression -> . expression DIVIDE DOUBLE
    (60) expression -> . DOUBLE PLUS expression
    (61) expression -> . DOUBLE MINUS expression
    (62) expression -> . DOUBLE TIMES expression
    (63) expression -> . DOUBLE DIVIDE expression

    VAR             shift and go to state 59
    INT_TYPE        shift and go to state 18
    STRING_TYPE     shift and go to state 19
    BOOL_TYPE       shift and go to state 20
    DOUBLE_TYPE     shift and go to state 21
    ID              shift and go to state 60
    INT             shift and go to state 44
    STRING          shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    NOT             shift and go to state 48
    LPAREN          shift and go to state 42
    STDIN           shift and go to state 50
    DOUBLE          shift and go to state 51

    for_init                       shift and go to state 57
    expression                     shift and go to state 58
    type                           shift and go to state 61

state 34

    (46) statement -> MAP LT . type COMA type GT ID ASSIGN LBRACE map_entries RBRACE SEMI
    (47) statement -> MAP LT . type COMA type GT ID ASSIGN LBRACE RBRACE SEMI
    (2) type -> . INT_TYPE
    (3) type -> . STRING_TYPE
    (4) type -> . BOOL_TYPE
    (5) type -> . DOUBLE_TYPE
    (6) type -> . ID

    INT_TYPE        shift and go to state 18
    STRING_TYPE     shift and go to state 19
    BOOL_TYPE       shift and go to state 20
    DOUBLE_TYPE     shift and go to state 21
    ID              shift and go to state 54

    type                           shift and go to state 62

state 35

    (51) statement -> SET LT . type GT ID ASSIGN LBRACE set_elements RBRACE SEMI
    (52) statement -> SET LT . type GT ID ASSIGN LBRACE RBRACE SEMI
    (2) type -> . INT_TYPE
    (3) type -> . STRING_TYPE
    (4) type -> . BOOL_TYPE
    (5) type -> . DOUBLE_TYPE
    (6) type -> . ID

    INT_TYPE        shift and go to state 18
    STRING_TYPE     shift and go to state 19
    BOOL_TYPE       shift and go to state 20
    DOUBLE_TYPE     shift and go to state 21
    ID              shift and go to state 54

    type                           shift and go to state 63

state 36

    (67) statement -> VOID ID . LPAREN param_list RPAREN LBRACE statement RBRACE
    (68) statement -> VOID ID . LPAREN RPAREN LBRACE statement RBRACE

    LPAREN          shift and go to state 64


state 37

    (1) statement -> CLASS ID LBRACE . class_body RBRACE
    (64) class_body -> .
    (65) class_body -> . statement
    (66) class_body -> . statement class_body
    (1) statement -> . CLASS ID LBRACE class_body RBRACE
    (7) statement -> . type ID ASSIGN expression SEMI
    (8) statement -> . VAR ID ASSIGN expression SEMI
    (9) statement -> . FINAL ID ASSIGN expression SEMI
    (10) statement -> . NEWLINE
    (11) statement -> . ID ID ASSIGN NEW ID LPAREN RPAREN SEMI
    (12) statement -> . IF LPAREN expression RPAREN LBRACE statement RBRACE
    (13) statement -> . IF LPAREN expression RPAREN LBRACE statement RBRACE ELSE LBRACE statement RBRACE
    (30) statement -> . PRINT LPAREN expression RPAREN SEMI
    (32) statement -> . LIST LT type GT ID ASSIGN LBRACKET RBRACKET SEMI
    (33) statement -> . LIST LT type GT ID ASSIGN LBRACKET group RBRACKET SEMI
    (34) statement -> . LIST ID ASSIGN LBRACKET group RBRACKET SEMI
    (37) statement -> . WHILE LPAREN expression RPAREN LBRACE statement RBRACE
    (38) statement -> . FOR LPAREN for_init SEMI expression SEMI for_update RPAREN LBRACE statement RBRACE
    (39) statement -> . FOR LPAREN VAR ID IN expression RPAREN LBRACE statement RBRACE
    (46) statement -> . MAP LT type COMA type GT ID ASSIGN LBRACE map_entries RBRACE SEMI
    (47) statement -> . MAP LT type COMA type GT ID ASSIGN LBRACE RBRACE SEMI
    (51) statement -> . SET LT type GT ID ASSIGN LBRACE set_elements RBRACE SEMI
    (52) statement -> . SET LT type GT ID ASSIGN LBRACE RBRACE SEMI
    (67) statement -> . VOID ID LPAREN param_list RPAREN LBRACE statement RBRACE
    (68) statement -> . VOID ID LPAREN RPAREN LBRACE statement RBRACE
    (2) type -> . INT_TYPE
    (3) type -> . STRING_TYPE
    (4) type -> . BOOL_TYPE
    (5) type -> . DOUBLE_TYPE
    (6) type -> . ID

    RBRACE          reduce using rule 64 (class_body -> .)
    CLASS           shift and go to state 4
    VAR             shift and go to state 7
    FINAL           shift and go to state 8
    NEWLINE         shift and go to state 9
    ID              shift and go to state 5
    IF              shift and go to state 10
    PRINT           shift and go to state 11
    LIST            shift and go to state 12
    WHILE           shift and go to state 13
    FOR             shift and go to state 14
    MAP             shift and go to state 15
    SET             shift and go to state 16
    VOID            shift and go to state 17
    INT_TYPE        shift and go to state 18
    STRING_TYPE     shift and go to state 19
    BOOL_TYPE       shift and go to state 20
    DOUBLE_TYPE     shift and go to state 21

    class_body                     shift and go to state 65
    statement                      shift and go to state 66
    type                           shift and go to state 6

state 38

    (11) statement -> ID ID ASSIGN . NEW ID LPAREN RPAREN SEMI

    NEW             shift and go to state 67


state 39

    (7) statement -> type ID ASSIGN . expression SEMI
    (14) expression -> . INT
    (15) expression -> . expression PLUS expression
    (16) expression -> . expression MINUS expression
    (17) expression -> . expression TIMES expression
    (18) expression -> . expression DIVIDE expression
    (19) expression -> . STRING
    (20) expression -> . TRUE
    (21) expression -> . FALSE
    (22) expression -> . expression AND expression
    (23) expression -> . expression OR expression
    (24) expression -> . NOT expression
    (25) expression -> . expression EQ expression
    (26) expression -> . expression NEQ expression
    (27) expression -> . LPAREN expression RPAREN
    (28) expression -> . ID
    (29) expression -> . expression DOT ID
    (31) expression -> . STDIN DOT READLINESYNC LPAREN RPAREN
    (55) expression -> . DOUBLE
    (56) expression -> . expression PLUS DOUBLE
    (57) expression -> . expression MINUS DOUBLE
    (58) expression -> . expression TIMES DOUBLE
    (59) expression -> . expression DIVIDE DOUBLE
    (60) expression -> . DOUBLE PLUS expression
    (61) expression -> . DOUBLE MINUS expression
    (62) expression -> . DOUBLE TIMES expression
    (63) expression -> . DOUBLE DIVIDE expression

    INT             shift and go to state 44
    STRING          shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    NOT             shift and go to state 48
    LPAREN          shift and go to state 42
    ID              shift and go to state 49
    STDIN           shift and go to state 50
    DOUBLE          shift and go to state 51

    expression                     shift and go to state 68

state 40

    (8) statement -> VAR ID ASSIGN . expression SEMI
    (14) expression -> . INT
    (15) expression -> . expression PLUS expression
    (16) expression -> . expression MINUS expression
    (17) expression -> . expression TIMES expression
    (18) expression -> . expression DIVIDE expression
    (19) expression -> . STRING
    (20) expression -> . TRUE
    (21) expression -> . FALSE
    (22) expression -> . expression AND expression
    (23) expression -> . expression OR expression
    (24) expression -> . NOT expression
    (25) expression -> . expression EQ expression
    (26) expression -> . expression NEQ expression
    (27) expression -> . LPAREN expression RPAREN
    (28) expression -> . ID
    (29) expression -> . expression DOT ID
    (31) expression -> . STDIN DOT READLINESYNC LPAREN RPAREN
    (55) expression -> . DOUBLE
    (56) expression -> . expression PLUS DOUBLE
    (57) expression -> . expression MINUS DOUBLE
    (58) expression -> . expression TIMES DOUBLE
    (59) expression -> . expression DIVIDE DOUBLE
    (60) expression -> . DOUBLE PLUS expression
    (61) expression -> . DOUBLE MINUS expression
    (62) expression -> . DOUBLE TIMES expression
    (63) expression -> . DOUBLE DIVIDE expression

    INT             shift and go to state 44
    STRING          shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    NOT             shift and go to state 48
    LPAREN          shift and go to state 42
    ID              shift and go to state 49
    STDIN           shift and go to state 50
    DOUBLE          shift and go to state 51

    expression                     shift and go to state 69

state 41

    (9) statement -> FINAL ID ASSIGN . expression SEMI
    (14) expression -> . INT
    (15) expression -> . expression PLUS expression
    (16) expression -> . expression MINUS expression
    (17) expression -> . expression TIMES expression
    (18) expression -> . expression DIVIDE expression
    (19) expression -> . STRING
    (20) expression -> . TRUE
    (21) expression -> . FALSE
    (22) expression -> . expression AND expression
    (23) expression -> . expression OR expression
    (24) expression -> . NOT expression
    (25) expression -> . expression EQ expression
    (26) expression -> . expression NEQ expression
    (27) expression -> . LPAREN expression RPAREN
    (28) expression -> . ID
    (29) expression -> . expression DOT ID
    (31) expression -> . STDIN DOT READLINESYNC LPAREN RPAREN
    (55) expression -> . DOUBLE
    (56) expression -> . expression PLUS DOUBLE
    (57) expression -> . expression MINUS DOUBLE
    (58) expression -> . expression TIMES DOUBLE
    (59) expression -> . expression DIVIDE DOUBLE
    (60) expression -> . DOUBLE PLUS expression
    (61) expression -> . DOUBLE MINUS expression
    (62) expression -> . DOUBLE TIMES expression
    (63) expression -> . DOUBLE DIVIDE expression

    INT             shift and go to state 44
    STRING          shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    NOT             shift and go to state 48
    LPAREN          shift and go to state 42
    ID              shift and go to state 49
    STDIN           shift and go to state 50
    DOUBLE          shift and go to state 51

    expression                     shift and go to state 70

state 42

    (27) expression -> LPAREN . expression RPAREN
    (14) expression -> . INT
    (15) expression -> . expression PLUS expression
    (16) expression -> . expression MINUS expression
    (17) expression -> . expression TIMES expression
    (18) expression -> . expression DIVIDE expression
    (19) expression -> . STRING
    (20) expression -> . TRUE
    (21) expression -> . FALSE
    (22) expression -> . expression AND expression
    (23) expression -> . expression OR expression
    (24) expression -> . NOT expression
    (25) expression -> . expression EQ expression
    (26) expression -> . expression NEQ expression
    (27) expression -> . LPAREN expression RPAREN
    (28) expression -> . ID
    (29) expression -> . expression DOT ID
    (31) expression -> . STDIN DOT READLINESYNC LPAREN RPAREN
    (55) expression -> . DOUBLE
    (56) expression -> . expression PLUS DOUBLE
    (57) expression -> . expression MINUS DOUBLE
    (58) expression -> . expression TIMES DOUBLE
    (59) expression -> . expression DIVIDE DOUBLE
    (60) expression -> . DOUBLE PLUS expression
    (61) expression -> . DOUBLE MINUS expression
    (62) expression -> . DOUBLE TIMES expression
    (63) expression -> . DOUBLE DIVIDE expression

    INT             shift and go to state 44
    STRING          shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    NOT             shift and go to state 48
    LPAREN          shift and go to state 42
    ID              shift and go to state 49
    STDIN           shift and go to state 50
    DOUBLE          shift and go to state 51

    expression                     shift and go to state 71

state 43

    (12) statement -> IF LPAREN expression . RPAREN LBRACE statement RBRACE
    (13) statement -> IF LPAREN expression . RPAREN LBRACE statement RBRACE ELSE LBRACE statement RBRACE
    (15) expression -> expression . PLUS expression
    (16) expression -> expression . MINUS expression
    (17) expression -> expression . TIMES expression
    (18) expression -> expression . DIVIDE expression
    (22) expression -> expression . AND expression
    (23) expression -> expression . OR expression
    (25) expression -> expression . EQ expression
    (26) expression -> expression . NEQ expression
    (29) expression -> expression . DOT ID
    (56) expression -> expression . PLUS DOUBLE
    (57) expression -> expression . MINUS DOUBLE
    (58) expression -> expression . TIMES DOUBLE
    (59) expression -> expression . DIVIDE DOUBLE

    RPAREN          shift and go to state 72
    PLUS            shift and go to state 73
    MINUS           shift and go to state 74
    TIMES           shift and go to state 75
    DIVIDE          shift and go to state 76
    AND             shift and go to state 77
    OR              shift and go to state 78
    EQ              shift and go to state 79
    NEQ             shift and go to state 80
    DOT             shift and go to state 81


state 44

    (14) expression -> INT .

    RPAREN          reduce using rule 14 (expression -> INT .)
    PLUS            reduce using rule 14 (expression -> INT .)
    MINUS           reduce using rule 14 (expression -> INT .)
    TIMES           reduce using rule 14 (expression -> INT .)
    DIVIDE          reduce using rule 14 (expression -> INT .)
    AND             reduce using rule 14 (expression -> INT .)
    OR              reduce using rule 14 (expression -> INT .)
    EQ              reduce using rule 14 (expression -> INT .)
    NEQ             reduce using rule 14 (expression -> INT .)
    DOT             reduce using rule 14 (expression -> INT .)
    SEMI            reduce using rule 14 (expression -> INT .)
    COMA            reduce using rule 14 (expression -> INT .)
    RBRACKET        reduce using rule 14 (expression -> INT .)
    RBRACE          reduce using rule 14 (expression -> INT .)
    COLON           reduce using rule 14 (expression -> INT .)


state 45

    (19) expression -> STRING .

    RPAREN          reduce using rule 19 (expression -> STRING .)
    PLUS            reduce using rule 19 (expression -> STRING .)
    MINUS           reduce using rule 19 (expression -> STRING .)
    TIMES           reduce using rule 19 (expression -> STRING .)
    DIVIDE          reduce using rule 19 (expression -> STRING .)
    AND             reduce using rule 19 (expression -> STRING .)
    OR              reduce using rule 19 (expression -> STRING .)
    EQ              reduce using rule 19 (expression -> STRING .)
    NEQ             reduce using rule 19 (expression -> STRING .)
    DOT             reduce using rule 19 (expression -> STRING .)
    SEMI            reduce using rule 19 (expression -> STRING .)
    COMA            reduce using rule 19 (expression -> STRING .)
    RBRACKET        reduce using rule 19 (expression -> STRING .)
    RBRACE          reduce using rule 19 (expression -> STRING .)
    COLON           reduce using rule 19 (expression -> STRING .)


state 46

    (20) expression -> TRUE .

    RPAREN          reduce using rule 20 (expression -> TRUE .)
    PLUS            reduce using rule 20 (expression -> TRUE .)
    MINUS           reduce using rule 20 (expression -> TRUE .)
    TIMES           reduce using rule 20 (expression -> TRUE .)
    DIVIDE          reduce using rule 20 (expression -> TRUE .)
    AND             reduce using rule 20 (expression -> TRUE .)
    OR              reduce using rule 20 (expression -> TRUE .)
    EQ              reduce using rule 20 (expression -> TRUE .)
    NEQ             reduce using rule 20 (expression -> TRUE .)
    DOT             reduce using rule 20 (expression -> TRUE .)
    SEMI            reduce using rule 20 (expression -> TRUE .)
    COMA            reduce using rule 20 (expression -> TRUE .)
    RBRACKET        reduce using rule 20 (expression -> TRUE .)
    RBRACE          reduce using rule 20 (expression -> TRUE .)
    COLON           reduce using rule 20 (expression -> TRUE .)


state 47

    (21) expression -> FALSE .

    RPAREN          reduce using rule 21 (expression -> FALSE .)
    PLUS            reduce using rule 21 (expression -> FALSE .)
    MINUS           reduce using rule 21 (expression -> FALSE .)
    TIMES           reduce using rule 21 (expression -> FALSE .)
    DIVIDE          reduce using rule 21 (expression -> FALSE .)
    AND             reduce using rule 21 (expression -> FALSE .)
    OR              reduce using rule 21 (expression -> FALSE .)
    EQ              reduce using rule 21 (expression -> FALSE .)
    NEQ             reduce using rule 21 (expression -> FALSE .)
    DOT             reduce using rule 21 (expression -> FALSE .)
    SEMI            reduce using rule 21 (expression -> FALSE .)
    COMA            reduce using rule 21 (expression -> FALSE .)
    RBRACKET        reduce using rule 21 (expression -> FALSE .)
    RBRACE          reduce using rule 21 (expression -> FALSE .)
    COLON           reduce using rule 21 (expression -> FALSE .)


state 48

    (24) expression -> NOT . expression
    (14) expression -> . INT
    (15) expression -> . expression PLUS expression
    (16) expression -> . expression MINUS expression
    (17) expression -> . expression TIMES expression
    (18) expression -> . expression DIVIDE expression
    (19) expression -> . STRING
    (20) expression -> . TRUE
    (21) expression -> . FALSE
    (22) expression -> . expression AND expression
    (23) expression -> . expression OR expression
    (24) expression -> . NOT expression
    (25) expression -> . expression EQ expression
    (26) expression -> . expression NEQ expression
    (27) expression -> . LPAREN expression RPAREN
    (28) expression -> . ID
    (29) expression -> . expression DOT ID
    (31) expression -> . STDIN DOT READLINESYNC LPAREN RPAREN
    (55) expression -> . DOUBLE
    (56) expression -> . expression PLUS DOUBLE
    (57) expression -> . expression MINUS DOUBLE
    (58) expression -> . expression TIMES DOUBLE
    (59) expression -> . expression DIVIDE DOUBLE
    (60) expression -> . DOUBLE PLUS expression
    (61) expression -> . DOUBLE MINUS expression
    (62) expression -> . DOUBLE TIMES expression
    (63) expression -> . DOUBLE DIVIDE expression

    INT             shift and go to state 44
    STRING          shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    NOT             shift and go to state 48
    LPAREN          shift and go to state 42
    ID              shift and go to state 49
    STDIN           shift and go to state 50
    DOUBLE          shift and go to state 51

    expression                     shift and go to state 82

state 49

    (28) expression -> ID .

    RPAREN          reduce using rule 28 (expression -> ID .)
    PLUS            reduce using rule 28 (expression -> ID .)
    MINUS           reduce using rule 28 (expression -> ID .)
    TIMES           reduce using rule 28 (expression -> ID .)
    DIVIDE          reduce using rule 28 (expression -> ID .)
    AND             reduce using rule 28 (expression -> ID .)
    OR              reduce using rule 28 (expression -> ID .)
    EQ              reduce using rule 28 (expression -> ID .)
    NEQ             reduce using rule 28 (expression -> ID .)
    DOT             reduce using rule 28 (expression -> ID .)
    SEMI            reduce using rule 28 (expression -> ID .)
    COMA            reduce using rule 28 (expression -> ID .)
    RBRACKET        reduce using rule 28 (expression -> ID .)
    RBRACE          reduce using rule 28 (expression -> ID .)
    COLON           reduce using rule 28 (expression -> ID .)


state 50

    (31) expression -> STDIN . DOT READLINESYNC LPAREN RPAREN

    DOT             shift and go to state 83


state 51

    (55) expression -> DOUBLE .
    (60) expression -> DOUBLE . PLUS expression
    (61) expression -> DOUBLE . MINUS expression
    (62) expression -> DOUBLE . TIMES expression
    (63) expression -> DOUBLE . DIVIDE expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
    RPAREN          reduce using rule 55 (expression -> DOUBLE .)
    AND             reduce using rule 55 (expression -> DOUBLE .)
    OR              reduce using rule 55 (expression -> DOUBLE .)
    EQ              reduce using rule 55 (expression -> DOUBLE .)
    NEQ             reduce using rule 55 (expression -> DOUBLE .)
    DOT             reduce using rule 55 (expression -> DOUBLE .)
    SEMI            reduce using rule 55 (expression -> DOUBLE .)
    COMA            reduce using rule 55 (expression -> DOUBLE .)
    RBRACKET        reduce using rule 55 (expression -> DOUBLE .)
    RBRACE          reduce using rule 55 (expression -> DOUBLE .)
    COLON           reduce using rule 55 (expression -> DOUBLE .)
    PLUS            shift and go to state 84
    MINUS           shift and go to state 85
    TIMES           shift and go to state 86
    DIVIDE          shift and go to state 87

  ! PLUS            [ reduce using rule 55 (expression -> DOUBLE .) ]
  ! MINUS           [ reduce using rule 55 (expression -> DOUBLE .) ]
  ! TIMES           [ reduce using rule 55 (expression -> DOUBLE .) ]
  ! DIVIDE          [ reduce using rule 55 (expression -> DOUBLE .) ]


state 52

    (30) statement -> PRINT LPAREN expression . RPAREN SEMI
    (15) expression -> expression . PLUS expression
    (16) expression -> expression . MINUS expression
    (17) expression -> expression . TIMES expression
    (18) expression -> expression . DIVIDE expression
    (22) expression -> expression . AND expression
    (23) expression -> expression . OR expression
    (25) expression -> expression . EQ expression
    (26) expression -> expression . NEQ expression
    (29) expression -> expression . DOT ID
    (56) expression -> expression . PLUS DOUBLE
    (57) expression -> expression . MINUS DOUBLE
    (58) expression -> expression . TIMES DOUBLE
    (59) expression -> expression . DIVIDE DOUBLE

    RPAREN          shift and go to state 88
    PLUS            shift and go to state 73
    MINUS           shift and go to state 74
    TIMES           shift and go to state 75
    DIVIDE          shift and go to state 76
    AND             shift and go to state 77
    OR              shift and go to state 78
    EQ              shift and go to state 79
    NEQ             shift and go to state 80
    DOT             shift and go to state 81


state 53

    (32) statement -> LIST LT type . GT ID ASSIGN LBRACKET RBRACKET SEMI
    (33) statement -> LIST LT type . GT ID ASSIGN LBRACKET group RBRACKET SEMI

    GT              shift and go to state 89


state 54

    (6) type -> ID .

    GT              reduce using rule 6 (type -> ID .)
    COMA            reduce using rule 6 (type -> ID .)
    ID              reduce using rule 6 (type -> ID .)


state 55

    (34) statement -> LIST ID ASSIGN . LBRACKET group RBRACKET SEMI

    LBRACKET        shift and go to state 90


state 56

    (37) statement -> WHILE LPAREN expression . RPAREN LBRACE statement RBRACE
    (15) expression -> expression . PLUS expression
    (16) expression -> expression . MINUS expression
    (17) expression -> expression . TIMES expression
    (18) expression -> expression . DIVIDE expression
    (22) expression -> expression . AND expression
    (23) expression -> expression . OR expression
    (25) expression -> expression . EQ expression
    (26) expression -> expression . NEQ expression
    (29) expression -> expression . DOT ID
    (56) expression -> expression . PLUS DOUBLE
    (57) expression -> expression . MINUS DOUBLE
    (58) expression -> expression . TIMES DOUBLE
    (59) expression -> expression . DIVIDE DOUBLE

    RPAREN          shift and go to state 91
    PLUS            shift and go to state 73
    MINUS           shift and go to state 74
    TIMES           shift and go to state 75
    DIVIDE          shift and go to state 76
    AND             shift and go to state 77
    OR              shift and go to state 78
    EQ              shift and go to state 79
    NEQ             shift and go to state 80
    DOT             shift and go to state 81


state 57

    (38) statement -> FOR LPAREN for_init . SEMI expression SEMI for_update RPAREN LBRACE statement RBRACE

    SEMI            shift and go to state 92


state 58

    (42) for_init -> expression .
    (15) expression -> expression . PLUS expression
    (16) expression -> expression . MINUS expression
    (17) expression -> expression . TIMES expression
    (18) expression -> expression . DIVIDE expression
    (22) expression -> expression . AND expression
    (23) expression -> expression . OR expression
    (25) expression -> expression . EQ expression
    (26) expression -> expression . NEQ expression
    (29) expression -> expression . DOT ID
    (56) expression -> expression . PLUS DOUBLE
    (57) expression -> expression . MINUS DOUBLE
    (58) expression -> expression . TIMES DOUBLE
    (59) expression -> expression . DIVIDE DOUBLE

    SEMI            reduce using rule 42 (for_init -> expression .)
    PLUS            shift and go to state 73
    MINUS           shift and go to state 74
    TIMES           shift and go to state 75
    DIVIDE          shift and go to state 76
    AND             shift and go to state 77
    OR              shift and go to state 78
    EQ              shift and go to state 79
    NEQ             shift and go to state 80
    DOT             shift and go to state 81


state 59

    (39) statement -> FOR LPAREN VAR . ID IN expression RPAREN LBRACE statement RBRACE
    (40) for_init -> VAR . ID ASSIGN expression

    ID              shift and go to state 93


state 60

    (6) type -> ID .
    (28) expression -> ID .

    ID              reduce using rule 6 (type -> ID .)
    PLUS            reduce using rule 28 (expression -> ID .)
    MINUS           reduce using rule 28 (expression -> ID .)
    TIMES           reduce using rule 28 (expression -> ID .)
    DIVIDE          reduce using rule 28 (expression -> ID .)
    AND             reduce using rule 28 (expression -> ID .)
    OR              reduce using rule 28 (expression -> ID .)
    EQ              reduce using rule 28 (expression -> ID .)
    NEQ             reduce using rule 28 (expression -> ID .)
    DOT             reduce using rule 28 (expression -> ID .)
    SEMI            reduce using rule 28 (expression -> ID .)


state 61

    (41) for_init -> type . ID ASSIGN expression

    ID              shift and go to state 94


state 62

    (46) statement -> MAP LT type . COMA type GT ID ASSIGN LBRACE map_entries RBRACE SEMI
    (47) statement -> MAP LT type . COMA type GT ID ASSIGN LBRACE RBRACE SEMI

    COMA            shift and go to state 95


state 63

    (51) statement -> SET LT type . GT ID ASSIGN LBRACE set_elements RBRACE SEMI
    (52) statement -> SET LT type . GT ID ASSIGN LBRACE RBRACE SEMI

    GT              shift and go to state 96


state 64

    (67) statement -> VOID ID LPAREN . param_list RPAREN LBRACE statement RBRACE
    (68) statement -> VOID ID LPAREN . RPAREN LBRACE statement RBRACE
    (69) param_list -> . param COMA param_list
    (70) param_list -> . param
    (71) param -> . type ID
    (2) type -> . INT_TYPE
    (3) type -> . STRING_TYPE
    (4) type -> . BOOL_TYPE
    (5) type -> . DOUBLE_TYPE
    (6) type -> . ID

    RPAREN          shift and go to state 98
    INT_TYPE        shift and go to state 18
    STRING_TYPE     shift and go to state 19
    BOOL_TYPE       shift and go to state 20
    DOUBLE_TYPE     shift and go to state 21
    ID              shift and go to state 54

    param_list                     shift and go to state 97
    param                          shift and go to state 99
    type                           shift and go to state 100

state 65

    (1) statement -> CLASS ID LBRACE class_body . RBRACE

    RBRACE          shift and go to state 101


state 66

    (65) class_body -> statement .
    (66) class_body -> statement . class_body
    (64) class_body -> .
    (65) class_body -> . statement
    (66) class_body -> . statement class_body
    (1) statement -> . CLASS ID LBRACE class_body RBRACE
    (7) statement -> . type ID ASSIGN expression SEMI
    (8) statement -> . VAR ID ASSIGN expression SEMI
    (9) statement -> . FINAL ID ASSIGN expression SEMI
    (10) statement -> . NEWLINE
    (11) statement -> . ID ID ASSIGN NEW ID LPAREN RPAREN SEMI
    (12) statement -> . IF LPAREN expression RPAREN LBRACE statement RBRACE
    (13) statement -> . IF LPAREN expression RPAREN LBRACE statement RBRACE ELSE LBRACE statement RBRACE
    (30) statement -> . PRINT LPAREN expression RPAREN SEMI
    (32) statement -> . LIST LT type GT ID ASSIGN LBRACKET RBRACKET SEMI
    (33) statement -> . LIST LT type GT ID ASSIGN LBRACKET group RBRACKET SEMI
    (34) statement -> . LIST ID ASSIGN LBRACKET group RBRACKET SEMI
    (37) statement -> . WHILE LPAREN expression RPAREN LBRACE statement RBRACE
    (38) statement -> . FOR LPAREN for_init SEMI expression SEMI for_update RPAREN LBRACE statement RBRACE
    (39) statement -> . FOR LPAREN VAR ID IN expression RPAREN LBRACE statement RBRACE
    (46) statement -> . MAP LT type COMA type GT ID ASSIGN LBRACE map_entries RBRACE SEMI
    (47) statement -> . MAP LT type COMA type GT ID ASSIGN LBRACE RBRACE SEMI
    (51) statement -> . SET LT type GT ID ASSIGN LBRACE set_elements RBRACE SEMI
    (52) statement -> . SET LT type GT ID ASSIGN LBRACE RBRACE SEMI
    (67) statement -> . VOID ID LPAREN param_list RPAREN LBRACE statement RBRACE
    (68) statement -> . VOID ID LPAREN RPAREN LBRACE statement RBRACE
    (2) type -> . INT_TYPE
    (3) type -> . STRING_TYPE
    (4) type -> . BOOL_TYPE
    (5) type -> . DOUBLE_TYPE
    (6) type -> . ID

  ! reduce/reduce conflict for RBRACE resolved using rule 64 (class_body -> .)
    RBRACE          reduce using rule 64 (class_body -> .)
    CLASS           shift and go to state 4
    VAR             shift and go to state 7
    FINAL           shift and go to state 8
    NEWLINE         shift and go to state 9
    ID              shift and go to state 5
    IF              shift and go to state 10
    PRINT           shift and go to state 11
    LIST            shift and go to state 12
    WHILE           shift and go to state 13
    FOR             shift and go to state 14
    MAP             shift and go to state 15
    SET             shift and go to state 16
    VOID            shift and go to state 17
    INT_TYPE        shift and go to state 18
    STRING_TYPE     shift and go to state 19
    BOOL_TYPE       shift and go to state 20
    DOUBLE_TYPE     shift and go to state 21

  ! RBRACE          [ reduce using rule 65 (class_body -> statement .) ]

    statement                      shift and go to state 66
    class_body                     shift and go to state 102
    type                           shift and go to state 6

state 67

    (11) statement -> ID ID ASSIGN NEW . ID LPAREN RPAREN SEMI

    ID              shift and go to state 103


state 68

    (7) statement -> type ID ASSIGN expression . SEMI
    (15) expression -> expression . PLUS expression
    (16) expression -> expression . MINUS expression
    (17) expression -> expression . TIMES expression
    (18) expression -> expression . DIVIDE expression
    (22) expression -> expression . AND expression
    (23) expression -> expression . OR expression
    (25) expression -> expression . EQ expression
    (26) expression -> expression . NEQ expression
    (29) expression -> expression . DOT ID
    (56) expression -> expression . PLUS DOUBLE
    (57) expression -> expression . MINUS DOUBLE
    (58) expression -> expression . TIMES DOUBLE
    (59) expression -> expression . DIVIDE DOUBLE

    SEMI            shift and go to state 104
    PLUS            shift and go to state 73
    MINUS           shift and go to state 74
    TIMES           shift and go to state 75
    DIVIDE          shift and go to state 76
    AND             shift and go to state 77
    OR              shift and go to state 78
    EQ              shift and go to state 79
    NEQ             shift and go to state 80
    DOT             shift and go to state 81


state 69

    (8) statement -> VAR ID ASSIGN expression . SEMI
    (15) expression -> expression . PLUS expression
    (16) expression -> expression . MINUS expression
    (17) expression -> expression . TIMES expression
    (18) expression -> expression . DIVIDE expression
    (22) expression -> expression . AND expression
    (23) expression -> expression . OR expression
    (25) expression -> expression . EQ expression
    (26) expression -> expression . NEQ expression
    (29) expression -> expression . DOT ID
    (56) expression -> expression . PLUS DOUBLE
    (57) expression -> expression . MINUS DOUBLE
    (58) expression -> expression . TIMES DOUBLE
    (59) expression -> expression . DIVIDE DOUBLE

    SEMI            shift and go to state 105
    PLUS            shift and go to state 73
    MINUS           shift and go to state 74
    TIMES           shift and go to state 75
    DIVIDE          shift and go to state 76
    AND             shift and go to state 77
    OR              shift and go to state 78
    EQ              shift and go to state 79
    NEQ             shift and go to state 80
    DOT             shift and go to state 81


state 70

    (9) statement -> FINAL ID ASSIGN expression . SEMI
    (15) expression -> expression . PLUS expression
    (16) expression -> expression . MINUS expression
    (17) expression -> expression . TIMES expression
    (18) expression -> expression . DIVIDE expression
    (22) expression -> expression . AND expression
    (23) expression -> expression . OR expression
    (25) expression -> expression . EQ expression
    (26) expression -> expression . NEQ expression
    (29) expression -> expression . DOT ID
    (56) expression -> expression . PLUS DOUBLE
    (57) expression -> expression . MINUS DOUBLE
    (58) expression -> expression . TIMES DOUBLE
    (59) expression -> expression . DIVIDE DOUBLE

    SEMI            shift and go to state 106
    PLUS            shift and go to state 73
    MINUS           shift and go to state 74
    TIMES           shift and go to state 75
    DIVIDE          shift and go to state 76
    AND             shift and go to state 77
    OR              shift and go to state 78
    EQ              shift and go to state 79
    NEQ             shift and go to state 80
    DOT             shift and go to state 81


state 71

    (27) expression -> LPAREN expression . RPAREN
    (15) expression -> expression . PLUS expression
    (16) expression -> expression . MINUS expression
    (17) expression -> expression . TIMES expression
    (18) expression -> expression . DIVIDE expression
    (22) expression -> expression . AND expression
    (23) expression -> expression . OR expression
    (25) expression -> expression . EQ expression
    (26) expression -> expression . NEQ expression
    (29) expression -> expression . DOT ID
    (56) expression -> expression . PLUS DOUBLE
    (57) expression -> expression . MINUS DOUBLE
    (58) expression -> expression . TIMES DOUBLE
    (59) expression -> expression . DIVIDE DOUBLE

    RPAREN          shift and go to state 107
    PLUS            shift and go to state 73
    MINUS           shift and go to state 74
    TIMES           shift and go to state 75
    DIVIDE          shift and go to state 76
    AND             shift and go to state 77
    OR              shift and go to state 78
    EQ              shift and go to state 79
    NEQ             shift and go to state 80
    DOT             shift and go to state 81


state 72

    (12) statement -> IF LPAREN expression RPAREN . LBRACE statement RBRACE
    (13) statement -> IF LPAREN expression RPAREN . LBRACE statement RBRACE ELSE LBRACE statement RBRACE

    LBRACE          shift and go to state 108


state 73

    (15) expression -> expression PLUS . expression
    (56) expression -> expression PLUS . DOUBLE
    (14) expression -> . INT
    (15) expression -> . expression PLUS expression
    (16) expression -> . expression MINUS expression
    (17) expression -> . expression TIMES expression
    (18) expression -> . expression DIVIDE expression
    (19) expression -> . STRING
    (20) expression -> . TRUE
    (21) expression -> . FALSE
    (22) expression -> . expression AND expression
    (23) expression -> . expression OR expression
    (24) expression -> . NOT expression
    (25) expression -> . expression EQ expression
    (26) expression -> . expression NEQ expression
    (27) expression -> . LPAREN expression RPAREN
    (28) expression -> . ID
    (29) expression -> . expression DOT ID
    (31) expression -> . STDIN DOT READLINESYNC LPAREN RPAREN
    (55) expression -> . DOUBLE
    (56) expression -> . expression PLUS DOUBLE
    (57) expression -> . expression MINUS DOUBLE
    (58) expression -> . expression TIMES DOUBLE
    (59) expression -> . expression DIVIDE DOUBLE
    (60) expression -> . DOUBLE PLUS expression
    (61) expression -> . DOUBLE MINUS expression
    (62) expression -> . DOUBLE TIMES expression
    (63) expression -> . DOUBLE DIVIDE expression

    DOUBLE          shift and go to state 110
    INT             shift and go to state 44
    STRING          shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    NOT             shift and go to state 48
    LPAREN          shift and go to state 42
    ID              shift and go to state 49
    STDIN           shift and go to state 50

    expression                     shift and go to state 109

state 74

    (16) expression -> expression MINUS . expression
    (57) expression -> expression MINUS . DOUBLE
    (14) expression -> . INT
    (15) expression -> . expression PLUS expression
    (16) expression -> . expression MINUS expression
    (17) expression -> . expression TIMES expression
    (18) expression -> . expression DIVIDE expression
    (19) expression -> . STRING
    (20) expression -> . TRUE
    (21) expression -> . FALSE
    (22) expression -> . expression AND expression
    (23) expression -> . expression OR expression
    (24) expression -> . NOT expression
    (25) expression -> . expression EQ expression
    (26) expression -> . expression NEQ expression
    (27) expression -> . LPAREN expression RPAREN
    (28) expression -> . ID
    (29) expression -> . expression DOT ID
    (31) expression -> . STDIN DOT READLINESYNC LPAREN RPAREN
    (55) expression -> . DOUBLE
    (56) expression -> . expression PLUS DOUBLE
    (57) expression -> . expression MINUS DOUBLE
    (58) expression -> . expression TIMES DOUBLE
    (59) expression -> . expression DIVIDE DOUBLE
    (60) expression -> . DOUBLE PLUS expression
    (61) expression -> . DOUBLE MINUS expression
    (62) expression -> . DOUBLE TIMES expression
    (63) expression -> . DOUBLE DIVIDE expression

    DOUBLE          shift and go to state 112
    INT             shift and go to state 44
    STRING          shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    NOT             shift and go to state 48
    LPAREN          shift and go to state 42
    ID              shift and go to state 49
    STDIN           shift and go to state 50

    expression                     shift and go to state 111

state 75

    (17) expression -> expression TIMES . expression
    (58) expression -> expression TIMES . DOUBLE
    (14) expression -> . INT
    (15) expression -> . expression PLUS expression
    (16) expression -> . expression MINUS expression
    (17) expression -> . expression TIMES expression
    (18) expression -> . expression DIVIDE expression
    (19) expression -> . STRING
    (20) expression -> . TRUE
    (21) expression -> . FALSE
    (22) expression -> . expression AND expression
    (23) expression -> . expression OR expression
    (24) expression -> . NOT expression
    (25) expression -> . expression EQ expression
    (26) expression -> . expression NEQ expression
    (27) expression -> . LPAREN expression RPAREN
    (28) expression -> . ID
    (29) expression -> . expression DOT ID
    (31) expression -> . STDIN DOT READLINESYNC LPAREN RPAREN
    (55) expression -> . DOUBLE
    (56) expression -> . expression PLUS DOUBLE
    (57) expression -> . expression MINUS DOUBLE
    (58) expression -> . expression TIMES DOUBLE
    (59) expression -> . expression DIVIDE DOUBLE
    (60) expression -> . DOUBLE PLUS expression
    (61) expression -> . DOUBLE MINUS expression
    (62) expression -> . DOUBLE TIMES expression
    (63) expression -> . DOUBLE DIVIDE expression

    DOUBLE          shift and go to state 114
    INT             shift and go to state 44
    STRING          shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    NOT             shift and go to state 48
    LPAREN          shift and go to state 42
    ID              shift and go to state 49
    STDIN           shift and go to state 50

    expression                     shift and go to state 113

state 76

    (18) expression -> expression DIVIDE . expression
    (59) expression -> expression DIVIDE . DOUBLE
    (14) expression -> . INT
    (15) expression -> . expression PLUS expression
    (16) expression -> . expression MINUS expression
    (17) expression -> . expression TIMES expression
    (18) expression -> . expression DIVIDE expression
    (19) expression -> . STRING
    (20) expression -> . TRUE
    (21) expression -> . FALSE
    (22) expression -> . expression AND expression
    (23) expression -> . expression OR expression
    (24) expression -> . NOT expression
    (25) expression -> . expression EQ expression
    (26) expression -> . expression NEQ expression
    (27) expression -> . LPAREN expression RPAREN
    (28) expression -> . ID
    (29) expression -> . expression DOT ID
    (31) expression -> . STDIN DOT READLINESYNC LPAREN RPAREN
    (55) expression -> . DOUBLE
    (56) expression -> . expression PLUS DOUBLE
    (57) expression -> . expression MINUS DOUBLE
    (58) expression -> . expression TIMES DOUBLE
    (59) expression -> . expression DIVIDE DOUBLE
    (60) expression -> . DOUBLE PLUS expression
    (61) expression -> . DOUBLE MINUS expression
    (62) expression -> . DOUBLE TIMES expression
    (63) expression -> . DOUBLE DIVIDE expression

    DOUBLE          shift and go to state 116
    INT             shift and go to state 44
    STRING          shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    NOT             shift and go to state 48
    LPAREN          shift and go to state 42
    ID              shift and go to state 49
    STDIN           shift and go to state 50

    expression                     shift and go to state 115

state 77

    (22) expression -> expression AND . expression
    (14) expression -> . INT
    (15) expression -> . expression PLUS expression
    (16) expression -> . expression MINUS expression
    (17) expression -> . expression TIMES expression
    (18) expression -> . expression DIVIDE expression
    (19) expression -> . STRING
    (20) expression -> . TRUE
    (21) expression -> . FALSE
    (22) expression -> . expression AND expression
    (23) expression -> . expression OR expression
    (24) expression -> . NOT expression
    (25) expression -> . expression EQ expression
    (26) expression -> . expression NEQ expression
    (27) expression -> . LPAREN expression RPAREN
    (28) expression -> . ID
    (29) expression -> . expression DOT ID
    (31) expression -> . STDIN DOT READLINESYNC LPAREN RPAREN
    (55) expression -> . DOUBLE
    (56) expression -> . expression PLUS DOUBLE
    (57) expression -> . expression MINUS DOUBLE
    (58) expression -> . expression TIMES DOUBLE
    (59) expression -> . expression DIVIDE DOUBLE
    (60) expression -> . DOUBLE PLUS expression
    (61) expression -> . DOUBLE MINUS expression
    (62) expression -> . DOUBLE TIMES expression
    (63) expression -> . DOUBLE DIVIDE expression

    INT             shift and go to state 44
    STRING          shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    NOT             shift and go to state 48
    LPAREN          shift and go to state 42
    ID              shift and go to state 49
    STDIN           shift and go to state 50
    DOUBLE          shift and go to state 51

    expression                     shift and go to state 117

state 78

    (23) expression -> expression OR . expression
    (14) expression -> . INT
    (15) expression -> . expression PLUS expression
    (16) expression -> . expression MINUS expression
    (17) expression -> . expression TIMES expression
    (18) expression -> . expression DIVIDE expression
    (19) expression -> . STRING
    (20) expression -> . TRUE
    (21) expression -> . FALSE
    (22) expression -> . expression AND expression
    (23) expression -> . expression OR expression
    (24) expression -> . NOT expression
    (25) expression -> . expression EQ expression
    (26) expression -> . expression NEQ expression
    (27) expression -> . LPAREN expression RPAREN
    (28) expression -> . ID
    (29) expression -> . expression DOT ID
    (31) expression -> . STDIN DOT READLINESYNC LPAREN RPAREN
    (55) expression -> . DOUBLE
    (56) expression -> . expression PLUS DOUBLE
    (57) expression -> . expression MINUS DOUBLE
    (58) expression -> . expression TIMES DOUBLE
    (59) expression -> . expression DIVIDE DOUBLE
    (60) expression -> . DOUBLE PLUS expression
    (61) expression -> . DOUBLE MINUS expression
    (62) expression -> . DOUBLE TIMES expression
    (63) expression -> . DOUBLE DIVIDE expression

    INT             shift and go to state 44
    STRING          shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    NOT             shift and go to state 48
    LPAREN          shift and go to state 42
    ID              shift and go to state 49
    STDIN           shift and go to state 50
    DOUBLE          shift and go to state 51

    expression                     shift and go to state 118

state 79

    (25) expression -> expression EQ . expression
    (14) expression -> . INT
    (15) expression -> . expression PLUS expression
    (16) expression -> . expression MINUS expression
    (17) expression -> . expression TIMES expression
    (18) expression -> . expression DIVIDE expression
    (19) expression -> . STRING
    (20) expression -> . TRUE
    (21) expression -> . FALSE
    (22) expression -> . expression AND expression
    (23) expression -> . expression OR expression
    (24) expression -> . NOT expression
    (25) expression -> . expression EQ expression
    (26) expression -> . expression NEQ expression
    (27) expression -> . LPAREN expression RPAREN
    (28) expression -> . ID
    (29) expression -> . expression DOT ID
    (31) expression -> . STDIN DOT READLINESYNC LPAREN RPAREN
    (55) expression -> . DOUBLE
    (56) expression -> . expression PLUS DOUBLE
    (57) expression -> . expression MINUS DOUBLE
    (58) expression -> . expression TIMES DOUBLE
    (59) expression -> . expression DIVIDE DOUBLE
    (60) expression -> . DOUBLE PLUS expression
    (61) expression -> . DOUBLE MINUS expression
    (62) expression -> . DOUBLE TIMES expression
    (63) expression -> . DOUBLE DIVIDE expression

    INT             shift and go to state 44
    STRING          shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    NOT             shift and go to state 48
    LPAREN          shift and go to state 42
    ID              shift and go to state 49
    STDIN           shift and go to state 50
    DOUBLE          shift and go to state 51

    expression                     shift and go to state 119

state 80

    (26) expression -> expression NEQ . expression
    (14) expression -> . INT
    (15) expression -> . expression PLUS expression
    (16) expression -> . expression MINUS expression
    (17) expression -> . expression TIMES expression
    (18) expression -> . expression DIVIDE expression
    (19) expression -> . STRING
    (20) expression -> . TRUE
    (21) expression -> . FALSE
    (22) expression -> . expression AND expression
    (23) expression -> . expression OR expression
    (24) expression -> . NOT expression
    (25) expression -> . expression EQ expression
    (26) expression -> . expression NEQ expression
    (27) expression -> . LPAREN expression RPAREN
    (28) expression -> . ID
    (29) expression -> . expression DOT ID
    (31) expression -> . STDIN DOT READLINESYNC LPAREN RPAREN
    (55) expression -> . DOUBLE
    (56) expression -> . expression PLUS DOUBLE
    (57) expression -> . expression MINUS DOUBLE
    (58) expression -> . expression TIMES DOUBLE
    (59) expression -> . expression DIVIDE DOUBLE
    (60) expression -> . DOUBLE PLUS expression
    (61) expression -> . DOUBLE MINUS expression
    (62) expression -> . DOUBLE TIMES expression
    (63) expression -> . DOUBLE DIVIDE expression

    INT             shift and go to state 44
    STRING          shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    NOT             shift and go to state 48
    LPAREN          shift and go to state 42
    ID              shift and go to state 49
    STDIN           shift and go to state 50
    DOUBLE          shift and go to state 51

    expression                     shift and go to state 120

state 81

    (29) expression -> expression DOT . ID

    ID              shift and go to state 121


state 82

    (24) expression -> NOT expression .
    (15) expression -> expression . PLUS expression
    (16) expression -> expression . MINUS expression
    (17) expression -> expression . TIMES expression
    (18) expression -> expression . DIVIDE expression
    (22) expression -> expression . AND expression
    (23) expression -> expression . OR expression
    (25) expression -> expression . EQ expression
    (26) expression -> expression . NEQ expression
    (29) expression -> expression . DOT ID
    (56) expression -> expression . PLUS DOUBLE
    (57) expression -> expression . MINUS DOUBLE
    (58) expression -> expression . TIMES DOUBLE
    (59) expression -> expression . DIVIDE DOUBLE

    RPAREN          reduce using rule 24 (expression -> NOT expression .)
    PLUS            reduce using rule 24 (expression -> NOT expression .)
    MINUS           reduce using rule 24 (expression -> NOT expression .)
    TIMES           reduce using rule 24 (expression -> NOT expression .)
    DIVIDE          reduce using rule 24 (expression -> NOT expression .)
    AND             reduce using rule 24 (expression -> NOT expression .)
    OR              reduce using rule 24 (expression -> NOT expression .)
    EQ              reduce using rule 24 (expression -> NOT expression .)
    NEQ             reduce using rule 24 (expression -> NOT expression .)
    DOT             reduce using rule 24 (expression -> NOT expression .)
    SEMI            reduce using rule 24 (expression -> NOT expression .)
    COMA            reduce using rule 24 (expression -> NOT expression .)
    RBRACKET        reduce using rule 24 (expression -> NOT expression .)
    RBRACE          reduce using rule 24 (expression -> NOT expression .)
    COLON           reduce using rule 24 (expression -> NOT expression .)

  ! PLUS            [ shift and go to state 73 ]
  ! MINUS           [ shift and go to state 74 ]
  ! TIMES           [ shift and go to state 75 ]
  ! DIVIDE          [ shift and go to state 76 ]
  ! AND             [ shift and go to state 77 ]
  ! OR              [ shift and go to state 78 ]
  ! EQ              [ shift and go to state 79 ]
  ! NEQ             [ shift and go to state 80 ]
  ! DOT             [ shift and go to state 81 ]


state 83

    (31) expression -> STDIN DOT . READLINESYNC LPAREN RPAREN

    READLINESYNC    shift and go to state 122


state 84

    (60) expression -> DOUBLE PLUS . expression
    (14) expression -> . INT
    (15) expression -> . expression PLUS expression
    (16) expression -> . expression MINUS expression
    (17) expression -> . expression TIMES expression
    (18) expression -> . expression DIVIDE expression
    (19) expression -> . STRING
    (20) expression -> . TRUE
    (21) expression -> . FALSE
    (22) expression -> . expression AND expression
    (23) expression -> . expression OR expression
    (24) expression -> . NOT expression
    (25) expression -> . expression EQ expression
    (26) expression -> . expression NEQ expression
    (27) expression -> . LPAREN expression RPAREN
    (28) expression -> . ID
    (29) expression -> . expression DOT ID
    (31) expression -> . STDIN DOT READLINESYNC LPAREN RPAREN
    (55) expression -> . DOUBLE
    (56) expression -> . expression PLUS DOUBLE
    (57) expression -> . expression MINUS DOUBLE
    (58) expression -> . expression TIMES DOUBLE
    (59) expression -> . expression DIVIDE DOUBLE
    (60) expression -> . DOUBLE PLUS expression
    (61) expression -> . DOUBLE MINUS expression
    (62) expression -> . DOUBLE TIMES expression
    (63) expression -> . DOUBLE DIVIDE expression

    INT             shift and go to state 44
    STRING          shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    NOT             shift and go to state 48
    LPAREN          shift and go to state 42
    ID              shift and go to state 49
    STDIN           shift and go to state 50
    DOUBLE          shift and go to state 51

    expression                     shift and go to state 123

state 85

    (61) expression -> DOUBLE MINUS . expression
    (14) expression -> . INT
    (15) expression -> . expression PLUS expression
    (16) expression -> . expression MINUS expression
    (17) expression -> . expression TIMES expression
    (18) expression -> . expression DIVIDE expression
    (19) expression -> . STRING
    (20) expression -> . TRUE
    (21) expression -> . FALSE
    (22) expression -> . expression AND expression
    (23) expression -> . expression OR expression
    (24) expression -> . NOT expression
    (25) expression -> . expression EQ expression
    (26) expression -> . expression NEQ expression
    (27) expression -> . LPAREN expression RPAREN
    (28) expression -> . ID
    (29) expression -> . expression DOT ID
    (31) expression -> . STDIN DOT READLINESYNC LPAREN RPAREN
    (55) expression -> . DOUBLE
    (56) expression -> . expression PLUS DOUBLE
    (57) expression -> . expression MINUS DOUBLE
    (58) expression -> . expression TIMES DOUBLE
    (59) expression -> . expression DIVIDE DOUBLE
    (60) expression -> . DOUBLE PLUS expression
    (61) expression -> . DOUBLE MINUS expression
    (62) expression -> . DOUBLE TIMES expression
    (63) expression -> . DOUBLE DIVIDE expression

    INT             shift and go to state 44
    STRING          shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    NOT             shift and go to state 48
    LPAREN          shift and go to state 42
    ID              shift and go to state 49
    STDIN           shift and go to state 50
    DOUBLE          shift and go to state 51

    expression                     shift and go to state 124

state 86

    (62) expression -> DOUBLE TIMES . expression
    (14) expression -> . INT
    (15) expression -> . expression PLUS expression
    (16) expression -> . expression MINUS expression
    (17) expression -> . expression TIMES expression
    (18) expression -> . expression DIVIDE expression
    (19) expression -> . STRING
    (20) expression -> . TRUE
    (21) expression -> . FALSE
    (22) expression -> . expression AND expression
    (23) expression -> . expression OR expression
    (24) expression -> . NOT expression
    (25) expression -> . expression EQ expression
    (26) expression -> . expression NEQ expression
    (27) expression -> . LPAREN expression RPAREN
    (28) expression -> . ID
    (29) expression -> . expression DOT ID
    (31) expression -> . STDIN DOT READLINESYNC LPAREN RPAREN
    (55) expression -> . DOUBLE
    (56) expression -> . expression PLUS DOUBLE
    (57) expression -> . expression MINUS DOUBLE
    (58) expression -> . expression TIMES DOUBLE
    (59) expression -> . expression DIVIDE DOUBLE
    (60) expression -> . DOUBLE PLUS expression
    (61) expression -> . DOUBLE MINUS expression
    (62) expression -> . DOUBLE TIMES expression
    (63) expression -> . DOUBLE DIVIDE expression

    INT             shift and go to state 44
    STRING          shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    NOT             shift and go to state 48
    LPAREN          shift and go to state 42
    ID              shift and go to state 49
    STDIN           shift and go to state 50
    DOUBLE          shift and go to state 51

    expression                     shift and go to state 125

state 87

    (63) expression -> DOUBLE DIVIDE . expression
    (14) expression -> . INT
    (15) expression -> . expression PLUS expression
    (16) expression -> . expression MINUS expression
    (17) expression -> . expression TIMES expression
    (18) expression -> . expression DIVIDE expression
    (19) expression -> . STRING
    (20) expression -> . TRUE
    (21) expression -> . FALSE
    (22) expression -> . expression AND expression
    (23) expression -> . expression OR expression
    (24) expression -> . NOT expression
    (25) expression -> . expression EQ expression
    (26) expression -> . expression NEQ expression
    (27) expression -> . LPAREN expression RPAREN
    (28) expression -> . ID
    (29) expression -> . expression DOT ID
    (31) expression -> . STDIN DOT READLINESYNC LPAREN RPAREN
    (55) expression -> . DOUBLE
    (56) expression -> . expression PLUS DOUBLE
    (57) expression -> . expression MINUS DOUBLE
    (58) expression -> . expression TIMES DOUBLE
    (59) expression -> . expression DIVIDE DOUBLE
    (60) expression -> . DOUBLE PLUS expression
    (61) expression -> . DOUBLE MINUS expression
    (62) expression -> . DOUBLE TIMES expression
    (63) expression -> . DOUBLE DIVIDE expression

    INT             shift and go to state 44
    STRING          shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    NOT             shift and go to state 48
    LPAREN          shift and go to state 42
    ID              shift and go to state 49
    STDIN           shift and go to state 50
    DOUBLE          shift and go to state 51

    expression                     shift and go to state 126

state 88

    (30) statement -> PRINT LPAREN expression RPAREN . SEMI

    SEMI            shift and go to state 127


state 89

    (32) statement -> LIST LT type GT . ID ASSIGN LBRACKET RBRACKET SEMI
    (33) statement -> LIST LT type GT . ID ASSIGN LBRACKET group RBRACKET SEMI

    ID              shift and go to state 128


state 90

    (34) statement -> LIST ID ASSIGN LBRACKET . group RBRACKET SEMI
    (35) group -> . expression COMA group
    (36) group -> . expression
    (14) expression -> . INT
    (15) expression -> . expression PLUS expression
    (16) expression -> . expression MINUS expression
    (17) expression -> . expression TIMES expression
    (18) expression -> . expression DIVIDE expression
    (19) expression -> . STRING
    (20) expression -> . TRUE
    (21) expression -> . FALSE
    (22) expression -> . expression AND expression
    (23) expression -> . expression OR expression
    (24) expression -> . NOT expression
    (25) expression -> . expression EQ expression
    (26) expression -> . expression NEQ expression
    (27) expression -> . LPAREN expression RPAREN
    (28) expression -> . ID
    (29) expression -> . expression DOT ID
    (31) expression -> . STDIN DOT READLINESYNC LPAREN RPAREN
    (55) expression -> . DOUBLE
    (56) expression -> . expression PLUS DOUBLE
    (57) expression -> . expression MINUS DOUBLE
    (58) expression -> . expression TIMES DOUBLE
    (59) expression -> . expression DIVIDE DOUBLE
    (60) expression -> . DOUBLE PLUS expression
    (61) expression -> . DOUBLE MINUS expression
    (62) expression -> . DOUBLE TIMES expression
    (63) expression -> . DOUBLE DIVIDE expression

    INT             shift and go to state 44
    STRING          shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    NOT             shift and go to state 48
    LPAREN          shift and go to state 42
    ID              shift and go to state 49
    STDIN           shift and go to state 50
    DOUBLE          shift and go to state 51

    group                          shift and go to state 129
    expression                     shift and go to state 130

state 91

    (37) statement -> WHILE LPAREN expression RPAREN . LBRACE statement RBRACE

    LBRACE          shift and go to state 131


state 92

    (38) statement -> FOR LPAREN for_init SEMI . expression SEMI for_update RPAREN LBRACE statement RBRACE
    (14) expression -> . INT
    (15) expression -> . expression PLUS expression
    (16) expression -> . expression MINUS expression
    (17) expression -> . expression TIMES expression
    (18) expression -> . expression DIVIDE expression
    (19) expression -> . STRING
    (20) expression -> . TRUE
    (21) expression -> . FALSE
    (22) expression -> . expression AND expression
    (23) expression -> . expression OR expression
    (24) expression -> . NOT expression
    (25) expression -> . expression EQ expression
    (26) expression -> . expression NEQ expression
    (27) expression -> . LPAREN expression RPAREN
    (28) expression -> . ID
    (29) expression -> . expression DOT ID
    (31) expression -> . STDIN DOT READLINESYNC LPAREN RPAREN
    (55) expression -> . DOUBLE
    (56) expression -> . expression PLUS DOUBLE
    (57) expression -> . expression MINUS DOUBLE
    (58) expression -> . expression TIMES DOUBLE
    (59) expression -> . expression DIVIDE DOUBLE
    (60) expression -> . DOUBLE PLUS expression
    (61) expression -> . DOUBLE MINUS expression
    (62) expression -> . DOUBLE TIMES expression
    (63) expression -> . DOUBLE DIVIDE expression

    INT             shift and go to state 44
    STRING          shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    NOT             shift and go to state 48
    LPAREN          shift and go to state 42
    ID              shift and go to state 49
    STDIN           shift and go to state 50
    DOUBLE          shift and go to state 51

    expression                     shift and go to state 132

state 93

    (39) statement -> FOR LPAREN VAR ID . IN expression RPAREN LBRACE statement RBRACE
    (40) for_init -> VAR ID . ASSIGN expression

    IN              shift and go to state 133
    ASSIGN          shift and go to state 134


state 94

    (41) for_init -> type ID . ASSIGN expression

    ASSIGN          shift and go to state 135


state 95

    (46) statement -> MAP LT type COMA . type GT ID ASSIGN LBRACE map_entries RBRACE SEMI
    (47) statement -> MAP LT type COMA . type GT ID ASSIGN LBRACE RBRACE SEMI
    (2) type -> . INT_TYPE
    (3) type -> . STRING_TYPE
    (4) type -> . BOOL_TYPE
    (5) type -> . DOUBLE_TYPE
    (6) type -> . ID

    INT_TYPE        shift and go to state 18
    STRING_TYPE     shift and go to state 19
    BOOL_TYPE       shift and go to state 20
    DOUBLE_TYPE     shift and go to state 21
    ID              shift and go to state 54

    type                           shift and go to state 136

state 96

    (51) statement -> SET LT type GT . ID ASSIGN LBRACE set_elements RBRACE SEMI
    (52) statement -> SET LT type GT . ID ASSIGN LBRACE RBRACE SEMI

    ID              shift and go to state 137


state 97

    (67) statement -> VOID ID LPAREN param_list . RPAREN LBRACE statement RBRACE

    RPAREN          shift and go to state 138


state 98

    (68) statement -> VOID ID LPAREN RPAREN . LBRACE statement RBRACE

    LBRACE          shift and go to state 139


state 99

    (69) param_list -> param . COMA param_list
    (70) param_list -> param .

    COMA            shift and go to state 140
    RPAREN          reduce using rule 70 (param_list -> param .)


state 100

    (71) param -> type . ID

    ID              shift and go to state 141


state 101

    (1) statement -> CLASS ID LBRACE class_body RBRACE .

    CLASS           reduce using rule 1 (statement -> CLASS ID LBRACE class_body RBRACE .)
    VAR             reduce using rule 1 (statement -> CLASS ID LBRACE class_body RBRACE .)
    FINAL           reduce using rule 1 (statement -> CLASS ID LBRACE class_body RBRACE .)
    NEWLINE         reduce using rule 1 (statement -> CLASS ID LBRACE class_body RBRACE .)
    ID              reduce using rule 1 (statement -> CLASS ID LBRACE class_body RBRACE .)
    IF              reduce using rule 1 (statement -> CLASS ID LBRACE class_body RBRACE .)
    PRINT           reduce using rule 1 (statement -> CLASS ID LBRACE class_body RBRACE .)
    LIST            reduce using rule 1 (statement -> CLASS ID LBRACE class_body RBRACE .)
    WHILE           reduce using rule 1 (statement -> CLASS ID LBRACE class_body RBRACE .)
    FOR             reduce using rule 1 (statement -> CLASS ID LBRACE class_body RBRACE .)
    MAP             reduce using rule 1 (statement -> CLASS ID LBRACE class_body RBRACE .)
    SET             reduce using rule 1 (statement -> CLASS ID LBRACE class_body RBRACE .)
    VOID            reduce using rule 1 (statement -> CLASS ID LBRACE class_body RBRACE .)
    INT_TYPE        reduce using rule 1 (statement -> CLASS ID LBRACE class_body RBRACE .)
    STRING_TYPE     reduce using rule 1 (statement -> CLASS ID LBRACE class_body RBRACE .)
    BOOL_TYPE       reduce using rule 1 (statement -> CLASS ID LBRACE class_body RBRACE .)
    DOUBLE_TYPE     reduce using rule 1 (statement -> CLASS ID LBRACE class_body RBRACE .)
    $end            reduce using rule 1 (statement -> CLASS ID LBRACE class_body RBRACE .)
    RBRACE          reduce using rule 1 (statement -> CLASS ID LBRACE class_body RBRACE .)


state 102

    (66) class_body -> statement class_body .

    RBRACE          reduce using rule 66 (class_body -> statement class_body .)


state 103

    (11) statement -> ID ID ASSIGN NEW ID . LPAREN RPAREN SEMI

    LPAREN          shift and go to state 142


state 104

    (7) statement -> type ID ASSIGN expression SEMI .

    CLASS           reduce using rule 7 (statement -> type ID ASSIGN expression SEMI .)
    VAR             reduce using rule 7 (statement -> type ID ASSIGN expression SEMI .)
    FINAL           reduce using rule 7 (statement -> type ID ASSIGN expression SEMI .)
    NEWLINE         reduce using rule 7 (statement -> type ID ASSIGN expression SEMI .)
    ID              reduce using rule 7 (statement -> type ID ASSIGN expression SEMI .)
    IF              reduce using rule 7 (statement -> type ID ASSIGN expression SEMI .)
    PRINT           reduce using rule 7 (statement -> type ID ASSIGN expression SEMI .)
    LIST            reduce using rule 7 (statement -> type ID ASSIGN expression SEMI .)
    WHILE           reduce using rule 7 (statement -> type ID ASSIGN expression SEMI .)
    FOR             reduce using rule 7 (statement -> type ID ASSIGN expression SEMI .)
    MAP             reduce using rule 7 (statement -> type ID ASSIGN expression SEMI .)
    SET             reduce using rule 7 (statement -> type ID ASSIGN expression SEMI .)
    VOID            reduce using rule 7 (statement -> type ID ASSIGN expression SEMI .)
    INT_TYPE        reduce using rule 7 (statement -> type ID ASSIGN expression SEMI .)
    STRING_TYPE     reduce using rule 7 (statement -> type ID ASSIGN expression SEMI .)
    BOOL_TYPE       reduce using rule 7 (statement -> type ID ASSIGN expression SEMI .)
    DOUBLE_TYPE     reduce using rule 7 (statement -> type ID ASSIGN expression SEMI .)
    $end            reduce using rule 7 (statement -> type ID ASSIGN expression SEMI .)
    RBRACE          reduce using rule 7 (statement -> type ID ASSIGN expression SEMI .)


state 105

    (8) statement -> VAR ID ASSIGN expression SEMI .

    CLASS           reduce using rule 8 (statement -> VAR ID ASSIGN expression SEMI .)
    VAR             reduce using rule 8 (statement -> VAR ID ASSIGN expression SEMI .)
    FINAL           reduce using rule 8 (statement -> VAR ID ASSIGN expression SEMI .)
    NEWLINE         reduce using rule 8 (statement -> VAR ID ASSIGN expression SEMI .)
    ID              reduce using rule 8 (statement -> VAR ID ASSIGN expression SEMI .)
    IF              reduce using rule 8 (statement -> VAR ID ASSIGN expression SEMI .)
    PRINT           reduce using rule 8 (statement -> VAR ID ASSIGN expression SEMI .)
    LIST            reduce using rule 8 (statement -> VAR ID ASSIGN expression SEMI .)
    WHILE           reduce using rule 8 (statement -> VAR ID ASSIGN expression SEMI .)
    FOR             reduce using rule 8 (statement -> VAR ID ASSIGN expression SEMI .)
    MAP             reduce using rule 8 (statement -> VAR ID ASSIGN expression SEMI .)
    SET             reduce using rule 8 (statement -> VAR ID ASSIGN expression SEMI .)
    VOID            reduce using rule 8 (statement -> VAR ID ASSIGN expression SEMI .)
    INT_TYPE        reduce using rule 8 (statement -> VAR ID ASSIGN expression SEMI .)
    STRING_TYPE     reduce using rule 8 (statement -> VAR ID ASSIGN expression SEMI .)
    BOOL_TYPE       reduce using rule 8 (statement -> VAR ID ASSIGN expression SEMI .)
    DOUBLE_TYPE     reduce using rule 8 (statement -> VAR ID ASSIGN expression SEMI .)
    $end            reduce using rule 8 (statement -> VAR ID ASSIGN expression SEMI .)
    RBRACE          reduce using rule 8 (statement -> VAR ID ASSIGN expression SEMI .)


state 106

    (9) statement -> FINAL ID ASSIGN expression SEMI .

    CLASS           reduce using rule 9 (statement -> FINAL ID ASSIGN expression SEMI .)
    VAR             reduce using rule 9 (statement -> FINAL ID ASSIGN expression SEMI .)
    FINAL           reduce using rule 9 (statement -> FINAL ID ASSIGN expression SEMI .)
    NEWLINE         reduce using rule 9 (statement -> FINAL ID ASSIGN expression SEMI .)
    ID              reduce using rule 9 (statement -> FINAL ID ASSIGN expression SEMI .)
    IF              reduce using rule 9 (statement -> FINAL ID ASSIGN expression SEMI .)
    PRINT           reduce using rule 9 (statement -> FINAL ID ASSIGN expression SEMI .)
    LIST            reduce using rule 9 (statement -> FINAL ID ASSIGN expression SEMI .)
    WHILE           reduce using rule 9 (statement -> FINAL ID ASSIGN expression SEMI .)
    FOR             reduce using rule 9 (statement -> FINAL ID ASSIGN expression SEMI .)
    MAP             reduce using rule 9 (statement -> FINAL ID ASSIGN expression SEMI .)
    SET             reduce using rule 9 (statement -> FINAL ID ASSIGN expression SEMI .)
    VOID            reduce using rule 9 (statement -> FINAL ID ASSIGN expression SEMI .)
    INT_TYPE        reduce using rule 9 (statement -> FINAL ID ASSIGN expression SEMI .)
    STRING_TYPE     reduce using rule 9 (statement -> FINAL ID ASSIGN expression SEMI .)
    BOOL_TYPE       reduce using rule 9 (statement -> FINAL ID ASSIGN expression SEMI .)
    DOUBLE_TYPE     reduce using rule 9 (statement -> FINAL ID ASSIGN expression SEMI .)
    $end            reduce using rule 9 (statement -> FINAL ID ASSIGN expression SEMI .)
    RBRACE          reduce using rule 9 (statement -> FINAL ID ASSIGN expression SEMI .)


state 107

    (27) expression -> LPAREN expression RPAREN .

    RPAREN          reduce using rule 27 (expression -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 27 (expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 27 (expression -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 27 (expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 27 (expression -> LPAREN expression RPAREN .)
    AND             reduce using rule 27 (expression -> LPAREN expression RPAREN .)
    OR              reduce using rule 27 (expression -> LPAREN expression RPAREN .)
    EQ              reduce using rule 27 (expression -> LPAREN expression RPAREN .)
    NEQ             reduce using rule 27 (expression -> LPAREN expression RPAREN .)
    DOT             reduce using rule 27 (expression -> LPAREN expression RPAREN .)
    SEMI            reduce using rule 27 (expression -> LPAREN expression RPAREN .)
    COMA            reduce using rule 27 (expression -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 27 (expression -> LPAREN expression RPAREN .)
    RBRACE          reduce using rule 27 (expression -> LPAREN expression RPAREN .)
    COLON           reduce using rule 27 (expression -> LPAREN expression RPAREN .)


state 108

    (12) statement -> IF LPAREN expression RPAREN LBRACE . statement RBRACE
    (13) statement -> IF LPAREN expression RPAREN LBRACE . statement RBRACE ELSE LBRACE statement RBRACE
    (1) statement -> . CLASS ID LBRACE class_body RBRACE
    (7) statement -> . type ID ASSIGN expression SEMI
    (8) statement -> . VAR ID ASSIGN expression SEMI
    (9) statement -> . FINAL ID ASSIGN expression SEMI
    (10) statement -> . NEWLINE
    (11) statement -> . ID ID ASSIGN NEW ID LPAREN RPAREN SEMI
    (12) statement -> . IF LPAREN expression RPAREN LBRACE statement RBRACE
    (13) statement -> . IF LPAREN expression RPAREN LBRACE statement RBRACE ELSE LBRACE statement RBRACE
    (30) statement -> . PRINT LPAREN expression RPAREN SEMI
    (32) statement -> . LIST LT type GT ID ASSIGN LBRACKET RBRACKET SEMI
    (33) statement -> . LIST LT type GT ID ASSIGN LBRACKET group RBRACKET SEMI
    (34) statement -> . LIST ID ASSIGN LBRACKET group RBRACKET SEMI
    (37) statement -> . WHILE LPAREN expression RPAREN LBRACE statement RBRACE
    (38) statement -> . FOR LPAREN for_init SEMI expression SEMI for_update RPAREN LBRACE statement RBRACE
    (39) statement -> . FOR LPAREN VAR ID IN expression RPAREN LBRACE statement RBRACE
    (46) statement -> . MAP LT type COMA type GT ID ASSIGN LBRACE map_entries RBRACE SEMI
    (47) statement -> . MAP LT type COMA type GT ID ASSIGN LBRACE RBRACE SEMI
    (51) statement -> . SET LT type GT ID ASSIGN LBRACE set_elements RBRACE SEMI
    (52) statement -> . SET LT type GT ID ASSIGN LBRACE RBRACE SEMI
    (67) statement -> . VOID ID LPAREN param_list RPAREN LBRACE statement RBRACE
    (68) statement -> . VOID ID LPAREN RPAREN LBRACE statement RBRACE
    (2) type -> . INT_TYPE
    (3) type -> . STRING_TYPE
    (4) type -> . BOOL_TYPE
    (5) type -> . DOUBLE_TYPE
    (6) type -> . ID

    CLASS           shift and go to state 4
    VAR             shift and go to state 7
    FINAL           shift and go to state 8
    NEWLINE         shift and go to state 9
    ID              shift and go to state 5
    IF              shift and go to state 10
    PRINT           shift and go to state 11
    LIST            shift and go to state 12
    WHILE           shift and go to state 13
    FOR             shift and go to state 14
    MAP             shift and go to state 15
    SET             shift and go to state 16
    VOID            shift and go to state 17
    INT_TYPE        shift and go to state 18
    STRING_TYPE     shift and go to state 19
    BOOL_TYPE       shift and go to state 20
    DOUBLE_TYPE     shift and go to state 21

    statement                      shift and go to state 143
    type                           shift and go to state 6

state 109

    (15) expression -> expression PLUS expression .
    (15) expression -> expression . PLUS expression
    (16) expression -> expression . MINUS expression
    (17) expression -> expression . TIMES expression
    (18) expression -> expression . DIVIDE expression
    (22) expression -> expression . AND expression
    (23) expression -> expression . OR expression
    (25) expression -> expression . EQ expression
    (26) expression -> expression . NEQ expression
    (29) expression -> expression . DOT ID
    (56) expression -> expression . PLUS DOUBLE
    (57) expression -> expression . MINUS DOUBLE
    (58) expression -> expression . TIMES DOUBLE
    (59) expression -> expression . DIVIDE DOUBLE

    RPAREN          reduce using rule 15 (expression -> expression PLUS expression .)
    PLUS            reduce using rule 15 (expression -> expression PLUS expression .)
    MINUS           reduce using rule 15 (expression -> expression PLUS expression .)
    AND             reduce using rule 15 (expression -> expression PLUS expression .)
    OR              reduce using rule 15 (expression -> expression PLUS expression .)
    EQ              reduce using rule 15 (expression -> expression PLUS expression .)
    NEQ             reduce using rule 15 (expression -> expression PLUS expression .)
    DOT             reduce using rule 15 (expression -> expression PLUS expression .)
    SEMI            reduce using rule 15 (expression -> expression PLUS expression .)
    COMA            reduce using rule 15 (expression -> expression PLUS expression .)
    RBRACKET        reduce using rule 15 (expression -> expression PLUS expression .)
    RBRACE          reduce using rule 15 (expression -> expression PLUS expression .)
    COLON           reduce using rule 15 (expression -> expression PLUS expression .)
    TIMES           shift and go to state 75
    DIVIDE          shift and go to state 76

  ! TIMES           [ reduce using rule 15 (expression -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 15 (expression -> expression PLUS expression .) ]
  ! PLUS            [ shift and go to state 73 ]
  ! MINUS           [ shift and go to state 74 ]
  ! AND             [ shift and go to state 77 ]
  ! OR              [ shift and go to state 78 ]
  ! EQ              [ shift and go to state 79 ]
  ! NEQ             [ shift and go to state 80 ]
  ! DOT             [ shift and go to state 81 ]


state 110

    (56) expression -> expression PLUS DOUBLE .
    (55) expression -> DOUBLE .
    (60) expression -> DOUBLE . PLUS expression
    (61) expression -> DOUBLE . MINUS expression
    (62) expression -> DOUBLE . TIMES expression
    (63) expression -> DOUBLE . DIVIDE expression

  ! reduce/reduce conflict for PLUS resolved using rule 55 (expression -> DOUBLE .)
  ! reduce/reduce conflict for MINUS resolved using rule 55 (expression -> DOUBLE .)
  ! reduce/reduce conflict for TIMES resolved using rule 55 (expression -> DOUBLE .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 55 (expression -> DOUBLE .)
  ! reduce/reduce conflict for AND resolved using rule 55 (expression -> DOUBLE .)
  ! reduce/reduce conflict for OR resolved using rule 55 (expression -> DOUBLE .)
  ! reduce/reduce conflict for EQ resolved using rule 55 (expression -> DOUBLE .)
  ! reduce/reduce conflict for NEQ resolved using rule 55 (expression -> DOUBLE .)
  ! reduce/reduce conflict for DOT resolved using rule 55 (expression -> DOUBLE .)
  ! reduce/reduce conflict for RPAREN resolved using rule 55 (expression -> DOUBLE .)
  ! reduce/reduce conflict for SEMI resolved using rule 55 (expression -> DOUBLE .)
  ! reduce/reduce conflict for COMA resolved using rule 55 (expression -> DOUBLE .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 55 (expression -> DOUBLE .)
  ! reduce/reduce conflict for RBRACE resolved using rule 55 (expression -> DOUBLE .)
  ! reduce/reduce conflict for COLON resolved using rule 55 (expression -> DOUBLE .)
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
    AND             reduce using rule 55 (expression -> DOUBLE .)
    OR              reduce using rule 55 (expression -> DOUBLE .)
    EQ              reduce using rule 55 (expression -> DOUBLE .)
    NEQ             reduce using rule 55 (expression -> DOUBLE .)
    DOT             reduce using rule 55 (expression -> DOUBLE .)
    RPAREN          reduce using rule 55 (expression -> DOUBLE .)
    SEMI            reduce using rule 55 (expression -> DOUBLE .)
    COMA            reduce using rule 55 (expression -> DOUBLE .)
    RBRACKET        reduce using rule 55 (expression -> DOUBLE .)
    RBRACE          reduce using rule 55 (expression -> DOUBLE .)
    COLON           reduce using rule 55 (expression -> DOUBLE .)
    PLUS            shift and go to state 84
    MINUS           shift and go to state 85
    TIMES           shift and go to state 86
    DIVIDE          shift and go to state 87

  ! RPAREN          [ reduce using rule 56 (expression -> expression PLUS DOUBLE .) ]
  ! PLUS            [ reduce using rule 56 (expression -> expression PLUS DOUBLE .) ]
  ! MINUS           [ reduce using rule 56 (expression -> expression PLUS DOUBLE .) ]
  ! TIMES           [ reduce using rule 56 (expression -> expression PLUS DOUBLE .) ]
  ! DIVIDE          [ reduce using rule 56 (expression -> expression PLUS DOUBLE .) ]
  ! AND             [ reduce using rule 56 (expression -> expression PLUS DOUBLE .) ]
  ! OR              [ reduce using rule 56 (expression -> expression PLUS DOUBLE .) ]
  ! EQ              [ reduce using rule 56 (expression -> expression PLUS DOUBLE .) ]
  ! NEQ             [ reduce using rule 56 (expression -> expression PLUS DOUBLE .) ]
  ! DOT             [ reduce using rule 56 (expression -> expression PLUS DOUBLE .) ]
  ! SEMI            [ reduce using rule 56 (expression -> expression PLUS DOUBLE .) ]
  ! COMA            [ reduce using rule 56 (expression -> expression PLUS DOUBLE .) ]
  ! RBRACKET        [ reduce using rule 56 (expression -> expression PLUS DOUBLE .) ]
  ! RBRACE          [ reduce using rule 56 (expression -> expression PLUS DOUBLE .) ]
  ! COLON           [ reduce using rule 56 (expression -> expression PLUS DOUBLE .) ]
  ! PLUS            [ reduce using rule 55 (expression -> DOUBLE .) ]
  ! MINUS           [ reduce using rule 55 (expression -> DOUBLE .) ]
  ! TIMES           [ reduce using rule 55 (expression -> DOUBLE .) ]
  ! DIVIDE          [ reduce using rule 55 (expression -> DOUBLE .) ]


state 111

    (16) expression -> expression MINUS expression .
    (15) expression -> expression . PLUS expression
    (16) expression -> expression . MINUS expression
    (17) expression -> expression . TIMES expression
    (18) expression -> expression . DIVIDE expression
    (22) expression -> expression . AND expression
    (23) expression -> expression . OR expression
    (25) expression -> expression . EQ expression
    (26) expression -> expression . NEQ expression
    (29) expression -> expression . DOT ID
    (56) expression -> expression . PLUS DOUBLE
    (57) expression -> expression . MINUS DOUBLE
    (58) expression -> expression . TIMES DOUBLE
    (59) expression -> expression . DIVIDE DOUBLE

    RPAREN          reduce using rule 16 (expression -> expression MINUS expression .)
    PLUS            reduce using rule 16 (expression -> expression MINUS expression .)
    MINUS           reduce using rule 16 (expression -> expression MINUS expression .)
    AND             reduce using rule 16 (expression -> expression MINUS expression .)
    OR              reduce using rule 16 (expression -> expression MINUS expression .)
    EQ              reduce using rule 16 (expression -> expression MINUS expression .)
    NEQ             reduce using rule 16 (expression -> expression MINUS expression .)
    DOT             reduce using rule 16 (expression -> expression MINUS expression .)
    SEMI            reduce using rule 16 (expression -> expression MINUS expression .)
    COMA            reduce using rule 16 (expression -> expression MINUS expression .)
    RBRACKET        reduce using rule 16 (expression -> expression MINUS expression .)
    RBRACE          reduce using rule 16 (expression -> expression MINUS expression .)
    COLON           reduce using rule 16 (expression -> expression MINUS expression .)
    TIMES           shift and go to state 75
    DIVIDE          shift and go to state 76

  ! TIMES           [ reduce using rule 16 (expression -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 16 (expression -> expression MINUS expression .) ]
  ! PLUS            [ shift and go to state 73 ]
  ! MINUS           [ shift and go to state 74 ]
  ! AND             [ shift and go to state 77 ]
  ! OR              [ shift and go to state 78 ]
  ! EQ              [ shift and go to state 79 ]
  ! NEQ             [ shift and go to state 80 ]
  ! DOT             [ shift and go to state 81 ]


state 112

    (57) expression -> expression MINUS DOUBLE .
    (55) expression -> DOUBLE .
    (60) expression -> DOUBLE . PLUS expression
    (61) expression -> DOUBLE . MINUS expression
    (62) expression -> DOUBLE . TIMES expression
    (63) expression -> DOUBLE . DIVIDE expression

  ! reduce/reduce conflict for PLUS resolved using rule 55 (expression -> DOUBLE .)
  ! reduce/reduce conflict for MINUS resolved using rule 55 (expression -> DOUBLE .)
  ! reduce/reduce conflict for TIMES resolved using rule 55 (expression -> DOUBLE .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 55 (expression -> DOUBLE .)
  ! reduce/reduce conflict for AND resolved using rule 55 (expression -> DOUBLE .)
  ! reduce/reduce conflict for OR resolved using rule 55 (expression -> DOUBLE .)
  ! reduce/reduce conflict for EQ resolved using rule 55 (expression -> DOUBLE .)
  ! reduce/reduce conflict for NEQ resolved using rule 55 (expression -> DOUBLE .)
  ! reduce/reduce conflict for DOT resolved using rule 55 (expression -> DOUBLE .)
  ! reduce/reduce conflict for RPAREN resolved using rule 55 (expression -> DOUBLE .)
  ! reduce/reduce conflict for SEMI resolved using rule 55 (expression -> DOUBLE .)
  ! reduce/reduce conflict for COMA resolved using rule 55 (expression -> DOUBLE .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 55 (expression -> DOUBLE .)
  ! reduce/reduce conflict for RBRACE resolved using rule 55 (expression -> DOUBLE .)
  ! reduce/reduce conflict for COLON resolved using rule 55 (expression -> DOUBLE .)
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
    AND             reduce using rule 55 (expression -> DOUBLE .)
    OR              reduce using rule 55 (expression -> DOUBLE .)
    EQ              reduce using rule 55 (expression -> DOUBLE .)
    NEQ             reduce using rule 55 (expression -> DOUBLE .)
    DOT             reduce using rule 55 (expression -> DOUBLE .)
    RPAREN          reduce using rule 55 (expression -> DOUBLE .)
    SEMI            reduce using rule 55 (expression -> DOUBLE .)
    COMA            reduce using rule 55 (expression -> DOUBLE .)
    RBRACKET        reduce using rule 55 (expression -> DOUBLE .)
    RBRACE          reduce using rule 55 (expression -> DOUBLE .)
    COLON           reduce using rule 55 (expression -> DOUBLE .)
    PLUS            shift and go to state 84
    MINUS           shift and go to state 85
    TIMES           shift and go to state 86
    DIVIDE          shift and go to state 87

  ! RPAREN          [ reduce using rule 57 (expression -> expression MINUS DOUBLE .) ]
  ! PLUS            [ reduce using rule 57 (expression -> expression MINUS DOUBLE .) ]
  ! MINUS           [ reduce using rule 57 (expression -> expression MINUS DOUBLE .) ]
  ! TIMES           [ reduce using rule 57 (expression -> expression MINUS DOUBLE .) ]
  ! DIVIDE          [ reduce using rule 57 (expression -> expression MINUS DOUBLE .) ]
  ! AND             [ reduce using rule 57 (expression -> expression MINUS DOUBLE .) ]
  ! OR              [ reduce using rule 57 (expression -> expression MINUS DOUBLE .) ]
  ! EQ              [ reduce using rule 57 (expression -> expression MINUS DOUBLE .) ]
  ! NEQ             [ reduce using rule 57 (expression -> expression MINUS DOUBLE .) ]
  ! DOT             [ reduce using rule 57 (expression -> expression MINUS DOUBLE .) ]
  ! SEMI            [ reduce using rule 57 (expression -> expression MINUS DOUBLE .) ]
  ! COMA            [ reduce using rule 57 (expression -> expression MINUS DOUBLE .) ]
  ! RBRACKET        [ reduce using rule 57 (expression -> expression MINUS DOUBLE .) ]
  ! RBRACE          [ reduce using rule 57 (expression -> expression MINUS DOUBLE .) ]
  ! COLON           [ reduce using rule 57 (expression -> expression MINUS DOUBLE .) ]
  ! PLUS            [ reduce using rule 55 (expression -> DOUBLE .) ]
  ! MINUS           [ reduce using rule 55 (expression -> DOUBLE .) ]
  ! TIMES           [ reduce using rule 55 (expression -> DOUBLE .) ]
  ! DIVIDE          [ reduce using rule 55 (expression -> DOUBLE .) ]


state 113

    (17) expression -> expression TIMES expression .
    (15) expression -> expression . PLUS expression
    (16) expression -> expression . MINUS expression
    (17) expression -> expression . TIMES expression
    (18) expression -> expression . DIVIDE expression
    (22) expression -> expression . AND expression
    (23) expression -> expression . OR expression
    (25) expression -> expression . EQ expression
    (26) expression -> expression . NEQ expression
    (29) expression -> expression . DOT ID
    (56) expression -> expression . PLUS DOUBLE
    (57) expression -> expression . MINUS DOUBLE
    (58) expression -> expression . TIMES DOUBLE
    (59) expression -> expression . DIVIDE DOUBLE

    RPAREN          reduce using rule 17 (expression -> expression TIMES expression .)
    PLUS            reduce using rule 17 (expression -> expression TIMES expression .)
    MINUS           reduce using rule 17 (expression -> expression TIMES expression .)
    TIMES           reduce using rule 17 (expression -> expression TIMES expression .)
    DIVIDE          reduce using rule 17 (expression -> expression TIMES expression .)
    AND             reduce using rule 17 (expression -> expression TIMES expression .)
    OR              reduce using rule 17 (expression -> expression TIMES expression .)
    EQ              reduce using rule 17 (expression -> expression TIMES expression .)
    NEQ             reduce using rule 17 (expression -> expression TIMES expression .)
    DOT             reduce using rule 17 (expression -> expression TIMES expression .)
    SEMI            reduce using rule 17 (expression -> expression TIMES expression .)
    COMA            reduce using rule 17 (expression -> expression TIMES expression .)
    RBRACKET        reduce using rule 17 (expression -> expression TIMES expression .)
    RBRACE          reduce using rule 17 (expression -> expression TIMES expression .)
    COLON           reduce using rule 17 (expression -> expression TIMES expression .)

  ! PLUS            [ shift and go to state 73 ]
  ! MINUS           [ shift and go to state 74 ]
  ! TIMES           [ shift and go to state 75 ]
  ! DIVIDE          [ shift and go to state 76 ]
  ! AND             [ shift and go to state 77 ]
  ! OR              [ shift and go to state 78 ]
  ! EQ              [ shift and go to state 79 ]
  ! NEQ             [ shift and go to state 80 ]
  ! DOT             [ shift and go to state 81 ]


state 114

    (58) expression -> expression TIMES DOUBLE .
    (55) expression -> DOUBLE .
    (60) expression -> DOUBLE . PLUS expression
    (61) expression -> DOUBLE . MINUS expression
    (62) expression -> DOUBLE . TIMES expression
    (63) expression -> DOUBLE . DIVIDE expression

  ! reduce/reduce conflict for PLUS resolved using rule 55 (expression -> DOUBLE .)
  ! reduce/reduce conflict for MINUS resolved using rule 55 (expression -> DOUBLE .)
  ! reduce/reduce conflict for TIMES resolved using rule 55 (expression -> DOUBLE .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 55 (expression -> DOUBLE .)
  ! reduce/reduce conflict for AND resolved using rule 55 (expression -> DOUBLE .)
  ! reduce/reduce conflict for OR resolved using rule 55 (expression -> DOUBLE .)
  ! reduce/reduce conflict for EQ resolved using rule 55 (expression -> DOUBLE .)
  ! reduce/reduce conflict for NEQ resolved using rule 55 (expression -> DOUBLE .)
  ! reduce/reduce conflict for DOT resolved using rule 55 (expression -> DOUBLE .)
  ! reduce/reduce conflict for RPAREN resolved using rule 55 (expression -> DOUBLE .)
  ! reduce/reduce conflict for SEMI resolved using rule 55 (expression -> DOUBLE .)
  ! reduce/reduce conflict for COMA resolved using rule 55 (expression -> DOUBLE .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 55 (expression -> DOUBLE .)
  ! reduce/reduce conflict for RBRACE resolved using rule 55 (expression -> DOUBLE .)
  ! reduce/reduce conflict for COLON resolved using rule 55 (expression -> DOUBLE .)
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
    AND             reduce using rule 55 (expression -> DOUBLE .)
    OR              reduce using rule 55 (expression -> DOUBLE .)
    EQ              reduce using rule 55 (expression -> DOUBLE .)
    NEQ             reduce using rule 55 (expression -> DOUBLE .)
    DOT             reduce using rule 55 (expression -> DOUBLE .)
    RPAREN          reduce using rule 55 (expression -> DOUBLE .)
    SEMI            reduce using rule 55 (expression -> DOUBLE .)
    COMA            reduce using rule 55 (expression -> DOUBLE .)
    RBRACKET        reduce using rule 55 (expression -> DOUBLE .)
    RBRACE          reduce using rule 55 (expression -> DOUBLE .)
    COLON           reduce using rule 55 (expression -> DOUBLE .)
    PLUS            shift and go to state 84
    MINUS           shift and go to state 85
    TIMES           shift and go to state 86
    DIVIDE          shift and go to state 87

  ! RPAREN          [ reduce using rule 58 (expression -> expression TIMES DOUBLE .) ]
  ! PLUS            [ reduce using rule 58 (expression -> expression TIMES DOUBLE .) ]
  ! MINUS           [ reduce using rule 58 (expression -> expression TIMES DOUBLE .) ]
  ! TIMES           [ reduce using rule 58 (expression -> expression TIMES DOUBLE .) ]
  ! DIVIDE          [ reduce using rule 58 (expression -> expression TIMES DOUBLE .) ]
  ! AND             [ reduce using rule 58 (expression -> expression TIMES DOUBLE .) ]
  ! OR              [ reduce using rule 58 (expression -> expression TIMES DOUBLE .) ]
  ! EQ              [ reduce using rule 58 (expression -> expression TIMES DOUBLE .) ]
  ! NEQ             [ reduce using rule 58 (expression -> expression TIMES DOUBLE .) ]
  ! DOT             [ reduce using rule 58 (expression -> expression TIMES DOUBLE .) ]
  ! SEMI            [ reduce using rule 58 (expression -> expression TIMES DOUBLE .) ]
  ! COMA            [ reduce using rule 58 (expression -> expression TIMES DOUBLE .) ]
  ! RBRACKET        [ reduce using rule 58 (expression -> expression TIMES DOUBLE .) ]
  ! RBRACE          [ reduce using rule 58 (expression -> expression TIMES DOUBLE .) ]
  ! COLON           [ reduce using rule 58 (expression -> expression TIMES DOUBLE .) ]
  ! PLUS            [ reduce using rule 55 (expression -> DOUBLE .) ]
  ! MINUS           [ reduce using rule 55 (expression -> DOUBLE .) ]
  ! TIMES           [ reduce using rule 55 (expression -> DOUBLE .) ]
  ! DIVIDE          [ reduce using rule 55 (expression -> DOUBLE .) ]


state 115

    (18) expression -> expression DIVIDE expression .
    (15) expression -> expression . PLUS expression
    (16) expression -> expression . MINUS expression
    (17) expression -> expression . TIMES expression
    (18) expression -> expression . DIVIDE expression
    (22) expression -> expression . AND expression
    (23) expression -> expression . OR expression
    (25) expression -> expression . EQ expression
    (26) expression -> expression . NEQ expression
    (29) expression -> expression . DOT ID
    (56) expression -> expression . PLUS DOUBLE
    (57) expression -> expression . MINUS DOUBLE
    (58) expression -> expression . TIMES DOUBLE
    (59) expression -> expression . DIVIDE DOUBLE

    RPAREN          reduce using rule 18 (expression -> expression DIVIDE expression .)
    PLUS            reduce using rule 18 (expression -> expression DIVIDE expression .)
    MINUS           reduce using rule 18 (expression -> expression DIVIDE expression .)
    TIMES           reduce using rule 18 (expression -> expression DIVIDE expression .)
    DIVIDE          reduce using rule 18 (expression -> expression DIVIDE expression .)
    AND             reduce using rule 18 (expression -> expression DIVIDE expression .)
    OR              reduce using rule 18 (expression -> expression DIVIDE expression .)
    EQ              reduce using rule 18 (expression -> expression DIVIDE expression .)
    NEQ             reduce using rule 18 (expression -> expression DIVIDE expression .)
    DOT             reduce using rule 18 (expression -> expression DIVIDE expression .)
    SEMI            reduce using rule 18 (expression -> expression DIVIDE expression .)
    COMA            reduce using rule 18 (expression -> expression DIVIDE expression .)
    RBRACKET        reduce using rule 18 (expression -> expression DIVIDE expression .)
    RBRACE          reduce using rule 18 (expression -> expression DIVIDE expression .)
    COLON           reduce using rule 18 (expression -> expression DIVIDE expression .)

  ! PLUS            [ shift and go to state 73 ]
  ! MINUS           [ shift and go to state 74 ]
  ! TIMES           [ shift and go to state 75 ]
  ! DIVIDE          [ shift and go to state 76 ]
  ! AND             [ shift and go to state 77 ]
  ! OR              [ shift and go to state 78 ]
  ! EQ              [ shift and go to state 79 ]
  ! NEQ             [ shift and go to state 80 ]
  ! DOT             [ shift and go to state 81 ]


state 116

    (59) expression -> expression DIVIDE DOUBLE .
    (55) expression -> DOUBLE .
    (60) expression -> DOUBLE . PLUS expression
    (61) expression -> DOUBLE . MINUS expression
    (62) expression -> DOUBLE . TIMES expression
    (63) expression -> DOUBLE . DIVIDE expression

  ! reduce/reduce conflict for PLUS resolved using rule 55 (expression -> DOUBLE .)
  ! reduce/reduce conflict for MINUS resolved using rule 55 (expression -> DOUBLE .)
  ! reduce/reduce conflict for TIMES resolved using rule 55 (expression -> DOUBLE .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 55 (expression -> DOUBLE .)
  ! reduce/reduce conflict for AND resolved using rule 55 (expression -> DOUBLE .)
  ! reduce/reduce conflict for OR resolved using rule 55 (expression -> DOUBLE .)
  ! reduce/reduce conflict for EQ resolved using rule 55 (expression -> DOUBLE .)
  ! reduce/reduce conflict for NEQ resolved using rule 55 (expression -> DOUBLE .)
  ! reduce/reduce conflict for DOT resolved using rule 55 (expression -> DOUBLE .)
  ! reduce/reduce conflict for RPAREN resolved using rule 55 (expression -> DOUBLE .)
  ! reduce/reduce conflict for SEMI resolved using rule 55 (expression -> DOUBLE .)
  ! reduce/reduce conflict for COMA resolved using rule 55 (expression -> DOUBLE .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 55 (expression -> DOUBLE .)
  ! reduce/reduce conflict for RBRACE resolved using rule 55 (expression -> DOUBLE .)
  ! reduce/reduce conflict for COLON resolved using rule 55 (expression -> DOUBLE .)
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
    AND             reduce using rule 55 (expression -> DOUBLE .)
    OR              reduce using rule 55 (expression -> DOUBLE .)
    EQ              reduce using rule 55 (expression -> DOUBLE .)
    NEQ             reduce using rule 55 (expression -> DOUBLE .)
    DOT             reduce using rule 55 (expression -> DOUBLE .)
    RPAREN          reduce using rule 55 (expression -> DOUBLE .)
    SEMI            reduce using rule 55 (expression -> DOUBLE .)
    COMA            reduce using rule 55 (expression -> DOUBLE .)
    RBRACKET        reduce using rule 55 (expression -> DOUBLE .)
    RBRACE          reduce using rule 55 (expression -> DOUBLE .)
    COLON           reduce using rule 55 (expression -> DOUBLE .)
    PLUS            shift and go to state 84
    MINUS           shift and go to state 85
    TIMES           shift and go to state 86
    DIVIDE          shift and go to state 87

  ! RPAREN          [ reduce using rule 59 (expression -> expression DIVIDE DOUBLE .) ]
  ! PLUS            [ reduce using rule 59 (expression -> expression DIVIDE DOUBLE .) ]
  ! MINUS           [ reduce using rule 59 (expression -> expression DIVIDE DOUBLE .) ]
  ! TIMES           [ reduce using rule 59 (expression -> expression DIVIDE DOUBLE .) ]
  ! DIVIDE          [ reduce using rule 59 (expression -> expression DIVIDE DOUBLE .) ]
  ! AND             [ reduce using rule 59 (expression -> expression DIVIDE DOUBLE .) ]
  ! OR              [ reduce using rule 59 (expression -> expression DIVIDE DOUBLE .) ]
  ! EQ              [ reduce using rule 59 (expression -> expression DIVIDE DOUBLE .) ]
  ! NEQ             [ reduce using rule 59 (expression -> expression DIVIDE DOUBLE .) ]
  ! DOT             [ reduce using rule 59 (expression -> expression DIVIDE DOUBLE .) ]
  ! SEMI            [ reduce using rule 59 (expression -> expression DIVIDE DOUBLE .) ]
  ! COMA            [ reduce using rule 59 (expression -> expression DIVIDE DOUBLE .) ]
  ! RBRACKET        [ reduce using rule 59 (expression -> expression DIVIDE DOUBLE .) ]
  ! RBRACE          [ reduce using rule 59 (expression -> expression DIVIDE DOUBLE .) ]
  ! COLON           [ reduce using rule 59 (expression -> expression DIVIDE DOUBLE .) ]
  ! PLUS            [ reduce using rule 55 (expression -> DOUBLE .) ]
  ! MINUS           [ reduce using rule 55 (expression -> DOUBLE .) ]
  ! TIMES           [ reduce using rule 55 (expression -> DOUBLE .) ]
  ! DIVIDE          [ reduce using rule 55 (expression -> DOUBLE .) ]


state 117

    (22) expression -> expression AND expression .
    (15) expression -> expression . PLUS expression
    (16) expression -> expression . MINUS expression
    (17) expression -> expression . TIMES expression
    (18) expression -> expression . DIVIDE expression
    (22) expression -> expression . AND expression
    (23) expression -> expression . OR expression
    (25) expression -> expression . EQ expression
    (26) expression -> expression . NEQ expression
    (29) expression -> expression . DOT ID
    (56) expression -> expression . PLUS DOUBLE
    (57) expression -> expression . MINUS DOUBLE
    (58) expression -> expression . TIMES DOUBLE
    (59) expression -> expression . DIVIDE DOUBLE

    RPAREN          reduce using rule 22 (expression -> expression AND expression .)
    AND             reduce using rule 22 (expression -> expression AND expression .)
    OR              reduce using rule 22 (expression -> expression AND expression .)
    EQ              reduce using rule 22 (expression -> expression AND expression .)
    NEQ             reduce using rule 22 (expression -> expression AND expression .)
    DOT             reduce using rule 22 (expression -> expression AND expression .)
    SEMI            reduce using rule 22 (expression -> expression AND expression .)
    COMA            reduce using rule 22 (expression -> expression AND expression .)
    RBRACKET        reduce using rule 22 (expression -> expression AND expression .)
    RBRACE          reduce using rule 22 (expression -> expression AND expression .)
    COLON           reduce using rule 22 (expression -> expression AND expression .)
    PLUS            shift and go to state 73
    MINUS           shift and go to state 74
    TIMES           shift and go to state 75
    DIVIDE          shift and go to state 76

  ! PLUS            [ reduce using rule 22 (expression -> expression AND expression .) ]
  ! MINUS           [ reduce using rule 22 (expression -> expression AND expression .) ]
  ! TIMES           [ reduce using rule 22 (expression -> expression AND expression .) ]
  ! DIVIDE          [ reduce using rule 22 (expression -> expression AND expression .) ]
  ! AND             [ shift and go to state 77 ]
  ! OR              [ shift and go to state 78 ]
  ! EQ              [ shift and go to state 79 ]
  ! NEQ             [ shift and go to state 80 ]
  ! DOT             [ shift and go to state 81 ]


state 118

    (23) expression -> expression OR expression .
    (15) expression -> expression . PLUS expression
    (16) expression -> expression . MINUS expression
    (17) expression -> expression . TIMES expression
    (18) expression -> expression . DIVIDE expression
    (22) expression -> expression . AND expression
    (23) expression -> expression . OR expression
    (25) expression -> expression . EQ expression
    (26) expression -> expression . NEQ expression
    (29) expression -> expression . DOT ID
    (56) expression -> expression . PLUS DOUBLE
    (57) expression -> expression . MINUS DOUBLE
    (58) expression -> expression . TIMES DOUBLE
    (59) expression -> expression . DIVIDE DOUBLE

    RPAREN          reduce using rule 23 (expression -> expression OR expression .)
    AND             reduce using rule 23 (expression -> expression OR expression .)
    OR              reduce using rule 23 (expression -> expression OR expression .)
    EQ              reduce using rule 23 (expression -> expression OR expression .)
    NEQ             reduce using rule 23 (expression -> expression OR expression .)
    DOT             reduce using rule 23 (expression -> expression OR expression .)
    SEMI            reduce using rule 23 (expression -> expression OR expression .)
    COMA            reduce using rule 23 (expression -> expression OR expression .)
    RBRACKET        reduce using rule 23 (expression -> expression OR expression .)
    RBRACE          reduce using rule 23 (expression -> expression OR expression .)
    COLON           reduce using rule 23 (expression -> expression OR expression .)
    PLUS            shift and go to state 73
    MINUS           shift and go to state 74
    TIMES           shift and go to state 75
    DIVIDE          shift and go to state 76

  ! PLUS            [ reduce using rule 23 (expression -> expression OR expression .) ]
  ! MINUS           [ reduce using rule 23 (expression -> expression OR expression .) ]
  ! TIMES           [ reduce using rule 23 (expression -> expression OR expression .) ]
  ! DIVIDE          [ reduce using rule 23 (expression -> expression OR expression .) ]
  ! AND             [ shift and go to state 77 ]
  ! OR              [ shift and go to state 78 ]
  ! EQ              [ shift and go to state 79 ]
  ! NEQ             [ shift and go to state 80 ]
  ! DOT             [ shift and go to state 81 ]


state 119

    (25) expression -> expression EQ expression .
    (15) expression -> expression . PLUS expression
    (16) expression -> expression . MINUS expression
    (17) expression -> expression . TIMES expression
    (18) expression -> expression . DIVIDE expression
    (22) expression -> expression . AND expression
    (23) expression -> expression . OR expression
    (25) expression -> expression . EQ expression
    (26) expression -> expression . NEQ expression
    (29) expression -> expression . DOT ID
    (56) expression -> expression . PLUS DOUBLE
    (57) expression -> expression . MINUS DOUBLE
    (58) expression -> expression . TIMES DOUBLE
    (59) expression -> expression . DIVIDE DOUBLE

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
    RPAREN          reduce using rule 25 (expression -> expression EQ expression .)
    SEMI            reduce using rule 25 (expression -> expression EQ expression .)
    COMA            reduce using rule 25 (expression -> expression EQ expression .)
    RBRACKET        reduce using rule 25 (expression -> expression EQ expression .)
    RBRACE          reduce using rule 25 (expression -> expression EQ expression .)
    COLON           reduce using rule 25 (expression -> expression EQ expression .)
    PLUS            shift and go to state 73
    MINUS           shift and go to state 74
    TIMES           shift and go to state 75
    DIVIDE          shift and go to state 76
    AND             shift and go to state 77
    OR              shift and go to state 78
    EQ              shift and go to state 79
    NEQ             shift and go to state 80
    DOT             shift and go to state 81

  ! PLUS            [ reduce using rule 25 (expression -> expression EQ expression .) ]
  ! MINUS           [ reduce using rule 25 (expression -> expression EQ expression .) ]
  ! TIMES           [ reduce using rule 25 (expression -> expression EQ expression .) ]
  ! DIVIDE          [ reduce using rule 25 (expression -> expression EQ expression .) ]
  ! AND             [ reduce using rule 25 (expression -> expression EQ expression .) ]
  ! OR              [ reduce using rule 25 (expression -> expression EQ expression .) ]
  ! EQ              [ reduce using rule 25 (expression -> expression EQ expression .) ]
  ! NEQ             [ reduce using rule 25 (expression -> expression EQ expression .) ]
  ! DOT             [ reduce using rule 25 (expression -> expression EQ expression .) ]


state 120

    (26) expression -> expression NEQ expression .
    (15) expression -> expression . PLUS expression
    (16) expression -> expression . MINUS expression
    (17) expression -> expression . TIMES expression
    (18) expression -> expression . DIVIDE expression
    (22) expression -> expression . AND expression
    (23) expression -> expression . OR expression
    (25) expression -> expression . EQ expression
    (26) expression -> expression . NEQ expression
    (29) expression -> expression . DOT ID
    (56) expression -> expression . PLUS DOUBLE
    (57) expression -> expression . MINUS DOUBLE
    (58) expression -> expression . TIMES DOUBLE
    (59) expression -> expression . DIVIDE DOUBLE

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
    RPAREN          reduce using rule 26 (expression -> expression NEQ expression .)
    SEMI            reduce using rule 26 (expression -> expression NEQ expression .)
    COMA            reduce using rule 26 (expression -> expression NEQ expression .)
    RBRACKET        reduce using rule 26 (expression -> expression NEQ expression .)
    RBRACE          reduce using rule 26 (expression -> expression NEQ expression .)
    COLON           reduce using rule 26 (expression -> expression NEQ expression .)
    PLUS            shift and go to state 73
    MINUS           shift and go to state 74
    TIMES           shift and go to state 75
    DIVIDE          shift and go to state 76
    AND             shift and go to state 77
    OR              shift and go to state 78
    EQ              shift and go to state 79
    NEQ             shift and go to state 80
    DOT             shift and go to state 81

  ! PLUS            [ reduce using rule 26 (expression -> expression NEQ expression .) ]
  ! MINUS           [ reduce using rule 26 (expression -> expression NEQ expression .) ]
  ! TIMES           [ reduce using rule 26 (expression -> expression NEQ expression .) ]
  ! DIVIDE          [ reduce using rule 26 (expression -> expression NEQ expression .) ]
  ! AND             [ reduce using rule 26 (expression -> expression NEQ expression .) ]
  ! OR              [ reduce using rule 26 (expression -> expression NEQ expression .) ]
  ! EQ              [ reduce using rule 26 (expression -> expression NEQ expression .) ]
  ! NEQ             [ reduce using rule 26 (expression -> expression NEQ expression .) ]
  ! DOT             [ reduce using rule 26 (expression -> expression NEQ expression .) ]


state 121

    (29) expression -> expression DOT ID .

    RPAREN          reduce using rule 29 (expression -> expression DOT ID .)
    PLUS            reduce using rule 29 (expression -> expression DOT ID .)
    MINUS           reduce using rule 29 (expression -> expression DOT ID .)
    TIMES           reduce using rule 29 (expression -> expression DOT ID .)
    DIVIDE          reduce using rule 29 (expression -> expression DOT ID .)
    AND             reduce using rule 29 (expression -> expression DOT ID .)
    OR              reduce using rule 29 (expression -> expression DOT ID .)
    EQ              reduce using rule 29 (expression -> expression DOT ID .)
    NEQ             reduce using rule 29 (expression -> expression DOT ID .)
    DOT             reduce using rule 29 (expression -> expression DOT ID .)
    SEMI            reduce using rule 29 (expression -> expression DOT ID .)
    COMA            reduce using rule 29 (expression -> expression DOT ID .)
    RBRACKET        reduce using rule 29 (expression -> expression DOT ID .)
    RBRACE          reduce using rule 29 (expression -> expression DOT ID .)
    COLON           reduce using rule 29 (expression -> expression DOT ID .)


state 122

    (31) expression -> STDIN DOT READLINESYNC . LPAREN RPAREN

    LPAREN          shift and go to state 144


state 123

    (60) expression -> DOUBLE PLUS expression .
    (15) expression -> expression . PLUS expression
    (16) expression -> expression . MINUS expression
    (17) expression -> expression . TIMES expression
    (18) expression -> expression . DIVIDE expression
    (22) expression -> expression . AND expression
    (23) expression -> expression . OR expression
    (25) expression -> expression . EQ expression
    (26) expression -> expression . NEQ expression
    (29) expression -> expression . DOT ID
    (56) expression -> expression . PLUS DOUBLE
    (57) expression -> expression . MINUS DOUBLE
    (58) expression -> expression . TIMES DOUBLE
    (59) expression -> expression . DIVIDE DOUBLE

    RPAREN          reduce using rule 60 (expression -> DOUBLE PLUS expression .)
    PLUS            reduce using rule 60 (expression -> DOUBLE PLUS expression .)
    MINUS           reduce using rule 60 (expression -> DOUBLE PLUS expression .)
    AND             reduce using rule 60 (expression -> DOUBLE PLUS expression .)
    OR              reduce using rule 60 (expression -> DOUBLE PLUS expression .)
    EQ              reduce using rule 60 (expression -> DOUBLE PLUS expression .)
    NEQ             reduce using rule 60 (expression -> DOUBLE PLUS expression .)
    DOT             reduce using rule 60 (expression -> DOUBLE PLUS expression .)
    SEMI            reduce using rule 60 (expression -> DOUBLE PLUS expression .)
    COMA            reduce using rule 60 (expression -> DOUBLE PLUS expression .)
    RBRACKET        reduce using rule 60 (expression -> DOUBLE PLUS expression .)
    RBRACE          reduce using rule 60 (expression -> DOUBLE PLUS expression .)
    COLON           reduce using rule 60 (expression -> DOUBLE PLUS expression .)
    TIMES           shift and go to state 75
    DIVIDE          shift and go to state 76

  ! TIMES           [ reduce using rule 60 (expression -> DOUBLE PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 60 (expression -> DOUBLE PLUS expression .) ]
  ! PLUS            [ shift and go to state 73 ]
  ! MINUS           [ shift and go to state 74 ]
  ! AND             [ shift and go to state 77 ]
  ! OR              [ shift and go to state 78 ]
  ! EQ              [ shift and go to state 79 ]
  ! NEQ             [ shift and go to state 80 ]
  ! DOT             [ shift and go to state 81 ]


state 124

    (61) expression -> DOUBLE MINUS expression .
    (15) expression -> expression . PLUS expression
    (16) expression -> expression . MINUS expression
    (17) expression -> expression . TIMES expression
    (18) expression -> expression . DIVIDE expression
    (22) expression -> expression . AND expression
    (23) expression -> expression . OR expression
    (25) expression -> expression . EQ expression
    (26) expression -> expression . NEQ expression
    (29) expression -> expression . DOT ID
    (56) expression -> expression . PLUS DOUBLE
    (57) expression -> expression . MINUS DOUBLE
    (58) expression -> expression . TIMES DOUBLE
    (59) expression -> expression . DIVIDE DOUBLE

    RPAREN          reduce using rule 61 (expression -> DOUBLE MINUS expression .)
    PLUS            reduce using rule 61 (expression -> DOUBLE MINUS expression .)
    MINUS           reduce using rule 61 (expression -> DOUBLE MINUS expression .)
    AND             reduce using rule 61 (expression -> DOUBLE MINUS expression .)
    OR              reduce using rule 61 (expression -> DOUBLE MINUS expression .)
    EQ              reduce using rule 61 (expression -> DOUBLE MINUS expression .)
    NEQ             reduce using rule 61 (expression -> DOUBLE MINUS expression .)
    DOT             reduce using rule 61 (expression -> DOUBLE MINUS expression .)
    SEMI            reduce using rule 61 (expression -> DOUBLE MINUS expression .)
    COMA            reduce using rule 61 (expression -> DOUBLE MINUS expression .)
    RBRACKET        reduce using rule 61 (expression -> DOUBLE MINUS expression .)
    RBRACE          reduce using rule 61 (expression -> DOUBLE MINUS expression .)
    COLON           reduce using rule 61 (expression -> DOUBLE MINUS expression .)
    TIMES           shift and go to state 75
    DIVIDE          shift and go to state 76

  ! TIMES           [ reduce using rule 61 (expression -> DOUBLE MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 61 (expression -> DOUBLE MINUS expression .) ]
  ! PLUS            [ shift and go to state 73 ]
  ! MINUS           [ shift and go to state 74 ]
  ! AND             [ shift and go to state 77 ]
  ! OR              [ shift and go to state 78 ]
  ! EQ              [ shift and go to state 79 ]
  ! NEQ             [ shift and go to state 80 ]
  ! DOT             [ shift and go to state 81 ]


state 125

    (62) expression -> DOUBLE TIMES expression .
    (15) expression -> expression . PLUS expression
    (16) expression -> expression . MINUS expression
    (17) expression -> expression . TIMES expression
    (18) expression -> expression . DIVIDE expression
    (22) expression -> expression . AND expression
    (23) expression -> expression . OR expression
    (25) expression -> expression . EQ expression
    (26) expression -> expression . NEQ expression
    (29) expression -> expression . DOT ID
    (56) expression -> expression . PLUS DOUBLE
    (57) expression -> expression . MINUS DOUBLE
    (58) expression -> expression . TIMES DOUBLE
    (59) expression -> expression . DIVIDE DOUBLE

    RPAREN          reduce using rule 62 (expression -> DOUBLE TIMES expression .)
    PLUS            reduce using rule 62 (expression -> DOUBLE TIMES expression .)
    MINUS           reduce using rule 62 (expression -> DOUBLE TIMES expression .)
    TIMES           reduce using rule 62 (expression -> DOUBLE TIMES expression .)
    DIVIDE          reduce using rule 62 (expression -> DOUBLE TIMES expression .)
    AND             reduce using rule 62 (expression -> DOUBLE TIMES expression .)
    OR              reduce using rule 62 (expression -> DOUBLE TIMES expression .)
    EQ              reduce using rule 62 (expression -> DOUBLE TIMES expression .)
    NEQ             reduce using rule 62 (expression -> DOUBLE TIMES expression .)
    DOT             reduce using rule 62 (expression -> DOUBLE TIMES expression .)
    SEMI            reduce using rule 62 (expression -> DOUBLE TIMES expression .)
    COMA            reduce using rule 62 (expression -> DOUBLE TIMES expression .)
    RBRACKET        reduce using rule 62 (expression -> DOUBLE TIMES expression .)
    RBRACE          reduce using rule 62 (expression -> DOUBLE TIMES expression .)
    COLON           reduce using rule 62 (expression -> DOUBLE TIMES expression .)

  ! PLUS            [ shift and go to state 73 ]
  ! MINUS           [ shift and go to state 74 ]
  ! TIMES           [ shift and go to state 75 ]
  ! DIVIDE          [ shift and go to state 76 ]
  ! AND             [ shift and go to state 77 ]
  ! OR              [ shift and go to state 78 ]
  ! EQ              [ shift and go to state 79 ]
  ! NEQ             [ shift and go to state 80 ]
  ! DOT             [ shift and go to state 81 ]


state 126

    (63) expression -> DOUBLE DIVIDE expression .
    (15) expression -> expression . PLUS expression
    (16) expression -> expression . MINUS expression
    (17) expression -> expression . TIMES expression
    (18) expression -> expression . DIVIDE expression
    (22) expression -> expression . AND expression
    (23) expression -> expression . OR expression
    (25) expression -> expression . EQ expression
    (26) expression -> expression . NEQ expression
    (29) expression -> expression . DOT ID
    (56) expression -> expression . PLUS DOUBLE
    (57) expression -> expression . MINUS DOUBLE
    (58) expression -> expression . TIMES DOUBLE
    (59) expression -> expression . DIVIDE DOUBLE

    RPAREN          reduce using rule 63 (expression -> DOUBLE DIVIDE expression .)
    PLUS            reduce using rule 63 (expression -> DOUBLE DIVIDE expression .)
    MINUS           reduce using rule 63 (expression -> DOUBLE DIVIDE expression .)
    TIMES           reduce using rule 63 (expression -> DOUBLE DIVIDE expression .)
    DIVIDE          reduce using rule 63 (expression -> DOUBLE DIVIDE expression .)
    AND             reduce using rule 63 (expression -> DOUBLE DIVIDE expression .)
    OR              reduce using rule 63 (expression -> DOUBLE DIVIDE expression .)
    EQ              reduce using rule 63 (expression -> DOUBLE DIVIDE expression .)
    NEQ             reduce using rule 63 (expression -> DOUBLE DIVIDE expression .)
    DOT             reduce using rule 63 (expression -> DOUBLE DIVIDE expression .)
    SEMI            reduce using rule 63 (expression -> DOUBLE DIVIDE expression .)
    COMA            reduce using rule 63 (expression -> DOUBLE DIVIDE expression .)
    RBRACKET        reduce using rule 63 (expression -> DOUBLE DIVIDE expression .)
    RBRACE          reduce using rule 63 (expression -> DOUBLE DIVIDE expression .)
    COLON           reduce using rule 63 (expression -> DOUBLE DIVIDE expression .)

  ! PLUS            [ shift and go to state 73 ]
  ! MINUS           [ shift and go to state 74 ]
  ! TIMES           [ shift and go to state 75 ]
  ! DIVIDE          [ shift and go to state 76 ]
  ! AND             [ shift and go to state 77 ]
  ! OR              [ shift and go to state 78 ]
  ! EQ              [ shift and go to state 79 ]
  ! NEQ             [ shift and go to state 80 ]
  ! DOT             [ shift and go to state 81 ]


state 127

    (30) statement -> PRINT LPAREN expression RPAREN SEMI .

    CLASS           reduce using rule 30 (statement -> PRINT LPAREN expression RPAREN SEMI .)
    VAR             reduce using rule 30 (statement -> PRINT LPAREN expression RPAREN SEMI .)
    FINAL           reduce using rule 30 (statement -> PRINT LPAREN expression RPAREN SEMI .)
    NEWLINE         reduce using rule 30 (statement -> PRINT LPAREN expression RPAREN SEMI .)
    ID              reduce using rule 30 (statement -> PRINT LPAREN expression RPAREN SEMI .)
    IF              reduce using rule 30 (statement -> PRINT LPAREN expression RPAREN SEMI .)
    PRINT           reduce using rule 30 (statement -> PRINT LPAREN expression RPAREN SEMI .)
    LIST            reduce using rule 30 (statement -> PRINT LPAREN expression RPAREN SEMI .)
    WHILE           reduce using rule 30 (statement -> PRINT LPAREN expression RPAREN SEMI .)
    FOR             reduce using rule 30 (statement -> PRINT LPAREN expression RPAREN SEMI .)
    MAP             reduce using rule 30 (statement -> PRINT LPAREN expression RPAREN SEMI .)
    SET             reduce using rule 30 (statement -> PRINT LPAREN expression RPAREN SEMI .)
    VOID            reduce using rule 30 (statement -> PRINT LPAREN expression RPAREN SEMI .)
    INT_TYPE        reduce using rule 30 (statement -> PRINT LPAREN expression RPAREN SEMI .)
    STRING_TYPE     reduce using rule 30 (statement -> PRINT LPAREN expression RPAREN SEMI .)
    BOOL_TYPE       reduce using rule 30 (statement -> PRINT LPAREN expression RPAREN SEMI .)
    DOUBLE_TYPE     reduce using rule 30 (statement -> PRINT LPAREN expression RPAREN SEMI .)
    $end            reduce using rule 30 (statement -> PRINT LPAREN expression RPAREN SEMI .)
    RBRACE          reduce using rule 30 (statement -> PRINT LPAREN expression RPAREN SEMI .)


state 128

    (32) statement -> LIST LT type GT ID . ASSIGN LBRACKET RBRACKET SEMI
    (33) statement -> LIST LT type GT ID . ASSIGN LBRACKET group RBRACKET SEMI

    ASSIGN          shift and go to state 145


state 129

    (34) statement -> LIST ID ASSIGN LBRACKET group . RBRACKET SEMI

    RBRACKET        shift and go to state 146


state 130

    (35) group -> expression . COMA group
    (36) group -> expression .
    (15) expression -> expression . PLUS expression
    (16) expression -> expression . MINUS expression
    (17) expression -> expression . TIMES expression
    (18) expression -> expression . DIVIDE expression
    (22) expression -> expression . AND expression
    (23) expression -> expression . OR expression
    (25) expression -> expression . EQ expression
    (26) expression -> expression . NEQ expression
    (29) expression -> expression . DOT ID
    (56) expression -> expression . PLUS DOUBLE
    (57) expression -> expression . MINUS DOUBLE
    (58) expression -> expression . TIMES DOUBLE
    (59) expression -> expression . DIVIDE DOUBLE

    COMA            shift and go to state 147
    RBRACKET        reduce using rule 36 (group -> expression .)
    PLUS            shift and go to state 73
    MINUS           shift and go to state 74
    TIMES           shift and go to state 75
    DIVIDE          shift and go to state 76
    AND             shift and go to state 77
    OR              shift and go to state 78
    EQ              shift and go to state 79
    NEQ             shift and go to state 80
    DOT             shift and go to state 81


state 131

    (37) statement -> WHILE LPAREN expression RPAREN LBRACE . statement RBRACE
    (1) statement -> . CLASS ID LBRACE class_body RBRACE
    (7) statement -> . type ID ASSIGN expression SEMI
    (8) statement -> . VAR ID ASSIGN expression SEMI
    (9) statement -> . FINAL ID ASSIGN expression SEMI
    (10) statement -> . NEWLINE
    (11) statement -> . ID ID ASSIGN NEW ID LPAREN RPAREN SEMI
    (12) statement -> . IF LPAREN expression RPAREN LBRACE statement RBRACE
    (13) statement -> . IF LPAREN expression RPAREN LBRACE statement RBRACE ELSE LBRACE statement RBRACE
    (30) statement -> . PRINT LPAREN expression RPAREN SEMI
    (32) statement -> . LIST LT type GT ID ASSIGN LBRACKET RBRACKET SEMI
    (33) statement -> . LIST LT type GT ID ASSIGN LBRACKET group RBRACKET SEMI
    (34) statement -> . LIST ID ASSIGN LBRACKET group RBRACKET SEMI
    (37) statement -> . WHILE LPAREN expression RPAREN LBRACE statement RBRACE
    (38) statement -> . FOR LPAREN for_init SEMI expression SEMI for_update RPAREN LBRACE statement RBRACE
    (39) statement -> . FOR LPAREN VAR ID IN expression RPAREN LBRACE statement RBRACE
    (46) statement -> . MAP LT type COMA type GT ID ASSIGN LBRACE map_entries RBRACE SEMI
    (47) statement -> . MAP LT type COMA type GT ID ASSIGN LBRACE RBRACE SEMI
    (51) statement -> . SET LT type GT ID ASSIGN LBRACE set_elements RBRACE SEMI
    (52) statement -> . SET LT type GT ID ASSIGN LBRACE RBRACE SEMI
    (67) statement -> . VOID ID LPAREN param_list RPAREN LBRACE statement RBRACE
    (68) statement -> . VOID ID LPAREN RPAREN LBRACE statement RBRACE
    (2) type -> . INT_TYPE
    (3) type -> . STRING_TYPE
    (4) type -> . BOOL_TYPE
    (5) type -> . DOUBLE_TYPE
    (6) type -> . ID

    CLASS           shift and go to state 4
    VAR             shift and go to state 7
    FINAL           shift and go to state 8
    NEWLINE         shift and go to state 9
    ID              shift and go to state 5
    IF              shift and go to state 10
    PRINT           shift and go to state 11
    LIST            shift and go to state 12
    WHILE           shift and go to state 13
    FOR             shift and go to state 14
    MAP             shift and go to state 15
    SET             shift and go to state 16
    VOID            shift and go to state 17
    INT_TYPE        shift and go to state 18
    STRING_TYPE     shift and go to state 19
    BOOL_TYPE       shift and go to state 20
    DOUBLE_TYPE     shift and go to state 21

    statement                      shift and go to state 148
    type                           shift and go to state 6

state 132

    (38) statement -> FOR LPAREN for_init SEMI expression . SEMI for_update RPAREN LBRACE statement RBRACE
    (15) expression -> expression . PLUS expression
    (16) expression -> expression . MINUS expression
    (17) expression -> expression . TIMES expression
    (18) expression -> expression . DIVIDE expression
    (22) expression -> expression . AND expression
    (23) expression -> expression . OR expression
    (25) expression -> expression . EQ expression
    (26) expression -> expression . NEQ expression
    (29) expression -> expression . DOT ID
    (56) expression -> expression . PLUS DOUBLE
    (57) expression -> expression . MINUS DOUBLE
    (58) expression -> expression . TIMES DOUBLE
    (59) expression -> expression . DIVIDE DOUBLE

    SEMI            shift and go to state 149
    PLUS            shift and go to state 73
    MINUS           shift and go to state 74
    TIMES           shift and go to state 75
    DIVIDE          shift and go to state 76
    AND             shift and go to state 77
    OR              shift and go to state 78
    EQ              shift and go to state 79
    NEQ             shift and go to state 80
    DOT             shift and go to state 81


state 133

    (39) statement -> FOR LPAREN VAR ID IN . expression RPAREN LBRACE statement RBRACE
    (14) expression -> . INT
    (15) expression -> . expression PLUS expression
    (16) expression -> . expression MINUS expression
    (17) expression -> . expression TIMES expression
    (18) expression -> . expression DIVIDE expression
    (19) expression -> . STRING
    (20) expression -> . TRUE
    (21) expression -> . FALSE
    (22) expression -> . expression AND expression
    (23) expression -> . expression OR expression
    (24) expression -> . NOT expression
    (25) expression -> . expression EQ expression
    (26) expression -> . expression NEQ expression
    (27) expression -> . LPAREN expression RPAREN
    (28) expression -> . ID
    (29) expression -> . expression DOT ID
    (31) expression -> . STDIN DOT READLINESYNC LPAREN RPAREN
    (55) expression -> . DOUBLE
    (56) expression -> . expression PLUS DOUBLE
    (57) expression -> . expression MINUS DOUBLE
    (58) expression -> . expression TIMES DOUBLE
    (59) expression -> . expression DIVIDE DOUBLE
    (60) expression -> . DOUBLE PLUS expression
    (61) expression -> . DOUBLE MINUS expression
    (62) expression -> . DOUBLE TIMES expression
    (63) expression -> . DOUBLE DIVIDE expression

    INT             shift and go to state 44
    STRING          shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    NOT             shift and go to state 48
    LPAREN          shift and go to state 42
    ID              shift and go to state 49
    STDIN           shift and go to state 50
    DOUBLE          shift and go to state 51

    expression                     shift and go to state 150

state 134

    (40) for_init -> VAR ID ASSIGN . expression
    (14) expression -> . INT
    (15) expression -> . expression PLUS expression
    (16) expression -> . expression MINUS expression
    (17) expression -> . expression TIMES expression
    (18) expression -> . expression DIVIDE expression
    (19) expression -> . STRING
    (20) expression -> . TRUE
    (21) expression -> . FALSE
    (22) expression -> . expression AND expression
    (23) expression -> . expression OR expression
    (24) expression -> . NOT expression
    (25) expression -> . expression EQ expression
    (26) expression -> . expression NEQ expression
    (27) expression -> . LPAREN expression RPAREN
    (28) expression -> . ID
    (29) expression -> . expression DOT ID
    (31) expression -> . STDIN DOT READLINESYNC LPAREN RPAREN
    (55) expression -> . DOUBLE
    (56) expression -> . expression PLUS DOUBLE
    (57) expression -> . expression MINUS DOUBLE
    (58) expression -> . expression TIMES DOUBLE
    (59) expression -> . expression DIVIDE DOUBLE
    (60) expression -> . DOUBLE PLUS expression
    (61) expression -> . DOUBLE MINUS expression
    (62) expression -> . DOUBLE TIMES expression
    (63) expression -> . DOUBLE DIVIDE expression

    INT             shift and go to state 44
    STRING          shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    NOT             shift and go to state 48
    LPAREN          shift and go to state 42
    ID              shift and go to state 49
    STDIN           shift and go to state 50
    DOUBLE          shift and go to state 51

    expression                     shift and go to state 151

state 135

    (41) for_init -> type ID ASSIGN . expression
    (14) expression -> . INT
    (15) expression -> . expression PLUS expression
    (16) expression -> . expression MINUS expression
    (17) expression -> . expression TIMES expression
    (18) expression -> . expression DIVIDE expression
    (19) expression -> . STRING
    (20) expression -> . TRUE
    (21) expression -> . FALSE
    (22) expression -> . expression AND expression
    (23) expression -> . expression OR expression
    (24) expression -> . NOT expression
    (25) expression -> . expression EQ expression
    (26) expression -> . expression NEQ expression
    (27) expression -> . LPAREN expression RPAREN
    (28) expression -> . ID
    (29) expression -> . expression DOT ID
    (31) expression -> . STDIN DOT READLINESYNC LPAREN RPAREN
    (55) expression -> . DOUBLE
    (56) expression -> . expression PLUS DOUBLE
    (57) expression -> . expression MINUS DOUBLE
    (58) expression -> . expression TIMES DOUBLE
    (59) expression -> . expression DIVIDE DOUBLE
    (60) expression -> . DOUBLE PLUS expression
    (61) expression -> . DOUBLE MINUS expression
    (62) expression -> . DOUBLE TIMES expression
    (63) expression -> . DOUBLE DIVIDE expression

    INT             shift and go to state 44
    STRING          shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    NOT             shift and go to state 48
    LPAREN          shift and go to state 42
    ID              shift and go to state 49
    STDIN           shift and go to state 50
    DOUBLE          shift and go to state 51

    expression                     shift and go to state 152

state 136

    (46) statement -> MAP LT type COMA type . GT ID ASSIGN LBRACE map_entries RBRACE SEMI
    (47) statement -> MAP LT type COMA type . GT ID ASSIGN LBRACE RBRACE SEMI

    GT              shift and go to state 153


state 137

    (51) statement -> SET LT type GT ID . ASSIGN LBRACE set_elements RBRACE SEMI
    (52) statement -> SET LT type GT ID . ASSIGN LBRACE RBRACE SEMI

    ASSIGN          shift and go to state 154


state 138

    (67) statement -> VOID ID LPAREN param_list RPAREN . LBRACE statement RBRACE

    LBRACE          shift and go to state 155


state 139

    (68) statement -> VOID ID LPAREN RPAREN LBRACE . statement RBRACE
    (1) statement -> . CLASS ID LBRACE class_body RBRACE
    (7) statement -> . type ID ASSIGN expression SEMI
    (8) statement -> . VAR ID ASSIGN expression SEMI
    (9) statement -> . FINAL ID ASSIGN expression SEMI
    (10) statement -> . NEWLINE
    (11) statement -> . ID ID ASSIGN NEW ID LPAREN RPAREN SEMI
    (12) statement -> . IF LPAREN expression RPAREN LBRACE statement RBRACE
    (13) statement -> . IF LPAREN expression RPAREN LBRACE statement RBRACE ELSE LBRACE statement RBRACE
    (30) statement -> . PRINT LPAREN expression RPAREN SEMI
    (32) statement -> . LIST LT type GT ID ASSIGN LBRACKET RBRACKET SEMI
    (33) statement -> . LIST LT type GT ID ASSIGN LBRACKET group RBRACKET SEMI
    (34) statement -> . LIST ID ASSIGN LBRACKET group RBRACKET SEMI
    (37) statement -> . WHILE LPAREN expression RPAREN LBRACE statement RBRACE
    (38) statement -> . FOR LPAREN for_init SEMI expression SEMI for_update RPAREN LBRACE statement RBRACE
    (39) statement -> . FOR LPAREN VAR ID IN expression RPAREN LBRACE statement RBRACE
    (46) statement -> . MAP LT type COMA type GT ID ASSIGN LBRACE map_entries RBRACE SEMI
    (47) statement -> . MAP LT type COMA type GT ID ASSIGN LBRACE RBRACE SEMI
    (51) statement -> . SET LT type GT ID ASSIGN LBRACE set_elements RBRACE SEMI
    (52) statement -> . SET LT type GT ID ASSIGN LBRACE RBRACE SEMI
    (67) statement -> . VOID ID LPAREN param_list RPAREN LBRACE statement RBRACE
    (68) statement -> . VOID ID LPAREN RPAREN LBRACE statement RBRACE
    (2) type -> . INT_TYPE
    (3) type -> . STRING_TYPE
    (4) type -> . BOOL_TYPE
    (5) type -> . DOUBLE_TYPE
    (6) type -> . ID

    CLASS           shift and go to state 4
    VAR             shift and go to state 7
    FINAL           shift and go to state 8
    NEWLINE         shift and go to state 9
    ID              shift and go to state 5
    IF              shift and go to state 10
    PRINT           shift and go to state 11
    LIST            shift and go to state 12
    WHILE           shift and go to state 13
    FOR             shift and go to state 14
    MAP             shift and go to state 15
    SET             shift and go to state 16
    VOID            shift and go to state 17
    INT_TYPE        shift and go to state 18
    STRING_TYPE     shift and go to state 19
    BOOL_TYPE       shift and go to state 20
    DOUBLE_TYPE     shift and go to state 21

    statement                      shift and go to state 156
    type                           shift and go to state 6

state 140

    (69) param_list -> param COMA . param_list
    (69) param_list -> . param COMA param_list
    (70) param_list -> . param
    (71) param -> . type ID
    (2) type -> . INT_TYPE
    (3) type -> . STRING_TYPE
    (4) type -> . BOOL_TYPE
    (5) type -> . DOUBLE_TYPE
    (6) type -> . ID

    INT_TYPE        shift and go to state 18
    STRING_TYPE     shift and go to state 19
    BOOL_TYPE       shift and go to state 20
    DOUBLE_TYPE     shift and go to state 21
    ID              shift and go to state 54

    param                          shift and go to state 99
    param_list                     shift and go to state 157
    type                           shift and go to state 100

state 141

    (71) param -> type ID .

    COMA            reduce using rule 71 (param -> type ID .)
    RPAREN          reduce using rule 71 (param -> type ID .)


state 142

    (11) statement -> ID ID ASSIGN NEW ID LPAREN . RPAREN SEMI

    RPAREN          shift and go to state 158


state 143

    (12) statement -> IF LPAREN expression RPAREN LBRACE statement . RBRACE
    (13) statement -> IF LPAREN expression RPAREN LBRACE statement . RBRACE ELSE LBRACE statement RBRACE

    RBRACE          shift and go to state 159


state 144

    (31) expression -> STDIN DOT READLINESYNC LPAREN . RPAREN

    RPAREN          shift and go to state 160


state 145

    (32) statement -> LIST LT type GT ID ASSIGN . LBRACKET RBRACKET SEMI
    (33) statement -> LIST LT type GT ID ASSIGN . LBRACKET group RBRACKET SEMI

    LBRACKET        shift and go to state 161


state 146

    (34) statement -> LIST ID ASSIGN LBRACKET group RBRACKET . SEMI

    SEMI            shift and go to state 162


state 147

    (35) group -> expression COMA . group
    (35) group -> . expression COMA group
    (36) group -> . expression
    (14) expression -> . INT
    (15) expression -> . expression PLUS expression
    (16) expression -> . expression MINUS expression
    (17) expression -> . expression TIMES expression
    (18) expression -> . expression DIVIDE expression
    (19) expression -> . STRING
    (20) expression -> . TRUE
    (21) expression -> . FALSE
    (22) expression -> . expression AND expression
    (23) expression -> . expression OR expression
    (24) expression -> . NOT expression
    (25) expression -> . expression EQ expression
    (26) expression -> . expression NEQ expression
    (27) expression -> . LPAREN expression RPAREN
    (28) expression -> . ID
    (29) expression -> . expression DOT ID
    (31) expression -> . STDIN DOT READLINESYNC LPAREN RPAREN
    (55) expression -> . DOUBLE
    (56) expression -> . expression PLUS DOUBLE
    (57) expression -> . expression MINUS DOUBLE
    (58) expression -> . expression TIMES DOUBLE
    (59) expression -> . expression DIVIDE DOUBLE
    (60) expression -> . DOUBLE PLUS expression
    (61) expression -> . DOUBLE MINUS expression
    (62) expression -> . DOUBLE TIMES expression
    (63) expression -> . DOUBLE DIVIDE expression

    INT             shift and go to state 44
    STRING          shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    NOT             shift and go to state 48
    LPAREN          shift and go to state 42
    ID              shift and go to state 49
    STDIN           shift and go to state 50
    DOUBLE          shift and go to state 51

    expression                     shift and go to state 130
    group                          shift and go to state 163

state 148

    (37) statement -> WHILE LPAREN expression RPAREN LBRACE statement . RBRACE

    RBRACE          shift and go to state 164


state 149

    (38) statement -> FOR LPAREN for_init SEMI expression SEMI . for_update RPAREN LBRACE statement RBRACE
    (43) for_update -> . ID PLUS PLUS
    (44) for_update -> . ID MINUS MINUS
    (45) for_update -> . ID ASSIGN expression

    ID              shift and go to state 166

    for_update                     shift and go to state 165

state 150

    (39) statement -> FOR LPAREN VAR ID IN expression . RPAREN LBRACE statement RBRACE
    (15) expression -> expression . PLUS expression
    (16) expression -> expression . MINUS expression
    (17) expression -> expression . TIMES expression
    (18) expression -> expression . DIVIDE expression
    (22) expression -> expression . AND expression
    (23) expression -> expression . OR expression
    (25) expression -> expression . EQ expression
    (26) expression -> expression . NEQ expression
    (29) expression -> expression . DOT ID
    (56) expression -> expression . PLUS DOUBLE
    (57) expression -> expression . MINUS DOUBLE
    (58) expression -> expression . TIMES DOUBLE
    (59) expression -> expression . DIVIDE DOUBLE

    RPAREN          shift and go to state 167
    PLUS            shift and go to state 73
    MINUS           shift and go to state 74
    TIMES           shift and go to state 75
    DIVIDE          shift and go to state 76
    AND             shift and go to state 77
    OR              shift and go to state 78
    EQ              shift and go to state 79
    NEQ             shift and go to state 80
    DOT             shift and go to state 81


state 151

    (40) for_init -> VAR ID ASSIGN expression .
    (15) expression -> expression . PLUS expression
    (16) expression -> expression . MINUS expression
    (17) expression -> expression . TIMES expression
    (18) expression -> expression . DIVIDE expression
    (22) expression -> expression . AND expression
    (23) expression -> expression . OR expression
    (25) expression -> expression . EQ expression
    (26) expression -> expression . NEQ expression
    (29) expression -> expression . DOT ID
    (56) expression -> expression . PLUS DOUBLE
    (57) expression -> expression . MINUS DOUBLE
    (58) expression -> expression . TIMES DOUBLE
    (59) expression -> expression . DIVIDE DOUBLE

    SEMI            reduce using rule 40 (for_init -> VAR ID ASSIGN expression .)
    PLUS            shift and go to state 73
    MINUS           shift and go to state 74
    TIMES           shift and go to state 75
    DIVIDE          shift and go to state 76
    AND             shift and go to state 77
    OR              shift and go to state 78
    EQ              shift and go to state 79
    NEQ             shift and go to state 80
    DOT             shift and go to state 81


state 152

    (41) for_init -> type ID ASSIGN expression .
    (15) expression -> expression . PLUS expression
    (16) expression -> expression . MINUS expression
    (17) expression -> expression . TIMES expression
    (18) expression -> expression . DIVIDE expression
    (22) expression -> expression . AND expression
    (23) expression -> expression . OR expression
    (25) expression -> expression . EQ expression
    (26) expression -> expression . NEQ expression
    (29) expression -> expression . DOT ID
    (56) expression -> expression . PLUS DOUBLE
    (57) expression -> expression . MINUS DOUBLE
    (58) expression -> expression . TIMES DOUBLE
    (59) expression -> expression . DIVIDE DOUBLE

    SEMI            reduce using rule 41 (for_init -> type ID ASSIGN expression .)
    PLUS            shift and go to state 73
    MINUS           shift and go to state 74
    TIMES           shift and go to state 75
    DIVIDE          shift and go to state 76
    AND             shift and go to state 77
    OR              shift and go to state 78
    EQ              shift and go to state 79
    NEQ             shift and go to state 80
    DOT             shift and go to state 81


state 153

    (46) statement -> MAP LT type COMA type GT . ID ASSIGN LBRACE map_entries RBRACE SEMI
    (47) statement -> MAP LT type COMA type GT . ID ASSIGN LBRACE RBRACE SEMI

    ID              shift and go to state 168


state 154

    (51) statement -> SET LT type GT ID ASSIGN . LBRACE set_elements RBRACE SEMI
    (52) statement -> SET LT type GT ID ASSIGN . LBRACE RBRACE SEMI

    LBRACE          shift and go to state 169


state 155

    (67) statement -> VOID ID LPAREN param_list RPAREN LBRACE . statement RBRACE
    (1) statement -> . CLASS ID LBRACE class_body RBRACE
    (7) statement -> . type ID ASSIGN expression SEMI
    (8) statement -> . VAR ID ASSIGN expression SEMI
    (9) statement -> . FINAL ID ASSIGN expression SEMI
    (10) statement -> . NEWLINE
    (11) statement -> . ID ID ASSIGN NEW ID LPAREN RPAREN SEMI
    (12) statement -> . IF LPAREN expression RPAREN LBRACE statement RBRACE
    (13) statement -> . IF LPAREN expression RPAREN LBRACE statement RBRACE ELSE LBRACE statement RBRACE
    (30) statement -> . PRINT LPAREN expression RPAREN SEMI
    (32) statement -> . LIST LT type GT ID ASSIGN LBRACKET RBRACKET SEMI
    (33) statement -> . LIST LT type GT ID ASSIGN LBRACKET group RBRACKET SEMI
    (34) statement -> . LIST ID ASSIGN LBRACKET group RBRACKET SEMI
    (37) statement -> . WHILE LPAREN expression RPAREN LBRACE statement RBRACE
    (38) statement -> . FOR LPAREN for_init SEMI expression SEMI for_update RPAREN LBRACE statement RBRACE
    (39) statement -> . FOR LPAREN VAR ID IN expression RPAREN LBRACE statement RBRACE
    (46) statement -> . MAP LT type COMA type GT ID ASSIGN LBRACE map_entries RBRACE SEMI
    (47) statement -> . MAP LT type COMA type GT ID ASSIGN LBRACE RBRACE SEMI
    (51) statement -> . SET LT type GT ID ASSIGN LBRACE set_elements RBRACE SEMI
    (52) statement -> . SET LT type GT ID ASSIGN LBRACE RBRACE SEMI
    (67) statement -> . VOID ID LPAREN param_list RPAREN LBRACE statement RBRACE
    (68) statement -> . VOID ID LPAREN RPAREN LBRACE statement RBRACE
    (2) type -> . INT_TYPE
    (3) type -> . STRING_TYPE
    (4) type -> . BOOL_TYPE
    (5) type -> . DOUBLE_TYPE
    (6) type -> . ID

    CLASS           shift and go to state 4
    VAR             shift and go to state 7
    FINAL           shift and go to state 8
    NEWLINE         shift and go to state 9
    ID              shift and go to state 5
    IF              shift and go to state 10
    PRINT           shift and go to state 11
    LIST            shift and go to state 12
    WHILE           shift and go to state 13
    FOR             shift and go to state 14
    MAP             shift and go to state 15
    SET             shift and go to state 16
    VOID            shift and go to state 17
    INT_TYPE        shift and go to state 18
    STRING_TYPE     shift and go to state 19
    BOOL_TYPE       shift and go to state 20
    DOUBLE_TYPE     shift and go to state 21

    statement                      shift and go to state 170
    type                           shift and go to state 6

state 156

    (68) statement -> VOID ID LPAREN RPAREN LBRACE statement . RBRACE

    RBRACE          shift and go to state 171


state 157

    (69) param_list -> param COMA param_list .

    RPAREN          reduce using rule 69 (param_list -> param COMA param_list .)


state 158

    (11) statement -> ID ID ASSIGN NEW ID LPAREN RPAREN . SEMI

    SEMI            shift and go to state 172


state 159

    (12) statement -> IF LPAREN expression RPAREN LBRACE statement RBRACE .
    (13) statement -> IF LPAREN expression RPAREN LBRACE statement RBRACE . ELSE LBRACE statement RBRACE

    CLASS           reduce using rule 12 (statement -> IF LPAREN expression RPAREN LBRACE statement RBRACE .)
    VAR             reduce using rule 12 (statement -> IF LPAREN expression RPAREN LBRACE statement RBRACE .)
    FINAL           reduce using rule 12 (statement -> IF LPAREN expression RPAREN LBRACE statement RBRACE .)
    NEWLINE         reduce using rule 12 (statement -> IF LPAREN expression RPAREN LBRACE statement RBRACE .)
    ID              reduce using rule 12 (statement -> IF LPAREN expression RPAREN LBRACE statement RBRACE .)
    IF              reduce using rule 12 (statement -> IF LPAREN expression RPAREN LBRACE statement RBRACE .)
    PRINT           reduce using rule 12 (statement -> IF LPAREN expression RPAREN LBRACE statement RBRACE .)
    LIST            reduce using rule 12 (statement -> IF LPAREN expression RPAREN LBRACE statement RBRACE .)
    WHILE           reduce using rule 12 (statement -> IF LPAREN expression RPAREN LBRACE statement RBRACE .)
    FOR             reduce using rule 12 (statement -> IF LPAREN expression RPAREN LBRACE statement RBRACE .)
    MAP             reduce using rule 12 (statement -> IF LPAREN expression RPAREN LBRACE statement RBRACE .)
    SET             reduce using rule 12 (statement -> IF LPAREN expression RPAREN LBRACE statement RBRACE .)
    VOID            reduce using rule 12 (statement -> IF LPAREN expression RPAREN LBRACE statement RBRACE .)
    INT_TYPE        reduce using rule 12 (statement -> IF LPAREN expression RPAREN LBRACE statement RBRACE .)
    STRING_TYPE     reduce using rule 12 (statement -> IF LPAREN expression RPAREN LBRACE statement RBRACE .)
    BOOL_TYPE       reduce using rule 12 (statement -> IF LPAREN expression RPAREN LBRACE statement RBRACE .)
    DOUBLE_TYPE     reduce using rule 12 (statement -> IF LPAREN expression RPAREN LBRACE statement RBRACE .)
    $end            reduce using rule 12 (statement -> IF LPAREN expression RPAREN LBRACE statement RBRACE .)
    RBRACE          reduce using rule 12 (statement -> IF LPAREN expression RPAREN LBRACE statement RBRACE .)
    ELSE            shift and go to state 173


state 160

    (31) expression -> STDIN DOT READLINESYNC LPAREN RPAREN .

    RPAREN          reduce using rule 31 (expression -> STDIN DOT READLINESYNC LPAREN RPAREN .)
    PLUS            reduce using rule 31 (expression -> STDIN DOT READLINESYNC LPAREN RPAREN .)
    MINUS           reduce using rule 31 (expression -> STDIN DOT READLINESYNC LPAREN RPAREN .)
    TIMES           reduce using rule 31 (expression -> STDIN DOT READLINESYNC LPAREN RPAREN .)
    DIVIDE          reduce using rule 31 (expression -> STDIN DOT READLINESYNC LPAREN RPAREN .)
    AND             reduce using rule 31 (expression -> STDIN DOT READLINESYNC LPAREN RPAREN .)
    OR              reduce using rule 31 (expression -> STDIN DOT READLINESYNC LPAREN RPAREN .)
    EQ              reduce using rule 31 (expression -> STDIN DOT READLINESYNC LPAREN RPAREN .)
    NEQ             reduce using rule 31 (expression -> STDIN DOT READLINESYNC LPAREN RPAREN .)
    DOT             reduce using rule 31 (expression -> STDIN DOT READLINESYNC LPAREN RPAREN .)
    SEMI            reduce using rule 31 (expression -> STDIN DOT READLINESYNC LPAREN RPAREN .)
    COMA            reduce using rule 31 (expression -> STDIN DOT READLINESYNC LPAREN RPAREN .)
    RBRACKET        reduce using rule 31 (expression -> STDIN DOT READLINESYNC LPAREN RPAREN .)
    RBRACE          reduce using rule 31 (expression -> STDIN DOT READLINESYNC LPAREN RPAREN .)
    COLON           reduce using rule 31 (expression -> STDIN DOT READLINESYNC LPAREN RPAREN .)


state 161

    (32) statement -> LIST LT type GT ID ASSIGN LBRACKET . RBRACKET SEMI
    (33) statement -> LIST LT type GT ID ASSIGN LBRACKET . group RBRACKET SEMI
    (35) group -> . expression COMA group
    (36) group -> . expression
    (14) expression -> . INT
    (15) expression -> . expression PLUS expression
    (16) expression -> . expression MINUS expression
    (17) expression -> . expression TIMES expression
    (18) expression -> . expression DIVIDE expression
    (19) expression -> . STRING
    (20) expression -> . TRUE
    (21) expression -> . FALSE
    (22) expression -> . expression AND expression
    (23) expression -> . expression OR expression
    (24) expression -> . NOT expression
    (25) expression -> . expression EQ expression
    (26) expression -> . expression NEQ expression
    (27) expression -> . LPAREN expression RPAREN
    (28) expression -> . ID
    (29) expression -> . expression DOT ID
    (31) expression -> . STDIN DOT READLINESYNC LPAREN RPAREN
    (55) expression -> . DOUBLE
    (56) expression -> . expression PLUS DOUBLE
    (57) expression -> . expression MINUS DOUBLE
    (58) expression -> . expression TIMES DOUBLE
    (59) expression -> . expression DIVIDE DOUBLE
    (60) expression -> . DOUBLE PLUS expression
    (61) expression -> . DOUBLE MINUS expression
    (62) expression -> . DOUBLE TIMES expression
    (63) expression -> . DOUBLE DIVIDE expression

    RBRACKET        shift and go to state 174
    INT             shift and go to state 44
    STRING          shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    NOT             shift and go to state 48
    LPAREN          shift and go to state 42
    ID              shift and go to state 49
    STDIN           shift and go to state 50
    DOUBLE          shift and go to state 51

    group                          shift and go to state 175
    expression                     shift and go to state 130

state 162

    (34) statement -> LIST ID ASSIGN LBRACKET group RBRACKET SEMI .

    CLASS           reduce using rule 34 (statement -> LIST ID ASSIGN LBRACKET group RBRACKET SEMI .)
    VAR             reduce using rule 34 (statement -> LIST ID ASSIGN LBRACKET group RBRACKET SEMI .)
    FINAL           reduce using rule 34 (statement -> LIST ID ASSIGN LBRACKET group RBRACKET SEMI .)
    NEWLINE         reduce using rule 34 (statement -> LIST ID ASSIGN LBRACKET group RBRACKET SEMI .)
    ID              reduce using rule 34 (statement -> LIST ID ASSIGN LBRACKET group RBRACKET SEMI .)
    IF              reduce using rule 34 (statement -> LIST ID ASSIGN LBRACKET group RBRACKET SEMI .)
    PRINT           reduce using rule 34 (statement -> LIST ID ASSIGN LBRACKET group RBRACKET SEMI .)
    LIST            reduce using rule 34 (statement -> LIST ID ASSIGN LBRACKET group RBRACKET SEMI .)
    WHILE           reduce using rule 34 (statement -> LIST ID ASSIGN LBRACKET group RBRACKET SEMI .)
    FOR             reduce using rule 34 (statement -> LIST ID ASSIGN LBRACKET group RBRACKET SEMI .)
    MAP             reduce using rule 34 (statement -> LIST ID ASSIGN LBRACKET group RBRACKET SEMI .)
    SET             reduce using rule 34 (statement -> LIST ID ASSIGN LBRACKET group RBRACKET SEMI .)
    VOID            reduce using rule 34 (statement -> LIST ID ASSIGN LBRACKET group RBRACKET SEMI .)
    INT_TYPE        reduce using rule 34 (statement -> LIST ID ASSIGN LBRACKET group RBRACKET SEMI .)
    STRING_TYPE     reduce using rule 34 (statement -> LIST ID ASSIGN LBRACKET group RBRACKET SEMI .)
    BOOL_TYPE       reduce using rule 34 (statement -> LIST ID ASSIGN LBRACKET group RBRACKET SEMI .)
    DOUBLE_TYPE     reduce using rule 34 (statement -> LIST ID ASSIGN LBRACKET group RBRACKET SEMI .)
    $end            reduce using rule 34 (statement -> LIST ID ASSIGN LBRACKET group RBRACKET SEMI .)
    RBRACE          reduce using rule 34 (statement -> LIST ID ASSIGN LBRACKET group RBRACKET SEMI .)


state 163

    (35) group -> expression COMA group .

    RBRACKET        reduce using rule 35 (group -> expression COMA group .)


state 164

    (37) statement -> WHILE LPAREN expression RPAREN LBRACE statement RBRACE .

    CLASS           reduce using rule 37 (statement -> WHILE LPAREN expression RPAREN LBRACE statement RBRACE .)
    VAR             reduce using rule 37 (statement -> WHILE LPAREN expression RPAREN LBRACE statement RBRACE .)
    FINAL           reduce using rule 37 (statement -> WHILE LPAREN expression RPAREN LBRACE statement RBRACE .)
    NEWLINE         reduce using rule 37 (statement -> WHILE LPAREN expression RPAREN LBRACE statement RBRACE .)
    ID              reduce using rule 37 (statement -> WHILE LPAREN expression RPAREN LBRACE statement RBRACE .)
    IF              reduce using rule 37 (statement -> WHILE LPAREN expression RPAREN LBRACE statement RBRACE .)
    PRINT           reduce using rule 37 (statement -> WHILE LPAREN expression RPAREN LBRACE statement RBRACE .)
    LIST            reduce using rule 37 (statement -> WHILE LPAREN expression RPAREN LBRACE statement RBRACE .)
    WHILE           reduce using rule 37 (statement -> WHILE LPAREN expression RPAREN LBRACE statement RBRACE .)
    FOR             reduce using rule 37 (statement -> WHILE LPAREN expression RPAREN LBRACE statement RBRACE .)
    MAP             reduce using rule 37 (statement -> WHILE LPAREN expression RPAREN LBRACE statement RBRACE .)
    SET             reduce using rule 37 (statement -> WHILE LPAREN expression RPAREN LBRACE statement RBRACE .)
    VOID            reduce using rule 37 (statement -> WHILE LPAREN expression RPAREN LBRACE statement RBRACE .)
    INT_TYPE        reduce using rule 37 (statement -> WHILE LPAREN expression RPAREN LBRACE statement RBRACE .)
    STRING_TYPE     reduce using rule 37 (statement -> WHILE LPAREN expression RPAREN LBRACE statement RBRACE .)
    BOOL_TYPE       reduce using rule 37 (statement -> WHILE LPAREN expression RPAREN LBRACE statement RBRACE .)
    DOUBLE_TYPE     reduce using rule 37 (statement -> WHILE LPAREN expression RPAREN LBRACE statement RBRACE .)
    $end            reduce using rule 37 (statement -> WHILE LPAREN expression RPAREN LBRACE statement RBRACE .)
    RBRACE          reduce using rule 37 (statement -> WHILE LPAREN expression RPAREN LBRACE statement RBRACE .)


state 165

    (38) statement -> FOR LPAREN for_init SEMI expression SEMI for_update . RPAREN LBRACE statement RBRACE

    RPAREN          shift and go to state 176


state 166

    (43) for_update -> ID . PLUS PLUS
    (44) for_update -> ID . MINUS MINUS
    (45) for_update -> ID . ASSIGN expression

    PLUS            shift and go to state 177
    MINUS           shift and go to state 178
    ASSIGN          shift and go to state 179


state 167

    (39) statement -> FOR LPAREN VAR ID IN expression RPAREN . LBRACE statement RBRACE

    LBRACE          shift and go to state 180


state 168

    (46) statement -> MAP LT type COMA type GT ID . ASSIGN LBRACE map_entries RBRACE SEMI
    (47) statement -> MAP LT type COMA type GT ID . ASSIGN LBRACE RBRACE SEMI

    ASSIGN          shift and go to state 181


state 169

    (51) statement -> SET LT type GT ID ASSIGN LBRACE . set_elements RBRACE SEMI
    (52) statement -> SET LT type GT ID ASSIGN LBRACE . RBRACE SEMI
    (53) set_elements -> . expression COMA set_elements
    (54) set_elements -> . expression
    (14) expression -> . INT
    (15) expression -> . expression PLUS expression
    (16) expression -> . expression MINUS expression
    (17) expression -> . expression TIMES expression
    (18) expression -> . expression DIVIDE expression
    (19) expression -> . STRING
    (20) expression -> . TRUE
    (21) expression -> . FALSE
    (22) expression -> . expression AND expression
    (23) expression -> . expression OR expression
    (24) expression -> . NOT expression
    (25) expression -> . expression EQ expression
    (26) expression -> . expression NEQ expression
    (27) expression -> . LPAREN expression RPAREN
    (28) expression -> . ID
    (29) expression -> . expression DOT ID
    (31) expression -> . STDIN DOT READLINESYNC LPAREN RPAREN
    (55) expression -> . DOUBLE
    (56) expression -> . expression PLUS DOUBLE
    (57) expression -> . expression MINUS DOUBLE
    (58) expression -> . expression TIMES DOUBLE
    (59) expression -> . expression DIVIDE DOUBLE
    (60) expression -> . DOUBLE PLUS expression
    (61) expression -> . DOUBLE MINUS expression
    (62) expression -> . DOUBLE TIMES expression
    (63) expression -> . DOUBLE DIVIDE expression

    RBRACE          shift and go to state 183
    INT             shift and go to state 44
    STRING          shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    NOT             shift and go to state 48
    LPAREN          shift and go to state 42
    ID              shift and go to state 49
    STDIN           shift and go to state 50
    DOUBLE          shift and go to state 51

    set_elements                   shift and go to state 182
    expression                     shift and go to state 184

state 170

    (67) statement -> VOID ID LPAREN param_list RPAREN LBRACE statement . RBRACE

    RBRACE          shift and go to state 185


state 171

    (68) statement -> VOID ID LPAREN RPAREN LBRACE statement RBRACE .

    CLASS           reduce using rule 68 (statement -> VOID ID LPAREN RPAREN LBRACE statement RBRACE .)
    VAR             reduce using rule 68 (statement -> VOID ID LPAREN RPAREN LBRACE statement RBRACE .)
    FINAL           reduce using rule 68 (statement -> VOID ID LPAREN RPAREN LBRACE statement RBRACE .)
    NEWLINE         reduce using rule 68 (statement -> VOID ID LPAREN RPAREN LBRACE statement RBRACE .)
    ID              reduce using rule 68 (statement -> VOID ID LPAREN RPAREN LBRACE statement RBRACE .)
    IF              reduce using rule 68 (statement -> VOID ID LPAREN RPAREN LBRACE statement RBRACE .)
    PRINT           reduce using rule 68 (statement -> VOID ID LPAREN RPAREN LBRACE statement RBRACE .)
    LIST            reduce using rule 68 (statement -> VOID ID LPAREN RPAREN LBRACE statement RBRACE .)
    WHILE           reduce using rule 68 (statement -> VOID ID LPAREN RPAREN LBRACE statement RBRACE .)
    FOR             reduce using rule 68 (statement -> VOID ID LPAREN RPAREN LBRACE statement RBRACE .)
    MAP             reduce using rule 68 (statement -> VOID ID LPAREN RPAREN LBRACE statement RBRACE .)
    SET             reduce using rule 68 (statement -> VOID ID LPAREN RPAREN LBRACE statement RBRACE .)
    VOID            reduce using rule 68 (statement -> VOID ID LPAREN RPAREN LBRACE statement RBRACE .)
    INT_TYPE        reduce using rule 68 (statement -> VOID ID LPAREN RPAREN LBRACE statement RBRACE .)
    STRING_TYPE     reduce using rule 68 (statement -> VOID ID LPAREN RPAREN LBRACE statement RBRACE .)
    BOOL_TYPE       reduce using rule 68 (statement -> VOID ID LPAREN RPAREN LBRACE statement RBRACE .)
    DOUBLE_TYPE     reduce using rule 68 (statement -> VOID ID LPAREN RPAREN LBRACE statement RBRACE .)
    $end            reduce using rule 68 (statement -> VOID ID LPAREN RPAREN LBRACE statement RBRACE .)
    RBRACE          reduce using rule 68 (statement -> VOID ID LPAREN RPAREN LBRACE statement RBRACE .)


state 172

    (11) statement -> ID ID ASSIGN NEW ID LPAREN RPAREN SEMI .

    CLASS           reduce using rule 11 (statement -> ID ID ASSIGN NEW ID LPAREN RPAREN SEMI .)
    VAR             reduce using rule 11 (statement -> ID ID ASSIGN NEW ID LPAREN RPAREN SEMI .)
    FINAL           reduce using rule 11 (statement -> ID ID ASSIGN NEW ID LPAREN RPAREN SEMI .)
    NEWLINE         reduce using rule 11 (statement -> ID ID ASSIGN NEW ID LPAREN RPAREN SEMI .)
    ID              reduce using rule 11 (statement -> ID ID ASSIGN NEW ID LPAREN RPAREN SEMI .)
    IF              reduce using rule 11 (statement -> ID ID ASSIGN NEW ID LPAREN RPAREN SEMI .)
    PRINT           reduce using rule 11 (statement -> ID ID ASSIGN NEW ID LPAREN RPAREN SEMI .)
    LIST            reduce using rule 11 (statement -> ID ID ASSIGN NEW ID LPAREN RPAREN SEMI .)
    WHILE           reduce using rule 11 (statement -> ID ID ASSIGN NEW ID LPAREN RPAREN SEMI .)
    FOR             reduce using rule 11 (statement -> ID ID ASSIGN NEW ID LPAREN RPAREN SEMI .)
    MAP             reduce using rule 11 (statement -> ID ID ASSIGN NEW ID LPAREN RPAREN SEMI .)
    SET             reduce using rule 11 (statement -> ID ID ASSIGN NEW ID LPAREN RPAREN SEMI .)
    VOID            reduce using rule 11 (statement -> ID ID ASSIGN NEW ID LPAREN RPAREN SEMI .)
    INT_TYPE        reduce using rule 11 (statement -> ID ID ASSIGN NEW ID LPAREN RPAREN SEMI .)
    STRING_TYPE     reduce using rule 11 (statement -> ID ID ASSIGN NEW ID LPAREN RPAREN SEMI .)
    BOOL_TYPE       reduce using rule 11 (statement -> ID ID ASSIGN NEW ID LPAREN RPAREN SEMI .)
    DOUBLE_TYPE     reduce using rule 11 (statement -> ID ID ASSIGN NEW ID LPAREN RPAREN SEMI .)
    $end            reduce using rule 11 (statement -> ID ID ASSIGN NEW ID LPAREN RPAREN SEMI .)
    RBRACE          reduce using rule 11 (statement -> ID ID ASSIGN NEW ID LPAREN RPAREN SEMI .)


state 173

    (13) statement -> IF LPAREN expression RPAREN LBRACE statement RBRACE ELSE . LBRACE statement RBRACE

    LBRACE          shift and go to state 186


state 174

    (32) statement -> LIST LT type GT ID ASSIGN LBRACKET RBRACKET . SEMI

    SEMI            shift and go to state 187


state 175

    (33) statement -> LIST LT type GT ID ASSIGN LBRACKET group . RBRACKET SEMI

    RBRACKET        shift and go to state 188


state 176

    (38) statement -> FOR LPAREN for_init SEMI expression SEMI for_update RPAREN . LBRACE statement RBRACE

    LBRACE          shift and go to state 189


state 177

    (43) for_update -> ID PLUS . PLUS

    PLUS            shift and go to state 190


state 178

    (44) for_update -> ID MINUS . MINUS

    MINUS           shift and go to state 191


state 179

    (45) for_update -> ID ASSIGN . expression
    (14) expression -> . INT
    (15) expression -> . expression PLUS expression
    (16) expression -> . expression MINUS expression
    (17) expression -> . expression TIMES expression
    (18) expression -> . expression DIVIDE expression
    (19) expression -> . STRING
    (20) expression -> . TRUE
    (21) expression -> . FALSE
    (22) expression -> . expression AND expression
    (23) expression -> . expression OR expression
    (24) expression -> . NOT expression
    (25) expression -> . expression EQ expression
    (26) expression -> . expression NEQ expression
    (27) expression -> . LPAREN expression RPAREN
    (28) expression -> . ID
    (29) expression -> . expression DOT ID
    (31) expression -> . STDIN DOT READLINESYNC LPAREN RPAREN
    (55) expression -> . DOUBLE
    (56) expression -> . expression PLUS DOUBLE
    (57) expression -> . expression MINUS DOUBLE
    (58) expression -> . expression TIMES DOUBLE
    (59) expression -> . expression DIVIDE DOUBLE
    (60) expression -> . DOUBLE PLUS expression
    (61) expression -> . DOUBLE MINUS expression
    (62) expression -> . DOUBLE TIMES expression
    (63) expression -> . DOUBLE DIVIDE expression

    INT             shift and go to state 44
    STRING          shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    NOT             shift and go to state 48
    LPAREN          shift and go to state 42
    ID              shift and go to state 49
    STDIN           shift and go to state 50
    DOUBLE          shift and go to state 51

    expression                     shift and go to state 192

state 180

    (39) statement -> FOR LPAREN VAR ID IN expression RPAREN LBRACE . statement RBRACE
    (1) statement -> . CLASS ID LBRACE class_body RBRACE
    (7) statement -> . type ID ASSIGN expression SEMI
    (8) statement -> . VAR ID ASSIGN expression SEMI
    (9) statement -> . FINAL ID ASSIGN expression SEMI
    (10) statement -> . NEWLINE
    (11) statement -> . ID ID ASSIGN NEW ID LPAREN RPAREN SEMI
    (12) statement -> . IF LPAREN expression RPAREN LBRACE statement RBRACE
    (13) statement -> . IF LPAREN expression RPAREN LBRACE statement RBRACE ELSE LBRACE statement RBRACE
    (30) statement -> . PRINT LPAREN expression RPAREN SEMI
    (32) statement -> . LIST LT type GT ID ASSIGN LBRACKET RBRACKET SEMI
    (33) statement -> . LIST LT type GT ID ASSIGN LBRACKET group RBRACKET SEMI
    (34) statement -> . LIST ID ASSIGN LBRACKET group RBRACKET SEMI
    (37) statement -> . WHILE LPAREN expression RPAREN LBRACE statement RBRACE
    (38) statement -> . FOR LPAREN for_init SEMI expression SEMI for_update RPAREN LBRACE statement RBRACE
    (39) statement -> . FOR LPAREN VAR ID IN expression RPAREN LBRACE statement RBRACE
    (46) statement -> . MAP LT type COMA type GT ID ASSIGN LBRACE map_entries RBRACE SEMI
    (47) statement -> . MAP LT type COMA type GT ID ASSIGN LBRACE RBRACE SEMI
    (51) statement -> . SET LT type GT ID ASSIGN LBRACE set_elements RBRACE SEMI
    (52) statement -> . SET LT type GT ID ASSIGN LBRACE RBRACE SEMI
    (67) statement -> . VOID ID LPAREN param_list RPAREN LBRACE statement RBRACE
    (68) statement -> . VOID ID LPAREN RPAREN LBRACE statement RBRACE
    (2) type -> . INT_TYPE
    (3) type -> . STRING_TYPE
    (4) type -> . BOOL_TYPE
    (5) type -> . DOUBLE_TYPE
    (6) type -> . ID

    CLASS           shift and go to state 4
    VAR             shift and go to state 7
    FINAL           shift and go to state 8
    NEWLINE         shift and go to state 9
    ID              shift and go to state 5
    IF              shift and go to state 10
    PRINT           shift and go to state 11
    LIST            shift and go to state 12
    WHILE           shift and go to state 13
    FOR             shift and go to state 14
    MAP             shift and go to state 15
    SET             shift and go to state 16
    VOID            shift and go to state 17
    INT_TYPE        shift and go to state 18
    STRING_TYPE     shift and go to state 19
    BOOL_TYPE       shift and go to state 20
    DOUBLE_TYPE     shift and go to state 21

    statement                      shift and go to state 193
    type                           shift and go to state 6

state 181

    (46) statement -> MAP LT type COMA type GT ID ASSIGN . LBRACE map_entries RBRACE SEMI
    (47) statement -> MAP LT type COMA type GT ID ASSIGN . LBRACE RBRACE SEMI

    LBRACE          shift and go to state 194


state 182

    (51) statement -> SET LT type GT ID ASSIGN LBRACE set_elements . RBRACE SEMI

    RBRACE          shift and go to state 195


state 183

    (52) statement -> SET LT type GT ID ASSIGN LBRACE RBRACE . SEMI

    SEMI            shift and go to state 196


state 184

    (53) set_elements -> expression . COMA set_elements
    (54) set_elements -> expression .
    (15) expression -> expression . PLUS expression
    (16) expression -> expression . MINUS expression
    (17) expression -> expression . TIMES expression
    (18) expression -> expression . DIVIDE expression
    (22) expression -> expression . AND expression
    (23) expression -> expression . OR expression
    (25) expression -> expression . EQ expression
    (26) expression -> expression . NEQ expression
    (29) expression -> expression . DOT ID
    (56) expression -> expression . PLUS DOUBLE
    (57) expression -> expression . MINUS DOUBLE
    (58) expression -> expression . TIMES DOUBLE
    (59) expression -> expression . DIVIDE DOUBLE

    COMA            shift and go to state 197
    RBRACE          reduce using rule 54 (set_elements -> expression .)
    PLUS            shift and go to state 73
    MINUS           shift and go to state 74
    TIMES           shift and go to state 75
    DIVIDE          shift and go to state 76
    AND             shift and go to state 77
    OR              shift and go to state 78
    EQ              shift and go to state 79
    NEQ             shift and go to state 80
    DOT             shift and go to state 81


state 185

    (67) statement -> VOID ID LPAREN param_list RPAREN LBRACE statement RBRACE .

    CLASS           reduce using rule 67 (statement -> VOID ID LPAREN param_list RPAREN LBRACE statement RBRACE .)
    VAR             reduce using rule 67 (statement -> VOID ID LPAREN param_list RPAREN LBRACE statement RBRACE .)
    FINAL           reduce using rule 67 (statement -> VOID ID LPAREN param_list RPAREN LBRACE statement RBRACE .)
    NEWLINE         reduce using rule 67 (statement -> VOID ID LPAREN param_list RPAREN LBRACE statement RBRACE .)
    ID              reduce using rule 67 (statement -> VOID ID LPAREN param_list RPAREN LBRACE statement RBRACE .)
    IF              reduce using rule 67 (statement -> VOID ID LPAREN param_list RPAREN LBRACE statement RBRACE .)
    PRINT           reduce using rule 67 (statement -> VOID ID LPAREN param_list RPAREN LBRACE statement RBRACE .)
    LIST            reduce using rule 67 (statement -> VOID ID LPAREN param_list RPAREN LBRACE statement RBRACE .)
    WHILE           reduce using rule 67 (statement -> VOID ID LPAREN param_list RPAREN LBRACE statement RBRACE .)
    FOR             reduce using rule 67 (statement -> VOID ID LPAREN param_list RPAREN LBRACE statement RBRACE .)
    MAP             reduce using rule 67 (statement -> VOID ID LPAREN param_list RPAREN LBRACE statement RBRACE .)
    SET             reduce using rule 67 (statement -> VOID ID LPAREN param_list RPAREN LBRACE statement RBRACE .)
    VOID            reduce using rule 67 (statement -> VOID ID LPAREN param_list RPAREN LBRACE statement RBRACE .)
    INT_TYPE        reduce using rule 67 (statement -> VOID ID LPAREN param_list RPAREN LBRACE statement RBRACE .)
    STRING_TYPE     reduce using rule 67 (statement -> VOID ID LPAREN param_list RPAREN LBRACE statement RBRACE .)
    BOOL_TYPE       reduce using rule 67 (statement -> VOID ID LPAREN param_list RPAREN LBRACE statement RBRACE .)
    DOUBLE_TYPE     reduce using rule 67 (statement -> VOID ID LPAREN param_list RPAREN LBRACE statement RBRACE .)
    $end            reduce using rule 67 (statement -> VOID ID LPAREN param_list RPAREN LBRACE statement RBRACE .)
    RBRACE          reduce using rule 67 (statement -> VOID ID LPAREN param_list RPAREN LBRACE statement RBRACE .)


state 186

    (13) statement -> IF LPAREN expression RPAREN LBRACE statement RBRACE ELSE LBRACE . statement RBRACE
    (1) statement -> . CLASS ID LBRACE class_body RBRACE
    (7) statement -> . type ID ASSIGN expression SEMI
    (8) statement -> . VAR ID ASSIGN expression SEMI
    (9) statement -> . FINAL ID ASSIGN expression SEMI
    (10) statement -> . NEWLINE
    (11) statement -> . ID ID ASSIGN NEW ID LPAREN RPAREN SEMI
    (12) statement -> . IF LPAREN expression RPAREN LBRACE statement RBRACE
    (13) statement -> . IF LPAREN expression RPAREN LBRACE statement RBRACE ELSE LBRACE statement RBRACE
    (30) statement -> . PRINT LPAREN expression RPAREN SEMI
    (32) statement -> . LIST LT type GT ID ASSIGN LBRACKET RBRACKET SEMI
    (33) statement -> . LIST LT type GT ID ASSIGN LBRACKET group RBRACKET SEMI
    (34) statement -> . LIST ID ASSIGN LBRACKET group RBRACKET SEMI
    (37) statement -> . WHILE LPAREN expression RPAREN LBRACE statement RBRACE
    (38) statement -> . FOR LPAREN for_init SEMI expression SEMI for_update RPAREN LBRACE statement RBRACE
    (39) statement -> . FOR LPAREN VAR ID IN expression RPAREN LBRACE statement RBRACE
    (46) statement -> . MAP LT type COMA type GT ID ASSIGN LBRACE map_entries RBRACE SEMI
    (47) statement -> . MAP LT type COMA type GT ID ASSIGN LBRACE RBRACE SEMI
    (51) statement -> . SET LT type GT ID ASSIGN LBRACE set_elements RBRACE SEMI
    (52) statement -> . SET LT type GT ID ASSIGN LBRACE RBRACE SEMI
    (67) statement -> . VOID ID LPAREN param_list RPAREN LBRACE statement RBRACE
    (68) statement -> . VOID ID LPAREN RPAREN LBRACE statement RBRACE
    (2) type -> . INT_TYPE
    (3) type -> . STRING_TYPE
    (4) type -> . BOOL_TYPE
    (5) type -> . DOUBLE_TYPE
    (6) type -> . ID

    CLASS           shift and go to state 4
    VAR             shift and go to state 7
    FINAL           shift and go to state 8
    NEWLINE         shift and go to state 9
    ID              shift and go to state 5
    IF              shift and go to state 10
    PRINT           shift and go to state 11
    LIST            shift and go to state 12
    WHILE           shift and go to state 13
    FOR             shift and go to state 14
    MAP             shift and go to state 15
    SET             shift and go to state 16
    VOID            shift and go to state 17
    INT_TYPE        shift and go to state 18
    STRING_TYPE     shift and go to state 19
    BOOL_TYPE       shift and go to state 20
    DOUBLE_TYPE     shift and go to state 21

    statement                      shift and go to state 198
    type                           shift and go to state 6

state 187

    (32) statement -> LIST LT type GT ID ASSIGN LBRACKET RBRACKET SEMI .

    CLASS           reduce using rule 32 (statement -> LIST LT type GT ID ASSIGN LBRACKET RBRACKET SEMI .)
    VAR             reduce using rule 32 (statement -> LIST LT type GT ID ASSIGN LBRACKET RBRACKET SEMI .)
    FINAL           reduce using rule 32 (statement -> LIST LT type GT ID ASSIGN LBRACKET RBRACKET SEMI .)
    NEWLINE         reduce using rule 32 (statement -> LIST LT type GT ID ASSIGN LBRACKET RBRACKET SEMI .)
    ID              reduce using rule 32 (statement -> LIST LT type GT ID ASSIGN LBRACKET RBRACKET SEMI .)
    IF              reduce using rule 32 (statement -> LIST LT type GT ID ASSIGN LBRACKET RBRACKET SEMI .)
    PRINT           reduce using rule 32 (statement -> LIST LT type GT ID ASSIGN LBRACKET RBRACKET SEMI .)
    LIST            reduce using rule 32 (statement -> LIST LT type GT ID ASSIGN LBRACKET RBRACKET SEMI .)
    WHILE           reduce using rule 32 (statement -> LIST LT type GT ID ASSIGN LBRACKET RBRACKET SEMI .)
    FOR             reduce using rule 32 (statement -> LIST LT type GT ID ASSIGN LBRACKET RBRACKET SEMI .)
    MAP             reduce using rule 32 (statement -> LIST LT type GT ID ASSIGN LBRACKET RBRACKET SEMI .)
    SET             reduce using rule 32 (statement -> LIST LT type GT ID ASSIGN LBRACKET RBRACKET SEMI .)
    VOID            reduce using rule 32 (statement -> LIST LT type GT ID ASSIGN LBRACKET RBRACKET SEMI .)
    INT_TYPE        reduce using rule 32 (statement -> LIST LT type GT ID ASSIGN LBRACKET RBRACKET SEMI .)
    STRING_TYPE     reduce using rule 32 (statement -> LIST LT type GT ID ASSIGN LBRACKET RBRACKET SEMI .)
    BOOL_TYPE       reduce using rule 32 (statement -> LIST LT type GT ID ASSIGN LBRACKET RBRACKET SEMI .)
    DOUBLE_TYPE     reduce using rule 32 (statement -> LIST LT type GT ID ASSIGN LBRACKET RBRACKET SEMI .)
    $end            reduce using rule 32 (statement -> LIST LT type GT ID ASSIGN LBRACKET RBRACKET SEMI .)
    RBRACE          reduce using rule 32 (statement -> LIST LT type GT ID ASSIGN LBRACKET RBRACKET SEMI .)


state 188

    (33) statement -> LIST LT type GT ID ASSIGN LBRACKET group RBRACKET . SEMI

    SEMI            shift and go to state 199


state 189

    (38) statement -> FOR LPAREN for_init SEMI expression SEMI for_update RPAREN LBRACE . statement RBRACE
    (1) statement -> . CLASS ID LBRACE class_body RBRACE
    (7) statement -> . type ID ASSIGN expression SEMI
    (8) statement -> . VAR ID ASSIGN expression SEMI
    (9) statement -> . FINAL ID ASSIGN expression SEMI
    (10) statement -> . NEWLINE
    (11) statement -> . ID ID ASSIGN NEW ID LPAREN RPAREN SEMI
    (12) statement -> . IF LPAREN expression RPAREN LBRACE statement RBRACE
    (13) statement -> . IF LPAREN expression RPAREN LBRACE statement RBRACE ELSE LBRACE statement RBRACE
    (30) statement -> . PRINT LPAREN expression RPAREN SEMI
    (32) statement -> . LIST LT type GT ID ASSIGN LBRACKET RBRACKET SEMI
    (33) statement -> . LIST LT type GT ID ASSIGN LBRACKET group RBRACKET SEMI
    (34) statement -> . LIST ID ASSIGN LBRACKET group RBRACKET SEMI
    (37) statement -> . WHILE LPAREN expression RPAREN LBRACE statement RBRACE
    (38) statement -> . FOR LPAREN for_init SEMI expression SEMI for_update RPAREN LBRACE statement RBRACE
    (39) statement -> . FOR LPAREN VAR ID IN expression RPAREN LBRACE statement RBRACE
    (46) statement -> . MAP LT type COMA type GT ID ASSIGN LBRACE map_entries RBRACE SEMI
    (47) statement -> . MAP LT type COMA type GT ID ASSIGN LBRACE RBRACE SEMI
    (51) statement -> . SET LT type GT ID ASSIGN LBRACE set_elements RBRACE SEMI
    (52) statement -> . SET LT type GT ID ASSIGN LBRACE RBRACE SEMI
    (67) statement -> . VOID ID LPAREN param_list RPAREN LBRACE statement RBRACE
    (68) statement -> . VOID ID LPAREN RPAREN LBRACE statement RBRACE
    (2) type -> . INT_TYPE
    (3) type -> . STRING_TYPE
    (4) type -> . BOOL_TYPE
    (5) type -> . DOUBLE_TYPE
    (6) type -> . ID

    CLASS           shift and go to state 4
    VAR             shift and go to state 7
    FINAL           shift and go to state 8
    NEWLINE         shift and go to state 9
    ID              shift and go to state 5
    IF              shift and go to state 10
    PRINT           shift and go to state 11
    LIST            shift and go to state 12
    WHILE           shift and go to state 13
    FOR             shift and go to state 14
    MAP             shift and go to state 15
    SET             shift and go to state 16
    VOID            shift and go to state 17
    INT_TYPE        shift and go to state 18
    STRING_TYPE     shift and go to state 19
    BOOL_TYPE       shift and go to state 20
    DOUBLE_TYPE     shift and go to state 21

    statement                      shift and go to state 200
    type                           shift and go to state 6

state 190

    (43) for_update -> ID PLUS PLUS .

    RPAREN          reduce using rule 43 (for_update -> ID PLUS PLUS .)


state 191

    (44) for_update -> ID MINUS MINUS .

    RPAREN          reduce using rule 44 (for_update -> ID MINUS MINUS .)


state 192

    (45) for_update -> ID ASSIGN expression .
    (15) expression -> expression . PLUS expression
    (16) expression -> expression . MINUS expression
    (17) expression -> expression . TIMES expression
    (18) expression -> expression . DIVIDE expression
    (22) expression -> expression . AND expression
    (23) expression -> expression . OR expression
    (25) expression -> expression . EQ expression
    (26) expression -> expression . NEQ expression
    (29) expression -> expression . DOT ID
    (56) expression -> expression . PLUS DOUBLE
    (57) expression -> expression . MINUS DOUBLE
    (58) expression -> expression . TIMES DOUBLE
    (59) expression -> expression . DIVIDE DOUBLE

    RPAREN          reduce using rule 45 (for_update -> ID ASSIGN expression .)
    PLUS            shift and go to state 73
    MINUS           shift and go to state 74
    TIMES           shift and go to state 75
    DIVIDE          shift and go to state 76
    AND             shift and go to state 77
    OR              shift and go to state 78
    EQ              shift and go to state 79
    NEQ             shift and go to state 80
    DOT             shift and go to state 81


state 193

    (39) statement -> FOR LPAREN VAR ID IN expression RPAREN LBRACE statement . RBRACE

    RBRACE          shift and go to state 201


state 194

    (46) statement -> MAP LT type COMA type GT ID ASSIGN LBRACE . map_entries RBRACE SEMI
    (47) statement -> MAP LT type COMA type GT ID ASSIGN LBRACE . RBRACE SEMI
    (48) map_entries -> . map_entry COMA map_entries
    (49) map_entries -> . map_entry
    (50) map_entry -> . expression COLON expression
    (14) expression -> . INT
    (15) expression -> . expression PLUS expression
    (16) expression -> . expression MINUS expression
    (17) expression -> . expression TIMES expression
    (18) expression -> . expression DIVIDE expression
    (19) expression -> . STRING
    (20) expression -> . TRUE
    (21) expression -> . FALSE
    (22) expression -> . expression AND expression
    (23) expression -> . expression OR expression
    (24) expression -> . NOT expression
    (25) expression -> . expression EQ expression
    (26) expression -> . expression NEQ expression
    (27) expression -> . LPAREN expression RPAREN
    (28) expression -> . ID
    (29) expression -> . expression DOT ID
    (31) expression -> . STDIN DOT READLINESYNC LPAREN RPAREN
    (55) expression -> . DOUBLE
    (56) expression -> . expression PLUS DOUBLE
    (57) expression -> . expression MINUS DOUBLE
    (58) expression -> . expression TIMES DOUBLE
    (59) expression -> . expression DIVIDE DOUBLE
    (60) expression -> . DOUBLE PLUS expression
    (61) expression -> . DOUBLE MINUS expression
    (62) expression -> . DOUBLE TIMES expression
    (63) expression -> . DOUBLE DIVIDE expression

    RBRACE          shift and go to state 203
    INT             shift and go to state 44
    STRING          shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    NOT             shift and go to state 48
    LPAREN          shift and go to state 42
    ID              shift and go to state 49
    STDIN           shift and go to state 50
    DOUBLE          shift and go to state 51

    map_entries                    shift and go to state 202
    map_entry                      shift and go to state 204
    expression                     shift and go to state 205

state 195

    (51) statement -> SET LT type GT ID ASSIGN LBRACE set_elements RBRACE . SEMI

    SEMI            shift and go to state 206


state 196

    (52) statement -> SET LT type GT ID ASSIGN LBRACE RBRACE SEMI .

    CLASS           reduce using rule 52 (statement -> SET LT type GT ID ASSIGN LBRACE RBRACE SEMI .)
    VAR             reduce using rule 52 (statement -> SET LT type GT ID ASSIGN LBRACE RBRACE SEMI .)
    FINAL           reduce using rule 52 (statement -> SET LT type GT ID ASSIGN LBRACE RBRACE SEMI .)
    NEWLINE         reduce using rule 52 (statement -> SET LT type GT ID ASSIGN LBRACE RBRACE SEMI .)
    ID              reduce using rule 52 (statement -> SET LT type GT ID ASSIGN LBRACE RBRACE SEMI .)
    IF              reduce using rule 52 (statement -> SET LT type GT ID ASSIGN LBRACE RBRACE SEMI .)
    PRINT           reduce using rule 52 (statement -> SET LT type GT ID ASSIGN LBRACE RBRACE SEMI .)
    LIST            reduce using rule 52 (statement -> SET LT type GT ID ASSIGN LBRACE RBRACE SEMI .)
    WHILE           reduce using rule 52 (statement -> SET LT type GT ID ASSIGN LBRACE RBRACE SEMI .)
    FOR             reduce using rule 52 (statement -> SET LT type GT ID ASSIGN LBRACE RBRACE SEMI .)
    MAP             reduce using rule 52 (statement -> SET LT type GT ID ASSIGN LBRACE RBRACE SEMI .)
    SET             reduce using rule 52 (statement -> SET LT type GT ID ASSIGN LBRACE RBRACE SEMI .)
    VOID            reduce using rule 52 (statement -> SET LT type GT ID ASSIGN LBRACE RBRACE SEMI .)
    INT_TYPE        reduce using rule 52 (statement -> SET LT type GT ID ASSIGN LBRACE RBRACE SEMI .)
    STRING_TYPE     reduce using rule 52 (statement -> SET LT type GT ID ASSIGN LBRACE RBRACE SEMI .)
    BOOL_TYPE       reduce using rule 52 (statement -> SET LT type GT ID ASSIGN LBRACE RBRACE SEMI .)
    DOUBLE_TYPE     reduce using rule 52 (statement -> SET LT type GT ID ASSIGN LBRACE RBRACE SEMI .)
    $end            reduce using rule 52 (statement -> SET LT type GT ID ASSIGN LBRACE RBRACE SEMI .)
    RBRACE          reduce using rule 52 (statement -> SET LT type GT ID ASSIGN LBRACE RBRACE SEMI .)


state 197

    (53) set_elements -> expression COMA . set_elements
    (53) set_elements -> . expression COMA set_elements
    (54) set_elements -> . expression
    (14) expression -> . INT
    (15) expression -> . expression PLUS expression
    (16) expression -> . expression MINUS expression
    (17) expression -> . expression TIMES expression
    (18) expression -> . expression DIVIDE expression
    (19) expression -> . STRING
    (20) expression -> . TRUE
    (21) expression -> . FALSE
    (22) expression -> . expression AND expression
    (23) expression -> . expression OR expression
    (24) expression -> . NOT expression
    (25) expression -> . expression EQ expression
    (26) expression -> . expression NEQ expression
    (27) expression -> . LPAREN expression RPAREN
    (28) expression -> . ID
    (29) expression -> . expression DOT ID
    (31) expression -> . STDIN DOT READLINESYNC LPAREN RPAREN
    (55) expression -> . DOUBLE
    (56) expression -> . expression PLUS DOUBLE
    (57) expression -> . expression MINUS DOUBLE
    (58) expression -> . expression TIMES DOUBLE
    (59) expression -> . expression DIVIDE DOUBLE
    (60) expression -> . DOUBLE PLUS expression
    (61) expression -> . DOUBLE MINUS expression
    (62) expression -> . DOUBLE TIMES expression
    (63) expression -> . DOUBLE DIVIDE expression

    INT             shift and go to state 44
    STRING          shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    NOT             shift and go to state 48
    LPAREN          shift and go to state 42
    ID              shift and go to state 49
    STDIN           shift and go to state 50
    DOUBLE          shift and go to state 51

    expression                     shift and go to state 184
    set_elements                   shift and go to state 207

state 198

    (13) statement -> IF LPAREN expression RPAREN LBRACE statement RBRACE ELSE LBRACE statement . RBRACE

    RBRACE          shift and go to state 208


state 199

    (33) statement -> LIST LT type GT ID ASSIGN LBRACKET group RBRACKET SEMI .

    CLASS           reduce using rule 33 (statement -> LIST LT type GT ID ASSIGN LBRACKET group RBRACKET SEMI .)
    VAR             reduce using rule 33 (statement -> LIST LT type GT ID ASSIGN LBRACKET group RBRACKET SEMI .)
    FINAL           reduce using rule 33 (statement -> LIST LT type GT ID ASSIGN LBRACKET group RBRACKET SEMI .)
    NEWLINE         reduce using rule 33 (statement -> LIST LT type GT ID ASSIGN LBRACKET group RBRACKET SEMI .)
    ID              reduce using rule 33 (statement -> LIST LT type GT ID ASSIGN LBRACKET group RBRACKET SEMI .)
    IF              reduce using rule 33 (statement -> LIST LT type GT ID ASSIGN LBRACKET group RBRACKET SEMI .)
    PRINT           reduce using rule 33 (statement -> LIST LT type GT ID ASSIGN LBRACKET group RBRACKET SEMI .)
    LIST            reduce using rule 33 (statement -> LIST LT type GT ID ASSIGN LBRACKET group RBRACKET SEMI .)
    WHILE           reduce using rule 33 (statement -> LIST LT type GT ID ASSIGN LBRACKET group RBRACKET SEMI .)
    FOR             reduce using rule 33 (statement -> LIST LT type GT ID ASSIGN LBRACKET group RBRACKET SEMI .)
    MAP             reduce using rule 33 (statement -> LIST LT type GT ID ASSIGN LBRACKET group RBRACKET SEMI .)
    SET             reduce using rule 33 (statement -> LIST LT type GT ID ASSIGN LBRACKET group RBRACKET SEMI .)
    VOID            reduce using rule 33 (statement -> LIST LT type GT ID ASSIGN LBRACKET group RBRACKET SEMI .)
    INT_TYPE        reduce using rule 33 (statement -> LIST LT type GT ID ASSIGN LBRACKET group RBRACKET SEMI .)
    STRING_TYPE     reduce using rule 33 (statement -> LIST LT type GT ID ASSIGN LBRACKET group RBRACKET SEMI .)
    BOOL_TYPE       reduce using rule 33 (statement -> LIST LT type GT ID ASSIGN LBRACKET group RBRACKET SEMI .)
    DOUBLE_TYPE     reduce using rule 33 (statement -> LIST LT type GT ID ASSIGN LBRACKET group RBRACKET SEMI .)
    $end            reduce using rule 33 (statement -> LIST LT type GT ID ASSIGN LBRACKET group RBRACKET SEMI .)
    RBRACE          reduce using rule 33 (statement -> LIST LT type GT ID ASSIGN LBRACKET group RBRACKET SEMI .)


state 200

    (38) statement -> FOR LPAREN for_init SEMI expression SEMI for_update RPAREN LBRACE statement . RBRACE

    RBRACE          shift and go to state 209


state 201

    (39) statement -> FOR LPAREN VAR ID IN expression RPAREN LBRACE statement RBRACE .

    CLASS           reduce using rule 39 (statement -> FOR LPAREN VAR ID IN expression RPAREN LBRACE statement RBRACE .)
    VAR             reduce using rule 39 (statement -> FOR LPAREN VAR ID IN expression RPAREN LBRACE statement RBRACE .)
    FINAL           reduce using rule 39 (statement -> FOR LPAREN VAR ID IN expression RPAREN LBRACE statement RBRACE .)
    NEWLINE         reduce using rule 39 (statement -> FOR LPAREN VAR ID IN expression RPAREN LBRACE statement RBRACE .)
    ID              reduce using rule 39 (statement -> FOR LPAREN VAR ID IN expression RPAREN LBRACE statement RBRACE .)
    IF              reduce using rule 39 (statement -> FOR LPAREN VAR ID IN expression RPAREN LBRACE statement RBRACE .)
    PRINT           reduce using rule 39 (statement -> FOR LPAREN VAR ID IN expression RPAREN LBRACE statement RBRACE .)
    LIST            reduce using rule 39 (statement -> FOR LPAREN VAR ID IN expression RPAREN LBRACE statement RBRACE .)
    WHILE           reduce using rule 39 (statement -> FOR LPAREN VAR ID IN expression RPAREN LBRACE statement RBRACE .)
    FOR             reduce using rule 39 (statement -> FOR LPAREN VAR ID IN expression RPAREN LBRACE statement RBRACE .)
    MAP             reduce using rule 39 (statement -> FOR LPAREN VAR ID IN expression RPAREN LBRACE statement RBRACE .)
    SET             reduce using rule 39 (statement -> FOR LPAREN VAR ID IN expression RPAREN LBRACE statement RBRACE .)
    VOID            reduce using rule 39 (statement -> FOR LPAREN VAR ID IN expression RPAREN LBRACE statement RBRACE .)
    INT_TYPE        reduce using rule 39 (statement -> FOR LPAREN VAR ID IN expression RPAREN LBRACE statement RBRACE .)
    STRING_TYPE     reduce using rule 39 (statement -> FOR LPAREN VAR ID IN expression RPAREN LBRACE statement RBRACE .)
    BOOL_TYPE       reduce using rule 39 (statement -> FOR LPAREN VAR ID IN expression RPAREN LBRACE statement RBRACE .)
    DOUBLE_TYPE     reduce using rule 39 (statement -> FOR LPAREN VAR ID IN expression RPAREN LBRACE statement RBRACE .)
    $end            reduce using rule 39 (statement -> FOR LPAREN VAR ID IN expression RPAREN LBRACE statement RBRACE .)
    RBRACE          reduce using rule 39 (statement -> FOR LPAREN VAR ID IN expression RPAREN LBRACE statement RBRACE .)


state 202

    (46) statement -> MAP LT type COMA type GT ID ASSIGN LBRACE map_entries . RBRACE SEMI

    RBRACE          shift and go to state 210


state 203

    (47) statement -> MAP LT type COMA type GT ID ASSIGN LBRACE RBRACE . SEMI

    SEMI            shift and go to state 211


state 204

    (48) map_entries -> map_entry . COMA map_entries
    (49) map_entries -> map_entry .

    COMA            shift and go to state 212
    RBRACE          reduce using rule 49 (map_entries -> map_entry .)


state 205

    (50) map_entry -> expression . COLON expression
    (15) expression -> expression . PLUS expression
    (16) expression -> expression . MINUS expression
    (17) expression -> expression . TIMES expression
    (18) expression -> expression . DIVIDE expression
    (22) expression -> expression . AND expression
    (23) expression -> expression . OR expression
    (25) expression -> expression . EQ expression
    (26) expression -> expression . NEQ expression
    (29) expression -> expression . DOT ID
    (56) expression -> expression . PLUS DOUBLE
    (57) expression -> expression . MINUS DOUBLE
    (58) expression -> expression . TIMES DOUBLE
    (59) expression -> expression . DIVIDE DOUBLE

    COLON           shift and go to state 213
    PLUS            shift and go to state 73
    MINUS           shift and go to state 74
    TIMES           shift and go to state 75
    DIVIDE          shift and go to state 76
    AND             shift and go to state 77
    OR              shift and go to state 78
    EQ              shift and go to state 79
    NEQ             shift and go to state 80
    DOT             shift and go to state 81


state 206

    (51) statement -> SET LT type GT ID ASSIGN LBRACE set_elements RBRACE SEMI .

    CLASS           reduce using rule 51 (statement -> SET LT type GT ID ASSIGN LBRACE set_elements RBRACE SEMI .)
    VAR             reduce using rule 51 (statement -> SET LT type GT ID ASSIGN LBRACE set_elements RBRACE SEMI .)
    FINAL           reduce using rule 51 (statement -> SET LT type GT ID ASSIGN LBRACE set_elements RBRACE SEMI .)
    NEWLINE         reduce using rule 51 (statement -> SET LT type GT ID ASSIGN LBRACE set_elements RBRACE SEMI .)
    ID              reduce using rule 51 (statement -> SET LT type GT ID ASSIGN LBRACE set_elements RBRACE SEMI .)
    IF              reduce using rule 51 (statement -> SET LT type GT ID ASSIGN LBRACE set_elements RBRACE SEMI .)
    PRINT           reduce using rule 51 (statement -> SET LT type GT ID ASSIGN LBRACE set_elements RBRACE SEMI .)
    LIST            reduce using rule 51 (statement -> SET LT type GT ID ASSIGN LBRACE set_elements RBRACE SEMI .)
    WHILE           reduce using rule 51 (statement -> SET LT type GT ID ASSIGN LBRACE set_elements RBRACE SEMI .)
    FOR             reduce using rule 51 (statement -> SET LT type GT ID ASSIGN LBRACE set_elements RBRACE SEMI .)
    MAP             reduce using rule 51 (statement -> SET LT type GT ID ASSIGN LBRACE set_elements RBRACE SEMI .)
    SET             reduce using rule 51 (statement -> SET LT type GT ID ASSIGN LBRACE set_elements RBRACE SEMI .)
    VOID            reduce using rule 51 (statement -> SET LT type GT ID ASSIGN LBRACE set_elements RBRACE SEMI .)
    INT_TYPE        reduce using rule 51 (statement -> SET LT type GT ID ASSIGN LBRACE set_elements RBRACE SEMI .)
    STRING_TYPE     reduce using rule 51 (statement -> SET LT type GT ID ASSIGN LBRACE set_elements RBRACE SEMI .)
    BOOL_TYPE       reduce using rule 51 (statement -> SET LT type GT ID ASSIGN LBRACE set_elements RBRACE SEMI .)
    DOUBLE_TYPE     reduce using rule 51 (statement -> SET LT type GT ID ASSIGN LBRACE set_elements RBRACE SEMI .)
    $end            reduce using rule 51 (statement -> SET LT type GT ID ASSIGN LBRACE set_elements RBRACE SEMI .)
    RBRACE          reduce using rule 51 (statement -> SET LT type GT ID ASSIGN LBRACE set_elements RBRACE SEMI .)


state 207

    (53) set_elements -> expression COMA set_elements .

    RBRACE          reduce using rule 53 (set_elements -> expression COMA set_elements .)


state 208

    (13) statement -> IF LPAREN expression RPAREN LBRACE statement RBRACE ELSE LBRACE statement RBRACE .

    CLASS           reduce using rule 13 (statement -> IF LPAREN expression RPAREN LBRACE statement RBRACE ELSE LBRACE statement RBRACE .)
    VAR             reduce using rule 13 (statement -> IF LPAREN expression RPAREN LBRACE statement RBRACE ELSE LBRACE statement RBRACE .)
    FINAL           reduce using rule 13 (statement -> IF LPAREN expression RPAREN LBRACE statement RBRACE ELSE LBRACE statement RBRACE .)
    NEWLINE         reduce using rule 13 (statement -> IF LPAREN expression RPAREN LBRACE statement RBRACE ELSE LBRACE statement RBRACE .)
    ID              reduce using rule 13 (statement -> IF LPAREN expression RPAREN LBRACE statement RBRACE ELSE LBRACE statement RBRACE .)
    IF              reduce using rule 13 (statement -> IF LPAREN expression RPAREN LBRACE statement RBRACE ELSE LBRACE statement RBRACE .)
    PRINT           reduce using rule 13 (statement -> IF LPAREN expression RPAREN LBRACE statement RBRACE ELSE LBRACE statement RBRACE .)
    LIST            reduce using rule 13 (statement -> IF LPAREN expression RPAREN LBRACE statement RBRACE ELSE LBRACE statement RBRACE .)
    WHILE           reduce using rule 13 (statement -> IF LPAREN expression RPAREN LBRACE statement RBRACE ELSE LBRACE statement RBRACE .)
    FOR             reduce using rule 13 (statement -> IF LPAREN expression RPAREN LBRACE statement RBRACE ELSE LBRACE statement RBRACE .)
    MAP             reduce using rule 13 (statement -> IF LPAREN expression RPAREN LBRACE statement RBRACE ELSE LBRACE statement RBRACE .)
    SET             reduce using rule 13 (statement -> IF LPAREN expression RPAREN LBRACE statement RBRACE ELSE LBRACE statement RBRACE .)
    VOID            reduce using rule 13 (statement -> IF LPAREN expression RPAREN LBRACE statement RBRACE ELSE LBRACE statement RBRACE .)
    INT_TYPE        reduce using rule 13 (statement -> IF LPAREN expression RPAREN LBRACE statement RBRACE ELSE LBRACE statement RBRACE .)
    STRING_TYPE     reduce using rule 13 (statement -> IF LPAREN expression RPAREN LBRACE statement RBRACE ELSE LBRACE statement RBRACE .)
    BOOL_TYPE       reduce using rule 13 (statement -> IF LPAREN expression RPAREN LBRACE statement RBRACE ELSE LBRACE statement RBRACE .)
    DOUBLE_TYPE     reduce using rule 13 (statement -> IF LPAREN expression RPAREN LBRACE statement RBRACE ELSE LBRACE statement RBRACE .)
    $end            reduce using rule 13 (statement -> IF LPAREN expression RPAREN LBRACE statement RBRACE ELSE LBRACE statement RBRACE .)
    RBRACE          reduce using rule 13 (statement -> IF LPAREN expression RPAREN LBRACE statement RBRACE ELSE LBRACE statement RBRACE .)


state 209

    (38) statement -> FOR LPAREN for_init SEMI expression SEMI for_update RPAREN LBRACE statement RBRACE .

    CLASS           reduce using rule 38 (statement -> FOR LPAREN for_init SEMI expression SEMI for_update RPAREN LBRACE statement RBRACE .)
    VAR             reduce using rule 38 (statement -> FOR LPAREN for_init SEMI expression SEMI for_update RPAREN LBRACE statement RBRACE .)
    FINAL           reduce using rule 38 (statement -> FOR LPAREN for_init SEMI expression SEMI for_update RPAREN LBRACE statement RBRACE .)
    NEWLINE         reduce using rule 38 (statement -> FOR LPAREN for_init SEMI expression SEMI for_update RPAREN LBRACE statement RBRACE .)
    ID              reduce using rule 38 (statement -> FOR LPAREN for_init SEMI expression SEMI for_update RPAREN LBRACE statement RBRACE .)
    IF              reduce using rule 38 (statement -> FOR LPAREN for_init SEMI expression SEMI for_update RPAREN LBRACE statement RBRACE .)
    PRINT           reduce using rule 38 (statement -> FOR LPAREN for_init SEMI expression SEMI for_update RPAREN LBRACE statement RBRACE .)
    LIST            reduce using rule 38 (statement -> FOR LPAREN for_init SEMI expression SEMI for_update RPAREN LBRACE statement RBRACE .)
    WHILE           reduce using rule 38 (statement -> FOR LPAREN for_init SEMI expression SEMI for_update RPAREN LBRACE statement RBRACE .)
    FOR             reduce using rule 38 (statement -> FOR LPAREN for_init SEMI expression SEMI for_update RPAREN LBRACE statement RBRACE .)
    MAP             reduce using rule 38 (statement -> FOR LPAREN for_init SEMI expression SEMI for_update RPAREN LBRACE statement RBRACE .)
    SET             reduce using rule 38 (statement -> FOR LPAREN for_init SEMI expression SEMI for_update RPAREN LBRACE statement RBRACE .)
    VOID            reduce using rule 38 (statement -> FOR LPAREN for_init SEMI expression SEMI for_update RPAREN LBRACE statement RBRACE .)
    INT_TYPE        reduce using rule 38 (statement -> FOR LPAREN for_init SEMI expression SEMI for_update RPAREN LBRACE statement RBRACE .)
    STRING_TYPE     reduce using rule 38 (statement -> FOR LPAREN for_init SEMI expression SEMI for_update RPAREN LBRACE statement RBRACE .)
    BOOL_TYPE       reduce using rule 38 (statement -> FOR LPAREN for_init SEMI expression SEMI for_update RPAREN LBRACE statement RBRACE .)
    DOUBLE_TYPE     reduce using rule 38 (statement -> FOR LPAREN for_init SEMI expression SEMI for_update RPAREN LBRACE statement RBRACE .)
    $end            reduce using rule 38 (statement -> FOR LPAREN for_init SEMI expression SEMI for_update RPAREN LBRACE statement RBRACE .)
    RBRACE          reduce using rule 38 (statement -> FOR LPAREN for_init SEMI expression SEMI for_update RPAREN LBRACE statement RBRACE .)


state 210

    (46) statement -> MAP LT type COMA type GT ID ASSIGN LBRACE map_entries RBRACE . SEMI

    SEMI            shift and go to state 214


state 211

    (47) statement -> MAP LT type COMA type GT ID ASSIGN LBRACE RBRACE SEMI .

    CLASS           reduce using rule 47 (statement -> MAP LT type COMA type GT ID ASSIGN LBRACE RBRACE SEMI .)
    VAR             reduce using rule 47 (statement -> MAP LT type COMA type GT ID ASSIGN LBRACE RBRACE SEMI .)
    FINAL           reduce using rule 47 (statement -> MAP LT type COMA type GT ID ASSIGN LBRACE RBRACE SEMI .)
    NEWLINE         reduce using rule 47 (statement -> MAP LT type COMA type GT ID ASSIGN LBRACE RBRACE SEMI .)
    ID              reduce using rule 47 (statement -> MAP LT type COMA type GT ID ASSIGN LBRACE RBRACE SEMI .)
    IF              reduce using rule 47 (statement -> MAP LT type COMA type GT ID ASSIGN LBRACE RBRACE SEMI .)
    PRINT           reduce using rule 47 (statement -> MAP LT type COMA type GT ID ASSIGN LBRACE RBRACE SEMI .)
    LIST            reduce using rule 47 (statement -> MAP LT type COMA type GT ID ASSIGN LBRACE RBRACE SEMI .)
    WHILE           reduce using rule 47 (statement -> MAP LT type COMA type GT ID ASSIGN LBRACE RBRACE SEMI .)
    FOR             reduce using rule 47 (statement -> MAP LT type COMA type GT ID ASSIGN LBRACE RBRACE SEMI .)
    MAP             reduce using rule 47 (statement -> MAP LT type COMA type GT ID ASSIGN LBRACE RBRACE SEMI .)
    SET             reduce using rule 47 (statement -> MAP LT type COMA type GT ID ASSIGN LBRACE RBRACE SEMI .)
    VOID            reduce using rule 47 (statement -> MAP LT type COMA type GT ID ASSIGN LBRACE RBRACE SEMI .)
    INT_TYPE        reduce using rule 47 (statement -> MAP LT type COMA type GT ID ASSIGN LBRACE RBRACE SEMI .)
    STRING_TYPE     reduce using rule 47 (statement -> MAP LT type COMA type GT ID ASSIGN LBRACE RBRACE SEMI .)
    BOOL_TYPE       reduce using rule 47 (statement -> MAP LT type COMA type GT ID ASSIGN LBRACE RBRACE SEMI .)
    DOUBLE_TYPE     reduce using rule 47 (statement -> MAP LT type COMA type GT ID ASSIGN LBRACE RBRACE SEMI .)
    $end            reduce using rule 47 (statement -> MAP LT type COMA type GT ID ASSIGN LBRACE RBRACE SEMI .)
    RBRACE          reduce using rule 47 (statement -> MAP LT type COMA type GT ID ASSIGN LBRACE RBRACE SEMI .)


state 212

    (48) map_entries -> map_entry COMA . map_entries
    (48) map_entries -> . map_entry COMA map_entries
    (49) map_entries -> . map_entry
    (50) map_entry -> . expression COLON expression
    (14) expression -> . INT
    (15) expression -> . expression PLUS expression
    (16) expression -> . expression MINUS expression
    (17) expression -> . expression TIMES expression
    (18) expression -> . expression DIVIDE expression
    (19) expression -> . STRING
    (20) expression -> . TRUE
    (21) expression -> . FALSE
    (22) expression -> . expression AND expression
    (23) expression -> . expression OR expression
    (24) expression -> . NOT expression
    (25) expression -> . expression EQ expression
    (26) expression -> . expression NEQ expression
    (27) expression -> . LPAREN expression RPAREN
    (28) expression -> . ID
    (29) expression -> . expression DOT ID
    (31) expression -> . STDIN DOT READLINESYNC LPAREN RPAREN
    (55) expression -> . DOUBLE
    (56) expression -> . expression PLUS DOUBLE
    (57) expression -> . expression MINUS DOUBLE
    (58) expression -> . expression TIMES DOUBLE
    (59) expression -> . expression DIVIDE DOUBLE
    (60) expression -> . DOUBLE PLUS expression
    (61) expression -> . DOUBLE MINUS expression
    (62) expression -> . DOUBLE TIMES expression
    (63) expression -> . DOUBLE DIVIDE expression

    INT             shift and go to state 44
    STRING          shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    NOT             shift and go to state 48
    LPAREN          shift and go to state 42
    ID              shift and go to state 49
    STDIN           shift and go to state 50
    DOUBLE          shift and go to state 51

    map_entry                      shift and go to state 204
    map_entries                    shift and go to state 215
    expression                     shift and go to state 205

state 213

    (50) map_entry -> expression COLON . expression
    (14) expression -> . INT
    (15) expression -> . expression PLUS expression
    (16) expression -> . expression MINUS expression
    (17) expression -> . expression TIMES expression
    (18) expression -> . expression DIVIDE expression
    (19) expression -> . STRING
    (20) expression -> . TRUE
    (21) expression -> . FALSE
    (22) expression -> . expression AND expression
    (23) expression -> . expression OR expression
    (24) expression -> . NOT expression
    (25) expression -> . expression EQ expression
    (26) expression -> . expression NEQ expression
    (27) expression -> . LPAREN expression RPAREN
    (28) expression -> . ID
    (29) expression -> . expression DOT ID
    (31) expression -> . STDIN DOT READLINESYNC LPAREN RPAREN
    (55) expression -> . DOUBLE
    (56) expression -> . expression PLUS DOUBLE
    (57) expression -> . expression MINUS DOUBLE
    (58) expression -> . expression TIMES DOUBLE
    (59) expression -> . expression DIVIDE DOUBLE
    (60) expression -> . DOUBLE PLUS expression
    (61) expression -> . DOUBLE MINUS expression
    (62) expression -> . DOUBLE TIMES expression
    (63) expression -> . DOUBLE DIVIDE expression

    INT             shift and go to state 44
    STRING          shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    NOT             shift and go to state 48
    LPAREN          shift and go to state 42
    ID              shift and go to state 49
    STDIN           shift and go to state 50
    DOUBLE          shift and go to state 51

    expression                     shift and go to state 216

state 214

    (46) statement -> MAP LT type COMA type GT ID ASSIGN LBRACE map_entries RBRACE SEMI .

    CLASS           reduce using rule 46 (statement -> MAP LT type COMA type GT ID ASSIGN LBRACE map_entries RBRACE SEMI .)
    VAR             reduce using rule 46 (statement -> MAP LT type COMA type GT ID ASSIGN LBRACE map_entries RBRACE SEMI .)
    FINAL           reduce using rule 46 (statement -> MAP LT type COMA type GT ID ASSIGN LBRACE map_entries RBRACE SEMI .)
    NEWLINE         reduce using rule 46 (statement -> MAP LT type COMA type GT ID ASSIGN LBRACE map_entries RBRACE SEMI .)
    ID              reduce using rule 46 (statement -> MAP LT type COMA type GT ID ASSIGN LBRACE map_entries RBRACE SEMI .)
    IF              reduce using rule 46 (statement -> MAP LT type COMA type GT ID ASSIGN LBRACE map_entries RBRACE SEMI .)
    PRINT           reduce using rule 46 (statement -> MAP LT type COMA type GT ID ASSIGN LBRACE map_entries RBRACE SEMI .)
    LIST            reduce using rule 46 (statement -> MAP LT type COMA type GT ID ASSIGN LBRACE map_entries RBRACE SEMI .)
    WHILE           reduce using rule 46 (statement -> MAP LT type COMA type GT ID ASSIGN LBRACE map_entries RBRACE SEMI .)
    FOR             reduce using rule 46 (statement -> MAP LT type COMA type GT ID ASSIGN LBRACE map_entries RBRACE SEMI .)
    MAP             reduce using rule 46 (statement -> MAP LT type COMA type GT ID ASSIGN LBRACE map_entries RBRACE SEMI .)
    SET             reduce using rule 46 (statement -> MAP LT type COMA type GT ID ASSIGN LBRACE map_entries RBRACE SEMI .)
    VOID            reduce using rule 46 (statement -> MAP LT type COMA type GT ID ASSIGN LBRACE map_entries RBRACE SEMI .)
    INT_TYPE        reduce using rule 46 (statement -> MAP LT type COMA type GT ID ASSIGN LBRACE map_entries RBRACE SEMI .)
    STRING_TYPE     reduce using rule 46 (statement -> MAP LT type COMA type GT ID ASSIGN LBRACE map_entries RBRACE SEMI .)
    BOOL_TYPE       reduce using rule 46 (statement -> MAP LT type COMA type GT ID ASSIGN LBRACE map_entries RBRACE SEMI .)
    DOUBLE_TYPE     reduce using rule 46 (statement -> MAP LT type COMA type GT ID ASSIGN LBRACE map_entries RBRACE SEMI .)
    $end            reduce using rule 46 (statement -> MAP LT type COMA type GT ID ASSIGN LBRACE map_entries RBRACE SEMI .)
    RBRACE          reduce using rule 46 (statement -> MAP LT type COMA type GT ID ASSIGN LBRACE map_entries RBRACE SEMI .)


state 215

    (48) map_entries -> map_entry COMA map_entries .

    RBRACE          reduce using rule 48 (map_entries -> map_entry COMA map_entries .)


state 216

    (50) map_entry -> expression COLON expression .
    (15) expression -> expression . PLUS expression
    (16) expression -> expression . MINUS expression
    (17) expression -> expression . TIMES expression
    (18) expression -> expression . DIVIDE expression
    (22) expression -> expression . AND expression
    (23) expression -> expression . OR expression
    (25) expression -> expression . EQ expression
    (26) expression -> expression . NEQ expression
    (29) expression -> expression . DOT ID
    (56) expression -> expression . PLUS DOUBLE
    (57) expression -> expression . MINUS DOUBLE
    (58) expression -> expression . TIMES DOUBLE
    (59) expression -> expression . DIVIDE DOUBLE

    COMA            reduce using rule 50 (map_entry -> expression COLON expression .)
    RBRACE          reduce using rule 50 (map_entry -> expression COLON expression .)
    PLUS            shift and go to state 73
    MINUS           shift and go to state 74
    TIMES           shift and go to state 75
    DIVIDE          shift and go to state 76
    AND             shift and go to state 77
    OR              shift and go to state 78
    EQ              shift and go to state 79
    NEQ             shift and go to state 80
    DOT             shift and go to state 81

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ID in state 5 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 51 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 51 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 51 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 51 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 110 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 110 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 110 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 110 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 112 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 112 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 112 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 112 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 114 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 114 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 114 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 114 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 116 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 116 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 116 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 116 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 119 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 119 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 119 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 119 resolved as shift
WARNING: shift/reduce conflict for AND in state 119 resolved as shift
WARNING: shift/reduce conflict for OR in state 119 resolved as shift
WARNING: shift/reduce conflict for EQ in state 119 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 119 resolved as shift
WARNING: shift/reduce conflict for DOT in state 119 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 120 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 120 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 120 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 120 resolved as shift
WARNING: shift/reduce conflict for AND in state 120 resolved as shift
WARNING: shift/reduce conflict for OR in state 120 resolved as shift
WARNING: shift/reduce conflict for EQ in state 120 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 120 resolved as shift
WARNING: shift/reduce conflict for DOT in state 120 resolved as shift
WARNING: reduce/reduce conflict in state 66 resolved using rule (class_body -> <empty>)
WARNING: rejected rule (class_body -> statement) in state 66
WARNING: reduce/reduce conflict in state 110 resolved using rule (expression -> DOUBLE)
WARNING: rejected rule (expression -> expression PLUS DOUBLE) in state 110
WARNING: reduce/reduce conflict in state 112 resolved using rule (expression -> DOUBLE)
WARNING: rejected rule (expression -> expression MINUS DOUBLE) in state 112
WARNING: reduce/reduce conflict in state 114 resolved using rule (expression -> DOUBLE)
WARNING: rejected rule (expression -> expression TIMES DOUBLE) in state 114
WARNING: reduce/reduce conflict in state 116 resolved using rule (expression -> DOUBLE)
WARNING: rejected rule (expression -> expression DIVIDE DOUBLE) in state 116
WARNING: Rule (class_body -> statement) is never reduced
WARNING: Rule (expression -> expression PLUS DOUBLE) is never reduced
WARNING: Rule (expression -> expression MINUS DOUBLE) is never reduced
WARNING: Rule (expression -> expression TIMES DOUBLE) is never reduced
WARNING: Rule (expression -> expression DIVIDE DOUBLE) is never reduced
